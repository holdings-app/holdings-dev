/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// These are stubs for DOM APIs not nessecarily available in TS' defaults.
interface Entry {}
interface DirectoryEntry extends Entry {}
interface LocalMediaStream {}

// This is incorrectly marked nodoc in declarative_content.json.
// When it is made visible, the deeper type definition will take precedence.
type ShowAction = void;

// Extensions APIs incorrectly reference `usb.Device`, which is a Platform Apps only API.
// WebUSB is available in Chrome 61+.
declare namespace usb {
  interface Device {

    /**
     * An opaque ID for the USB device. It remains unchanged until the device is unplugged.
     */
    device: number;

    /**
     * The device vendor ID.
     */
    vendorId: number;

    /**
     * The product ID.
     */
    productId: number;

    /**
     * The device version (bcdDevice field).
     */
    version: number;

    /**
     * The iProduct string read from the device, if available.
     */
    productName: string;

    /**
     * The iManufacturer string read from the device, if available.
     */
    manufacturerName: string;

    /**
     * The iSerialNumber string read from the device, if available.
     */
    serialNumber: string;
  }
}

// The MV3 API `action` incorrectly references the MV2-only API `browserAction`.
declare namespace browserAction {

  /**
   * A tuple of RGBA values.
   */
  type ColorArray = [number, number, number, number];

  /**
   * Pixel data for an image. Must be an ImageData object; for example, from a `canvas` element.
   */
  type ImageDataType = ImageData;

}

// Generated on Fri Aug 20 2021 22:23:36 GMT+0000 (Coordinated Universal Time)


declare namespace chrome {

  /**
   * Use the `chrome.accessibilityFeatures` API to manage Chrome's accessibility features. This API relies on the [ChromeSetting prototype of the type API](https://developer.chrome.com/docs/extensions/reference/types/#ChromeSetting) for getting and setting individual accessibility features. In order to get feature states the extension must request `accessibilityFeatures.read` permission. For modifying feature state, the extension needs `accessibilityFeatures.modify` permission. Note that `accessibilityFeatures.modify` does not imply `accessibilityFeatures.read` permission.
   *
   * @chrome-permission accessibilityFeatures.modify
   * @chrome-permission accessibilityFeatures.read
   */
  export namespace accessibilityFeatures {

    /**
     * **ChromeOS only.**
     *
     * Spoken feedback (text-to-speech). The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const spokenFeedback: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Enlarged cursor. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const largeCursor: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Sticky modifier keys (like shift or alt). The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const stickyKeys: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * High contrast rendering mode. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const highContrast: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Full screen magnification. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const screenMagnifier: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Auto mouse click after mouse stops moving. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const autoclick: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Virtual on-screen keyboard. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const virtualKeyboard: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Caret highlighting. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const caretHighlight: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Cursor highlighting. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const cursorHighlight: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Cursor color. The value indicates whether the feature is enabled or not, doesn't indicate the color of it. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     *
     * @since Chrome 85
     */
    export const cursorColor: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Docked magnifier. The value indicates whether docked magnifier feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     *
     * @since Chrome 87
     */
    export const dockedMagnifier: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Focus highlighting. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const focusHighlight: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Select-to-speak. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const selectToSpeak: types.ChromeSetting<boolean>;

    /**
     * **ChromeOS only.**
     *
     * Switch Access. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const switchAccess: types.ChromeSetting<boolean>;

    /**
     * `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     */
    export const animationPolicy: types.ChromeSetting<"allowed" | "once" | "none">;

    /**
     * **ChromeOS only.**
     *
     * Dictation. The value indicates whether the feature is enabled or not. `get()` requires `accessibilityFeatures.read` permission. `set()` and `clear()` require `accessibilityFeatures.modify` permission.
     *
     * @since Chrome 90
     */
    export const dictation: types.ChromeSetting<boolean>;
  }

  /**
   * Use the `chrome.action` API to control the extension's icon in the Google Chrome toolbar.
   *
   * @since Chrome 88
   */
  export namespace action {

    /**
     * Sets the title of the action. This shows up in the tooltip.
     *
     * @param details
     */
    export function setTitle(
      details: {
        /**
         * The string the action should display when moused over.
         */
        title: string,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
    ): Promise<{}>;

    /**
     * Sets the title of the action. This shows up in the tooltip.
     *
     * @param details
     * @param callback
     */
    export function setTitle(
      details: {
        /**
         * The string the action should display when moused over.
         */
        title: string,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets the title of the action.
     *
     * @param details
     */
    export function getTitle(
      details: TabDetails,
    ): Promise<{
      result: string,
    }>;

    /**
     * Gets the title of the action.
     *
     * @param details
     * @param callback
     */
    export function getTitle(
      details: TabDetails,
      callback: (
        result: string,
      ) => void,
    ): void;

    /**
     * Sets the icon for the action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the **path** or the **imageData** property must be specified.
     *
     * @param details
     * @param callback
     */
    export function setIcon(
      details: {
        /**
         * Either an ImageData object or a dictionary {size -> ImageData} representing icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` \* n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.imageData = foo' is equivalent to 'details.imageData = {'16': foo}'
         */
        imageData?: browserAction.ImageDataType | {[name: string]: any},

        /**
         * Either a relative image path or a dictionary {size -> relative image path} pointing to icon to be set. If the icon is specified as a dictionary, the actual image to be used is chosen depending on screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then image with size `scale` \* n will be selected, where n is the size of the icon in the UI. At least one image must be specified. Note that 'details.path = foo' is equivalent to 'details.path = {'16': foo}'
         */
        path?: string | {[name: string]: any},

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Sets the HTML document to be opened as a popup when the user clicks on the action's icon.
     *
     * @param details
     */
    export function setPopup(
      details: {
        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,

        /**
         * The relative path to the HTML file to show in a popup. If set to the empty string (`''`), no popup is shown.
         */
        popup: string,
      },
    ): Promise<{}>;

    /**
     * Sets the HTML document to be opened as a popup when the user clicks on the action's icon.
     *
     * @param details
     * @param callback
     */
    export function setPopup(
      details: {
        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,

        /**
         * The relative path to the HTML file to show in a popup. If set to the empty string (`''`), no popup is shown.
         */
        popup: string,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets the html document set as the popup for this action.
     *
     * @param details
     */
    export function getPopup(
      details: TabDetails,
    ): Promise<{
      result: string,
    }>;

    /**
     * Gets the html document set as the popup for this action.
     *
     * @param details
     * @param callback
     */
    export function getPopup(
      details: TabDetails,
      callback: (
        result: string,
      ) => void,
    ): void;

    /**
     * Sets the badge text for the action. The badge is displayed on top of the icon.
     *
     * @param details
     */
    export function setBadgeText(
      details: {
        /**
         * Any number of characters can be passed, but only about four can fit in the space.
         */
        text: string,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
    ): Promise<{}>;

    /**
     * Sets the badge text for the action. The badge is displayed on top of the icon.
     *
     * @param details
     * @param callback
     */
    export function setBadgeText(
      details: {
        /**
         * Any number of characters can be passed, but only about four can fit in the space.
         */
        text: string,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned. If [displayActionCountAsBadgeText](https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#setExtensionActionOptions) is enabled, a placeholder text will be returned unless the [declarativeNetRequestFeedback](https://developer.chrome.com/docs/extensions/declare_permissions#declarativeNetRequestFeedback) permission is present or tab-specific badge text was provided.
     *
     * @param details
     */
    export function getBadgeText(
      details: TabDetails,
    ): Promise<{
      result: string,
    }>;

    /**
     * Gets the badge text of the action. If no tab is specified, the non-tab-specific badge text is returned. If [displayActionCountAsBadgeText](https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#setExtensionActionOptions) is enabled, a placeholder text will be returned unless the [declarativeNetRequestFeedback](https://developer.chrome.com/docs/extensions/declare_permissions#declarativeNetRequestFeedback) permission is present or tab-specific badge text was provided.
     *
     * @param details
     * @param callback
     */
    export function getBadgeText(
      details: TabDetails,
      callback: (
        result: string,
      ) => void,
    ): void;

    /**
     * Sets the background color for the badge.
     *
     * @param details
     */
    export function setBadgeBackgroundColor(
      details: {
        /**
         * An array of four integers in the range \[0,255\] that make up the RGBA color of the badge. For example, opaque red is `[255, 0, 0, 255]`. Can also be a string with a CSS value, with opaque red being `#FF0000` or `#F00`.
         */
        color: string | browserAction.ColorArray,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
    ): Promise<{}>;

    /**
     * Sets the background color for the badge.
     *
     * @param details
     * @param callback
     */
    export function setBadgeBackgroundColor(
      details: {
        /**
         * An array of four integers in the range \[0,255\] that make up the RGBA color of the badge. For example, opaque red is `[255, 0, 0, 255]`. Can also be a string with a CSS value, with opaque red being `#FF0000` or `#F00`.
         */
        color: string | browserAction.ColorArray,

        /**
         * Limits the change to when a particular tab is selected. Automatically resets when the tab is closed.
         */
        tabId?: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets the background color of the action.
     *
     * @param details
     */
    export function getBadgeBackgroundColor(
      details: TabDetails,
    ): Promise<{
      result: browserAction.ColorArray,
    }>;

    /**
     * Gets the background color of the action.
     *
     * @param details
     * @param callback
     */
    export function getBadgeBackgroundColor(
      details: TabDetails,
      callback: (
        result: browserAction.ColorArray,
      ) => void,
    ): void;

    /**
     * Enables the action for a tab. By default, actions are enabled.
     *
     * @param tabId The id of the tab for which you want to modify the action.
     */
    export function enable(
      tabId?: number,
    ): Promise<{}>;

    /**
     * Enables the action for a tab. By default, actions are enabled.
     *
     * @param tabId The id of the tab for which you want to modify the action.
     * @param callback
     */
    export function enable(
      tabId?: number,
      callback?: () => void,
    ): void;

    /**
     * Disables the action for a tab.
     *
     * @param tabId The id of the tab for which you want to modify the action.
     */
    export function disable(
      tabId?: number,
    ): Promise<{}>;

    /**
     * Disables the action for a tab.
     *
     * @param tabId The id of the tab for which you want to modify the action.
     * @param callback
     */
    export function disable(
      tabId?: number,
      callback?: () => void,
    ): void;

    /**
     * Returns the user-specified settings relating to an extension's action.
     *
     * @since Chrome 91
     */
    export function getUserSettings(): Promise<{
      userSettings: UserSettings,
    }>;

    /**
     * Returns the user-specified settings relating to an extension's action.
     *
     * @since Chrome 91
     * @param callback
     */
    export function getUserSettings(
      callback: (
        userSettings: UserSettings,
      ) => void,
    ): void;

    export interface TabDetails {

      /**
       * The ID of the tab to query state for. If no tab is specified, the non-tab-specific state is returned.
       */
      tabId?: number;
    }

    /**
     * The collection of user-specified settings relating to an extension's action.
     *
     * @since Chrome 91
     */
    export interface UserSettings {

      /**
       * Whether the extension's action icon is visible on browser windows' top-level toolbar (i.e., whether the extension has been 'pinned' by the user).
       */
      isOnToolbar: boolean;
    }

    /**
     * Fired when an action icon is clicked. This event will not fire if the action has a popup.
     */
    export const onClicked: events.Event<(
      tab: tabs.Tab,
    ) => void>;
  }

  /**
   * Use the `chrome.alarms` API to schedule code to run periodically or at a specified time in the future.
   *
   * @chrome-permission alarms
   */
  export namespace alarms {

    /**
     * Creates an alarm. Near the time(s) specified by alarmInfo, the `onAlarm` event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.
     *
     * In order to reduce the load on the user's machine, Chrome limits alarms to at most once every 1 minute but may delay them an arbitrary amount more. That is, setting `delayInMinutes` or `periodInMinutes` to less than `1` will not be honored and will cause a warning. `when` can be set to less than 1 minute after "now" without warning but won't actually cause the alarm to fire for at least 1 minute.
     *
     * To help you debug your app or extension, when you've loaded it unpacked, there's no limit to how often the alarm can fire.
     *
     * @param name Optional name to identify this alarm. Defaults to the empty string.
     * @param alarmInfo Describes when the alarm should fire. The initial time must be specified by either when or delayInMinutes (but not both). If periodInMinutes is set, the alarm will repeat every periodInMinutes minutes after the initial event. If neither when or delayInMinutes is set for a repeating alarm, periodInMinutes is used as the default for delayInMinutes.
     */
    export function create(
      name: string,
      alarmInfo: AlarmCreateInfo,
    ): void;

    /**
     * Creates an alarm. Near the time(s) specified by alarmInfo, the `onAlarm` event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.
     *
     * In order to reduce the load on the user's machine, Chrome limits alarms to at most once every 1 minute but may delay them an arbitrary amount more. That is, setting `delayInMinutes` or `periodInMinutes` to less than `1` will not be honored and will cause a warning. `when` can be set to less than 1 minute after "now" without warning but won't actually cause the alarm to fire for at least 1 minute.
     *
     * To help you debug your app or extension, when you've loaded it unpacked, there's no limit to how often the alarm can fire.
     *
     * @param alarmInfo Describes when the alarm should fire. The initial time must be specified by either when or delayInMinutes (but not both). If periodInMinutes is set, the alarm will repeat every periodInMinutes minutes after the initial event. If neither when or delayInMinutes is set for a repeating alarm, periodInMinutes is used as the default for delayInMinutes.
     */
    export function create(
      alarmInfo: AlarmCreateInfo,
    ): void;

    /**
     * Retrieves details about the specified alarm.
     *
     * @param name The name of the alarm to get. Defaults to the empty string.
     */
    export function get(
      name?: string,
    ): Promise<{
      alarm?: Alarm,
    }>;

    /**
     * Retrieves details about the specified alarm.
     *
     * @param name The name of the alarm to get. Defaults to the empty string.
     * @param callback
     */
    export function get(
      name: string,
      callback: (
        alarm?: Alarm,
      ) => void,
    ): void;

    /**
     * Retrieves details about the specified alarm.
     *
     * @param callback
     */
    export function get(
      callback: (
        alarm?: Alarm,
      ) => void,
    ): void;

    /**
     * Gets an array of all the alarms.
     */
    export function getAll(): Promise<{
      alarms: Alarm[],
    }>;

    /**
     * Gets an array of all the alarms.
     *
     * @param callback
     */
    export function getAll(
      callback: (
        alarms: Alarm[],
      ) => void,
    ): void;

    /**
     * Clears the alarm with the given name.
     *
     * @param name The name of the alarm to clear. Defaults to the empty string.
     */
    export function clear(
      name?: string,
    ): Promise<{
      wasCleared: boolean,
    }>;

    /**
     * Clears the alarm with the given name.
     *
     * @param name The name of the alarm to clear. Defaults to the empty string.
     * @param callback
     */
    export function clear(
      name?: string,
      callback?: (
        wasCleared: boolean,
      ) => void,
    ): void;

    /**
     * Clears all alarms.
     */
    export function clearAll(): Promise<{
      wasCleared: boolean,
    }>;

    /**
     * Clears all alarms.
     *
     * @param callback
     */
    export function clearAll(
      callback?: (
        wasCleared: boolean,
      ) => void,
    ): void;

    export interface Alarm {

      /**
       * Name of this alarm.
       */
      name: string;

      /**
       * Time at which this alarm was scheduled to fire, in milliseconds past the epoch (e.g. `Date.now() + n`). For performance reasons, the alarm may have been delayed an arbitrary amount beyond this.
       */
      scheduledTime: number;

      /**
       * If not null, the alarm is a repeating alarm and will fire again in periodInMinutes minutes.
       */
      periodInMinutes?: number;
    }

    export interface AlarmCreateInfo {

      /**
       * Time at which the alarm should fire, in milliseconds past the epoch (e.g. `Date.now() + n`).
       */
      when?: number;

      /**
       * Length of time in minutes after which the `onAlarm` event should fire.
       */
      delayInMinutes?: number;

      /**
       * If set, the onAlarm event should fire every periodInMinutes minutes after the initial event specified by when or delayInMinutes. If not set, the alarm will only fire once.
       */
      periodInMinutes?: number;
    }

    /**
     * Fired when an alarm has elapsed. Useful for event pages.
     */
    export const onAlarm: events.Event<(
      /**
       * The alarm that has elapsed.
       */
      alarm: Alarm,
    ) => void>;
  }

  /**
   * The `chrome.automation` API allows developers to access the automation (accessibility) tree for the browser. The tree resembles the DOM tree, but only exposes the _semantic_ structure of a page. It can be used to programmatically interact with a page by examining names, roles, and states, listening for events, and performing actions on nodes.
   *
   * @chrome-channel dev
   * @alpha
   */
  export namespace automation {

    /**
     * Get the automation tree for the tab with the given tabId, or the current tab if no tabID is given, enabling automation if necessary. Returns a tree with a placeholder root node; listen for the "loadComplete" event to get a notification that the tree has fully loaded (the previous root node reference will stop working at or before this point).
     *
     * @param tabId
     * @param callback Called when the `AutomationNode` for the page is available.
     */
    export function getTree(
      tabId?: number,
      callback?: (
        rootNode: AutomationNode,
      ) => void,
    ): void;

    /**
     * Get the automation tree for the whole desktop which consists of all on screen views. Note this API is currently only supported on Chrome OS.
     *
     * @param callback Called when the `AutomationNode` for the page is available.
     */
    export function getDesktop(
      callback: (
        rootNode: AutomationNode,
      ) => void,
    ): void;

    /**
     * Get the automation node that currently has focus, globally. Will return null if none of the nodes in any loaded trees have focus.
     *
     * @param callback Called with the `AutomationNode` that currently has focus.
     */
    export function getFocus(
      callback: (
        focusedNode: AutomationNode,
      ) => void,
    ): void;

    /**
     * Get the automation node that currently has accessibility focus, globally. Will return null if none of the nodes in any loaded trees have accessibility focus.
     *
     * @param callback Called with the `AutomationNode` that currently has accessibility focus.
     */
    export function getAccessibilityFocus(
      callback: (
        focusedNode: AutomationNode,
      ) => void,
    ): void;

    /**
     * Add a tree change observer. Tree change observers are static/global, they listen to changes across all trees. Pass a filter to determine what specific tree changes to listen to, and note that listnening to all tree changes can be expensive.
     *
     * @param filter
     * @param observer A listener for changes on the `AutomationNode` tree.
     */
    export function addTreeChangeObserver(
      filter: TreeChangeObserverFilter,
      observer: (
        treeChange: TreeChange,
      ) => void,
    ): void;

    /**
     * Remove a tree change observer.
     *
     * @param observer A listener for changes on the `AutomationNode` tree.
     */
    export function removeTreeChangeObserver(
      observer: (
        treeChange: TreeChange,
      ) => void,
    ): void;

    /**
     * Sets the selection in a tree. This creates a selection in a single tree (anchorObject and focusObject must have the same root). Everything in the tree between the two node/offset pairs gets included in the selection. The anchor is where the user started the selection, while the focus is the point at which the selection gets extended e.g. when dragging with a mouse or using the keyboard. For nodes with the role staticText, the offset gives the character offset within the value where the selection starts or ends, respectively.
     *
     * @param params
     */
    export function setDocumentSelection(
      params: SetDocumentSelectionParams,
    ): void;

    /**
     * Possible events fired on an {@link automation.AutomationNode}.
     */
    export type EventType = "accessKeyChanged" | "activeDescendantChanged" | "alert" | "ariaAttributeChanged" | "ariaCurrentChanged" | "atomicChanged" | "autoCompleteChanged" | "autocorrectionOccured" | "blur" | "busyChanged" | "caretBoundsChanged" | "checkedStateChanged" | "checkedStateDescriptionChanged" | "childrenChanged" | "classNameChanged" | "clicked" | "collapsed" | "controlsChanged" | "detailsChanged" | "describedByChanged" | "descriptionChanged" | "documentSelectionChanged" | "documentTitleChanged" | "dropeffectChanged" | "editableTextChanged" | "enabledChanged" | "endOfTest" | "expanded" | "expandedChanged" | "flowFromChanged" | "flowToChanged" | "focus" | "focusAfterMenuClose" | "focusChanged" | "focusContext" | "grabbedChanged" | "haspopupChanged" | "hide" | "hierarchicalLevelChanged" | "hitTestResult" | "hover" | "ignoredChanged" | "imageAnnotationChanged" | "imageFrameUpdated" | "invalidStatusChanged" | "keyShortcutsChanged" | "labeledByChanged" | "languageChanged" | "layoutComplete" | "layoutInvalidated" | "liveRegionChanged" | "liveRegionCreated" | "liveRegionNodeChanged" | "liveRelevantChanged" | "liveStatusChanged" | "loadComplete" | "loadStart" | "locationChanged" | "mediaStartedPlaying" | "mediaStoppedPlaying" | "menuEnd" | "menuItemSelected" | "menuListItemSelected" | "menuListValueChanged" | "menuPopupEnd" | "menuPopupStart" | "menuStart" | "mouseCanceled" | "mouseDragged" | "mouseMoved" | "mousePressed" | "mouseReleased" | "multilineStateChanged" | "multiselectableStateChanged" | "nameChanged" | "objectAttributeChanged" | "otherAttributeChanged" | "parentChanged" | "placeholderChanged" | "portalActivated" | "positionInSetChanged" | "rangeValueChanged" | "rangeValueMaxChanged" | "rangeValueMinChanged" | "rangeValueStepChanged" | "readonlyChanged" | "relatedNodeChanged" | "requiredStateChanged" | "roleChanged" | "rowCollapsed" | "rowCountChanged" | "rowExpanded" | "scrollHorizontalPositionChanged" | "scrollPositionChanged" | "scrollVerticalPositionChanged" | "scrolledToAnchor" | "selectedChanged" | "selectedChildrenChanged" | "selectedValueChanged" | "selection" | "selectionAdd" | "selectionInTextFieldChanged" | "selectionRemove" | "setSizeChanged" | "show" | "sortChanged" | "stateChanged" | "subtreeCreated" | "textAttributeChanged" | "textSelectionChanged" | "textChanged" | "tooltipClosed" | "tooltipOpened" | "treeChanged" | "valueInTextFieldChanged" | "valueChanged" | "windowActivated" | "windowDeactivated" | "windowVisibilityChanged";

    /**
     * Describes the purpose of an {@link automation.AutomationNode}.
     */
    export type RoleType = "abbr" | "alert" | "alertDialog" | "application" | "article" | "audio" | "banner" | "blockquote" | "button" | "canvas" | "caption" | "caret" | "cell" | "checkBox" | "client" | "code" | "colorWell" | "column" | "columnHeader" | "comboBoxGrouping" | "comboBoxMenuButton" | "comment" | "complementary" | "contentDeletion" | "contentInsertion" | "contentInfo" | "date" | "dateTime" | "definition" | "descriptionList" | "descriptionListDetail" | "descriptionListTerm" | "desktop" | "details" | "dialog" | "directory" | "disclosureTriangle" | "docAbstract" | "docAcknowledgments" | "docAfterword" | "docAppendix" | "docBackLink" | "docBiblioEntry" | "docBibliography" | "docBiblioRef" | "docChapter" | "docColophon" | "docConclusion" | "docCover" | "docCredit" | "docCredits" | "docDedication" | "docEndnote" | "docEndnotes" | "docEpigraph" | "docEpilogue" | "docErrata" | "docExample" | "docFootnote" | "docForeword" | "docGlossary" | "docGlossRef" | "docIndex" | "docIntroduction" | "docNoteRef" | "docNotice" | "docPageBreak" | "docPageFooter" | "docPageHeader" | "docPageList" | "docPart" | "docPreface" | "docPrologue" | "docPullquote" | "docQna" | "docSubtitle" | "docTip" | "docToc" | "document" | "embeddedObject" | "emphasis" | "feed" | "figcaption" | "figure" | "footer" | "footerAsNonLandmark" | "form" | "genericContainer" | "graphicsDocument" | "graphicsObject" | "graphicsSymbol" | "grid" | "group" | "header" | "headerAsNonLandmark" | "heading" | "iframe" | "iframePresentational" | "image" | "imeCandidate" | "inlineTextBox" | "inputTime" | "keyboard" | "labelText" | "layoutTable" | "layoutTableCell" | "layoutTableRow" | "legend" | "lineBreak" | "link" | "list" | "listBox" | "listBoxOption" | "listGrid" | "listItem" | "listMarker" | "log" | "main" | "mark" | "marquee" | "math" | "menu" | "menuBar" | "menuItem" | "menuItemCheckBox" | "menuItemRadio" | "menuListOption" | "menuListPopup" | "meter" | "navigation" | "note" | "pane" | "paragraph" | "pdfActionableHighlight" | "pdfRoot" | "pluginObject" | "popUpButton" | "portal" | "pre" | "progressIndicator" | "radioButton" | "radioGroup" | "region" | "rootWebArea" | "row" | "rowGroup" | "rowHeader" | "ruby" | "rubyAnnotation" | "scrollBar" | "scrollView" | "search" | "searchBox" | "section" | "slider" | "spinButton" | "splitter" | "staticText" | "status" | "strong" | "suggestion" | "svgRoot" | "switch" | "tab" | "tabList" | "tabPanel" | "table" | "tableHeaderContainer" | "term" | "textField" | "textFieldWithComboBox" | "time" | "timer" | "titleBar" | "toggleButton" | "toolbar" | "tooltip" | "tree" | "treeGrid" | "treeItem" | "unknown" | "video" | "webView" | "window";

    /**
     * Describes characteristics of an {@link automation.AutomationNode}.
     */
    export type StateType = "autofillAvailable" | "collapsed" | "default" | "editable" | "expanded" | "focusable" | "focused" | "horizontal" | "hovered" | "ignored" | "invisible" | "linked" | "multiline" | "multiselectable" | "offscreen" | "protected" | "required" | "richlyEditable" | "vertical" | "visited";

    /**
     * All possible actions that can be performed on automation nodes.
     */
    export type ActionType = "annotatePageImages" | "blur" | "clearAccessibilityFocus" | "collapse" | "customAction" | "decrement" | "doDefault" | "expand" | "focus" | "getImageData" | "getTextLocation" | "hideTooltip" | "hitTest" | "increment" | "internalInvalidateTree" | "loadInlineTextBoxes" | "replaceSelectedText" | "resumeMedia" | "scrollBackward" | "scrollDown" | "scrollForward" | "scrollLeft" | "scrollRight" | "scrollUp" | "scrollToMakeVisible" | "scrollToPoint" | "setAccessibilityFocus" | "setScrollOffset" | "setSelection" | "setSequentialFocusNavigationStartingPoint" | "setValue" | "showContextMenu" | "signalEndOfTest" | "showTooltip" | "startDuckingMedia" | "stopDuckingMedia" | "suspendMedia";

    /**
     * Possible changes to the automation tree. For any given atomic change to the tree, each node that's added, removed, or changed, will appear in exactly one TreeChange, with one of these types.
     *
     * nodeCreated means that this node was added to the tree and its parent is new as well, so it's just one node in a new subtree that was added.
     */
    export type TreeChangeType = "nodeCreated" | "subtreeCreated" | "nodeChanged" | "textChanged" | "nodeRemoved" | "subtreeUpdateEnd";

    /**
     * Where the node's name is from.
     */
    export type NameFromType = "uninitialized" | "attribute" | "attributeExplicitlyEmpty" | "caption" | "contents" | "placeholder" | "relatedElement" | "title" | "value";

    export type DescriptionFromType = "ariaDescription" | "buttonLabel" | "relatedElement" | "rubyAnnotation" | "summary" | "tableCaption" | "title";

    /**
     * The input restriction for a object -- even non-controls can be disabled.
     */
    export type Restriction = "disabled" | "readOnly";

    /**
     * Availability and types for an interactive popup element.
     */
    export type HasPopup = "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";

    /**
     * Indicates the ARIA-current state.
     */
    export type AriaCurrentState = "false" | "true" | "page" | "step" | "location" | "date" | "time";

    /**
     * Describes possible actions when performing a do default action.
     */
    export type DefaultActionVerb = "activate" | "check" | "click" | "clickAncestor" | "jump" | "open" | "press" | "select" | "uncheck";

    /**
     * Types of markers on text. See `AutomationNode.markerTypes`.
     */
    export type MarkerType = "spelling" | "grammar" | "textMatch" | "activeSuggestion" | "suggestion";

    /**
     * A command associated with an {@link automation.AutomationIntent}.
     */
    export type IntentCommandType = "clearSelection" | "delete" | "dictate" | "extendSelection" | "format" | "history" | "insert" | "marker" | "moveSelection" | "setSelection";

    /**
     * The type of an input event associated with an {@link automation.AutomationIntent}. It describes an edit command, e.g. IntentCommandType.insert, in more detail.
     */
    export type IntentInputEventType = "insertText" | "insertLineBreak" | "insertParagraph" | "insertOrderedList" | "insertUnorderedList" | "insertHorizontalRule" | "insertFromPaste" | "insertFromDrop" | "insertFromYank" | "insertTranspose" | "insertReplacementText" | "insertCompositionText" | "deleteWordBackward" | "deleteWordForward" | "deleteSoftLineBackward" | "deleteSoftLineForward" | "deleteHardLineBackward" | "deleteHardLineForward" | "deleteContentBackward" | "deleteContentForward" | "deleteByCut" | "deleteByDrag" | "historyUndo" | "historyRedo" | "formatBold" | "formatItalic" | "formatUnderline" | "formatStrikeThrough" | "formatSuperscript" | "formatSubscript" | "formatJustifyCenter" | "formatJustifyFull" | "formatJustifyRight" | "formatJustifyLeft" | "formatIndent" | "formatOutdent" | "formatRemove" | "formatSetBlockTextDirection";

    /**
     * A text boundary associated with an {@link automation.AutomationIntent}.
     */
    export type IntentTextBoundaryType = "character" | "format" | "lineEnd" | "lineStart" | "lineStartOrEnd" | "object" | "pageEnd" | "pageStart" | "pageStartOrEnd" | "paragraphEnd" | "paragraphStart" | "paragraphStartSkippingEmptyParagraphs" | "paragraphStartOrEnd" | "sentenceEnd" | "sentenceStart" | "sentenceStartOrEnd" | "webPage" | "wordEnd" | "wordStart" | "wordStartOrEnd";

    /**
     * A move direction associated with an {@link automation.AutomationIntent}.
     */
    export type IntentMoveDirectionType = "backward" | "forward";

    /**
     * A sort applied to a table row or column header.
     */
    export type SortDirectionType = "unsorted" | "ascending" | "descending" | "other";

    export interface Rect {

      left: number;

      top: number;

      width: number;

      height: number;
    }

    export interface FindParams {

      role?: RoleType;

      /**
       * A map of {@link automation.StateType} to boolean, indicating for each state whether it should be set or not. For example: `{ StateType.disabled: false }` would only match if `StateType.disabled` was _not_ present in the node's `state` object.
       */
      state?: {[name: string]: any};

      /**
       * A map of attribute name to expected value, for example `{ name: 'Root directory', checkbox_mixed: true }`. String attribute values may be specified as a regex, for example `{ name: /stralia$/` }. Unless specifying a regex, the expected value must be an exact match in type and value for the actual value. Thus, the type of expected value must be one of:
       *
       * *   string
       * *   integer
       * *   float
       * *   boolean
       */
      attributes?: {[name: string]: any};
    }

    export interface SetDocumentSelectionParams {

      /**
       * The node where the selection begins.
       */
      anchorObject: AutomationNode;

      /**
       * The offset in the anchor node where the selection begins.
       */
      anchorOffset: number;

      /**
       * The node where the selection ends.
       */
      focusObject: AutomationNode;

      /**
       * The offset within the focus node where the selection ends.
       */
      focusOffset: number;
    }

    export interface AutomationIntent {

      /**
       * A command associated with this AutomationIntent.
       */
      command: IntentCommandType;

      /**
       * A text boundary associated with this AutomationIntent.
       */
      textBoundary: IntentTextBoundaryType;

      /**
       * A move direction associated with this AutomationIntent.
       */
      moveDirection: IntentMoveDirectionType;
    }

    export interface AutomationEvent {

      /**
       * The {@link automation.AutomationNode} to which the event was targeted.
       */
      target: AutomationNode;

      /**
       * The type of the event.
       */
      type: EventType;

      /**
       * The source of this event.
       */
      eventFrom: string;

      /**
       * Any mouse coordinates associated with this event.
       */
      mouseX: number;

      mouseY: number;

      /**
       * A list of {@link automation.AutomationIntent}s associated with this event.
       */
      intents: AutomationIntent[];

      /**
       * Stops this event from further processing except for any remaining listeners on {@link automation.AutomationEvent.target}.
       */
      stopPropagation(): void;
    }

    export interface TreeChange {

      /**
       * The {@link automation.AutomationNode} that changed.
       */
      target: AutomationNode;

      /**
       * The type of change.
       */
      type: TreeChangeType;
    }

    /**
     * Possible tree changes to listen to using addTreeChangeObserver. Note that listening to all tree changes can be expensive.
     */
    export type TreeChangeObserverFilter = "noTreeChanges" | "liveRegionTreeChanges" | "textMarkerChanges" | "allTreeChanges";

    export interface CustomAction {

      id: number;

      description: string;
    }

    export interface LanguageSpan {

      /**
       * Inclusive start index of substring that contains language.
       */
      startIndex: number;

      /**
       * Exclusive end index of substring that contains language.
       */
      endIndex: number;

      /**
       * Detected language for substring.
       */
      language: string;

      /**
       * Probability that language is correct.
       */
      probability: number;
    }

    export interface Marker {

      /**
       * The start offset within the text of the associated node.
       */
      startOffset: number;

      /**
       * The end offset within the text of the associated node.
       */
      endOffset: number;

      /**
       * A mapping of MarkerType to true or undefined indicating the marker types for this marker.
       */
      flags: {[name: string]: any};
    }

    export interface AutomationPosition {

      node?: AutomationNode;

      childIndex: number;

      textOffset: number;

      affinity: string;

      isNullPosition(): boolean;

      isTreePosition(): boolean;

      isTextPosition(): boolean;

      isLeafTextPosition(): boolean;

      atStartOfAnchor(): boolean;

      atEndOfAnchor(): boolean;

      atStartOfWord(): boolean;

      atEndOfWord(): boolean;

      atStartOfLine(): boolean;

      atEndOfLine(): boolean;

      atStartOfParagraph(): boolean;

      atEndOfParagraph(): boolean;

      atStartOfPage(): boolean;

      atEndOfPage(): boolean;

      atStartOfFormat(): boolean;

      atEndOfFormat(): boolean;

      atStartOfDocument(): boolean;

      atEndOfDocument(): boolean;

      asTreePosition(): void;

      asTextPosition(): void;

      asLeafTextPosition(): void;

      moveToPositionAtStartOfAnchor(): void;

      moveToPositionAtEndOfAnchor(): void;

      moveToPositionAtStartOfDocument(): void;

      moveToPositionAtEndOfDocument(): void;

      moveToParentPosition(): void;

      moveToNextLeafTreePosition(): void;

      moveToPreviousLeafTreePosition(): void;

      moveToNextLeafTextPosition(): void;

      moveToPreviousLeafTextPosition(): void;

      moveToNextCharacterPosition(): void;

      moveToPreviousCharacterPosition(): void;

      moveToNextWordStartPosition(): void;

      moveToPreviousWordStartPosition(): void;

      moveToNextWordEndPosition(): void;

      moveToPreviousWordEndPosition(): void;

      moveToNextLineStartPosition(): void;

      moveToPreviousLineStartPosition(): void;

      moveToNextLineEndPosition(): void;

      moveToPreviousLineEndPosition(): void;

      moveToPreviousFormatStartPosition(): void;

      moveToNextFormatEndPosition(): void;

      moveToNextParagraphStartPosition(): void;

      moveToPreviousParagraphStartPosition(): void;

      moveToNextParagraphEndPosition(): void;

      moveToPreviousParagraphEndPosition(): void;

      moveToNextPageStartPosition(): void;

      moveToPreviousPageStartPosition(): void;

      moveToNextPageEndPosition(): void;

      moveToPreviousPageEndPosition(): void;

      moveToNextAnchorPosition(): void;

      moveToPreviousAnchorPosition(): void;

      maxTextOffset(): number;

      isInLineBreak(): boolean;

      isInTextObject(): boolean;

      isInWhiteSpace(): boolean;

      isValid(): boolean;

      getText(): string;
    }

    export interface AutomationNode {

      /**
       * The root node of the tree containing this AutomationNode.
       */
      root?: AutomationNode;

      /**
       * Whether this AutomationNode is a root node.
       */
      isRootNode: boolean;

      /**
       * The role of this node.
       */
      role?: RoleType;

      /**
       * The {@link automation.StateType}s describing this node.
       */
      state?: {[name: string]: any};

      /**
       * The rendered location (as a bounding box) of this node in global screen coordinates.
       */
      location?: Rect;

      /**
       * Determines the location of the text within the node specified by `startIndex` and `endIndex`, inclusively. Invokes `callback` with the bounding rectangle, in screen coordinates. `callback` can be invoked either synchronously or asynchronously. The bounds are clipped to ancestors.
       *
       * @param startIndex
       * @param endIndex
       * @param callback
       */
      boundsForRange(
        startIndex: number,
        endIndex: number,
        callback: (
          bounds: Rect,
        ) => void,
      ): void;

      /**
       * Determines the location of the text within the node specified by `startIndex` and `endIndex`, inclusively. Invokes `callback` with the bounding rectangle, in screen coordinates. `callback` can be invoked either synchronously or asynchronously. The bounds are not clipped to ancestors.
       *
       * @param startIndex
       * @param endIndex
       * @param callback
       */
      unclippedBoundsForRange(
        startIndex: number,
        endIndex: number,
        callback: (
          bounds: Rect,
        ) => void,
      ): void;

      /**
       * The location (as a bounding box) of this node in global screen coordinates without applying any clipping from ancestors.
       */
      unclippedLocation?: Rect;

      /**
       * The purpose of the node, other than the role, if any.
       */
      description?: string;

      /**
       * Description of the state of the checkbox. Used only when the node is checkable.
       */
      checkedStateDescription?: string;

      /**
       * The placeholder for this text field, if any.
       */
      placeholder?: string;

      /**
       * The role description for this node.
       */
      roleDescription?: string;

      /**
       * The accessible name for this node, via the [Accessible Name Calculation](https://www.w3.org/TR/wai-aria/#namecalculation) process.
       */
      name?: string;

      /**
       * The tooltip of the node, if any.
       */
      tooltip?: string;

      /**
       * The source of the name.
       */
      nameFrom?: NameFromType;

      /**
       * The image annotation for image nodes, which may be a human-readable string that is the contextualized annotation or a status string related to annotations.
       */
      imageAnnotation?: string;

      /**
       * The value for this node: for example the `value` attribute of an `<input> element.`
       */
      value?: string;

      /**
       * The HTML tag for this element, if this node is an HTML element.
       */
      htmlTag?: string;

      /**
       * The level of a heading or tree item.
       */
      hierarchicalLevel?: number;

      /**
       * The current caret bounds in screen coordinates.
       *
       * @chrome-unknown-version
       */
      caretBounds?: Rect;

      /**
       * The start and end index of each word in an inline text box.
       */
      wordStarts?: number[];

      wordEnds?: number[];

      /**
       * The start indexes of each sentence within the node's name.
       */
      sentenceStarts?: number[];

      /**
       * The end indexes of each sentence within the node's name. For most nodes, the size of sentenceStarts array should be equal to the size of sentenceEnds array. Two exceptions are (1) node at the begining of a paragraph but the end of the node's sentences is in its following node. Such a node has one more start index. (2) Node at the end of a paragraph but the start of the node's sentences is in its previous node. Such a node has one more end index. For example,
       *
       * **Hello** world.
       *
       * has two nodes. The first one has one start index (i.e., 0) but no end index. The second node has one end index (i.e., 7) but no start index.
       */
      sentenceEnds?: number[];

      /**
       * The start index of each word within the node's name. This is different from wordStarts because it is not restricted to inline text boxes and can be used for any type of element.
       */
      nonInlineTextWordStarts?: number[];

      /**
       * The end index of each word within the node's name. This is different from wordEnds because it is not restricted to inline text boxes and can be used for any type of element.
       */
      nonInlineTextWordEnds?: number[];

      /**
       * The nodes, if any, which this node is specified to control via [`aria-controls`](https://www.w3.org/TR/wai-aria/#aria-controls).
       */
      controls?: AutomationNode[];

      /**
       * The nodes, if any, which form a description for this node.
       */
      describedBy?: AutomationNode[];

      /**
       * The nodes, if any, which may optionally be navigated to after this one. See [`aria-flowto`](https://www.w3.org/TR/wai-aria/#aria-flowto).
       */
      flowTo?: AutomationNode[];

      /**
       * The nodes, if any, which form a label for this element. Generally, the text from these elements will also be exposed as the element's accessible name, via the {@link automation.AutomationNode.name} attribute.
       */
      labelledBy?: AutomationNode[];

      /**
       * The node referred to by `aria-activedescendant`, where applicable
       */
      activeDescendant?: AutomationNode;

      /**
       * Reverse relationship for active descendant.
       */
      activeDescendantFor?: AutomationNode[];

      /**
       * The target of an in-page link.
       */
      inPageLinkTarget?: AutomationNode;

      /**
       * A node that provides more details about the current node.
       */
      details?: AutomationNode[];

      /**
       * A node that provides an error message for a current node.
       */
      errorMessage?: AutomationNode;

      /**
       * Reverse relationship for details.
       */
      detailsFor?: AutomationNode[];

      /**
       * Reverse relationship for errorMessage.
       */
      errorMessageFor?: AutomationNode[];

      /**
       * Reverse relationship for controls.
       */
      controlledBy?: AutomationNode[];

      /**
       * Reverse relationship for describedBy.
       */
      descriptionFor?: AutomationNode[];

      /**
       * Reverse relationship for flowTo.
       */
      flowFrom?: AutomationNode[];

      /**
       * Reverse relationship for labelledBy.
       */
      labelFor?: AutomationNode[];

      /**
       * The column header nodes for a table cell.
       */
      tableCellColumnHeaders?: AutomationNode[];

      /**
       * The row header nodes for a table cell.
       */
      tableCellRowHeaders?: AutomationNode[];

      /**
       * An array of standard actions available on this node.
       */
      standardActions?: ActionType[];

      /**
       * An array of custom actions.
       */
      customActions?: CustomAction[];

      /**
       * The action taken by calling `doDefault`.
       */
      defaultActionVerb?: DefaultActionVerb;

      /**
       * The URL that this link will navigate to.
       */
      url?: string;

      /**
       * The URL of this document.
       */
      docUrl?: string;

      /**
       * The title of this document.
       */
      docTitle?: string;

      /**
       * Whether this document has finished loading.
       */
      docLoaded?: boolean;

      /**
       * The proportion (out of 1.0) that this doc has completed loading.
       */
      docLoadingProgress?: number;

      /**
       * Scrollable container attributes.
       */
      scrollX?: number;

      scrollXMin?: number;

      scrollXMax?: number;

      scrollY?: number;

      scrollYMin?: number;

      scrollYMax?: number;

      /**
       * Indicates whether this node is scrollable.
       */
      scrollable?: boolean;

      /**
       * The character index of the start of the selection within this editable text element; -1 if no selection.
       */
      textSelStart?: number;

      /**
       * The character index of the end of the selection within this editable text element; -1 if no selection.
       */
      textSelEnd?: number;

      /**
       * An array of Marker objects for this node.
       */
      markers?: Marker[];

      /**
       * If a selection is present, whether the anchor of the selection comes after its focus in the accessibility tree.
       */
      isSelectionBackward?: boolean;

      /**
       * The anchor node of the tree selection, if any.
       */
      anchorObject?: AutomationNode;

      /**
       * The anchor offset of the tree selection, if any.
       */
      anchorOffset?: number;

      /**
       * The affinity of the tree selection anchor, if any.
       */
      anchorAffinity?: string;

      /**
       * The focus node of the tree selection, if any.
       */
      focusObject?: AutomationNode;

      /**
       * The focus offset of the tree selection, if any.
       */
      focusOffset?: number;

      /**
       * The affinity of the tree selection focus, if any.
       */
      focusAffinity?: string;

      /**
       * The selection start node of the tree selection, if any.
       */
      selectionStartObject?: AutomationNode;

      /**
       * The selection start offset of the tree selection, if any.
       */
      selectionStartOffset?: number;

      /**
       * The affinity of the tree selection start, if any.
       */
      selectionStartAffinity?: string;

      /**
       * The selection end node of the tree selection, if any.
       */
      selectionEndObject?: AutomationNode;

      /**
       * The selection end offset of the tree selection, if any.
       */
      selectionEndOffset?: number;

      /**
       * The affinity of the tree selection end, if any.
       */
      selectionEndAffinity?: string;

      /**
       * Indicates that the node is marked user-select:none
       */
      notUserSelectableStyle?: boolean;

      /**
       * The current value for this range.
       */
      valueForRange?: number;

      /**
       * The minimum possible value for this range.
       */
      minValueForRange?: number;

      /**
       * The maximum possible value for this range.
       */
      maxValueForRange?: number;

      /**
       * The 1-based index of an item in a set.
       */
      posInSet?: number;

      /**
       * The number of items in a set;
       */
      setSize?: number;

      /**
       * The number of rows in this table as specified in the DOM.
       */
      tableRowCount?: number;

      /**
       * The number of rows in this table as specified by the page author.
       */
      ariaRowCount?: number;

      /**
       * The number of columns in this table as specified in the DOM.
       */
      tableColumnCount?: number;

      /**
       * The number of columns in this table as specified by the page author.
       */
      ariaColumnCount?: number;

      /**
       * The zero-based index of the column that this cell is in as specified in the DOM.
       */
      tableCellColumnIndex?: number;

      /**
       * The ARIA column index as specified by the page author.
       */
      tableCellAriaColumnIndex?: number;

      /**
       * The number of columns that this cell spans (default is 1).
       */
      tableCellColumnSpan?: number;

      /**
       * The zero-based index of the row that this cell is in as specified in the DOM.
       */
      tableCellRowIndex?: number;

      /**
       * The ARIA row index as specified by the page author.
       */
      tableCellAriaRowIndex?: number;

      /**
       * The number of rows that this cell spans (default is 1).
       */
      tableCellRowSpan?: number;

      /**
       * The corresponding column header for this cell.
       */
      tableColumnHeader?: AutomationNode;

      /**
       * The corresponding row header for this cell.
       */
      tableRowHeader?: AutomationNode;

      /**
       * The column index of this column node.
       */
      tableColumnIndex?: number;

      /**
       * The row index of this row node.
       */
      tableRowIndex?: number;

      /**
       * The type of region if this is the root of a live region. Possible values are 'polite' and 'assertive'.
       */
      liveStatus?: string;

      /**
       * The value of aria-relevant for a live region.
       */
      liveRelevant?: string;

      /**
       * The value of aria-atomic for a live region.
       */
      liveAtomic?: boolean;

      /**
       * The value of aria-busy for a live region or any other element.
       */
      busy?: boolean;

      /**
       * The type of live region if this node is inside a live region.
       */
      containerLiveStatus?: string;

      /**
       * The value of aria-relevant if this node is inside a live region.
       */
      containerLiveRelevant?: string;

      /**
       * The value of aria-atomic if this node is inside a live region.
       */
      containerLiveAtomic?: boolean;

      /**
       * The value of aria-busy if this node is inside a live region.
       */
      containerLiveBusy?: boolean;

      /**
       * Aria auto complete.
       */
      autoComplete?: string;

      /**
       * The name of the programmatic backing object.
       */
      className?: string;

      /**
       * Marks this subtree as modal.
       */
      modal?: boolean;

      /**
       * A map containing all HTML attributes and their values
       */
      htmlAttributes?: {[name: string]: any};

      /**
       * The input type of a text field, such as "text" or "email".
       */
      inputType?: string;

      /**
       * The key that activates this widget.
       */
      accessKey?: string;

      /**
       * The value of the aria-invalid attribute, indicating the error type.
       */
      ariaInvalidValue?: string;

      /**
       * The CSS display attribute for this node, if applicable.
       */
      display?: string;

      /**
       * A data url with the contents of this object's image or thumbnail.
       */
      imageDataUrl?: string;

      /**
       * The author-provided language code for this subtree.
       */
      language?: string;

      /**
       * The detected language code for this subtree.
       */
      detectedLanguage?: string;

      /**
       * Indicates the availability and type of an interactive popup element.
       */
      hasPopup?: HasPopup;

      /**
       * Input restriction, if any, such as readonly or disabled: undefined - enabled control or other object that is not disabled Restriction.DISABLED - disallows input in itself + any descendants Restriction.READONLY - allow focus/selection but not input
       */
      restriction?: string;

      /**
       * Tri-state describing checkbox or radio button: 'false' | 'true' | 'mixed'
       */
      checked?: string;

      /**
       * The inner html of this element. Only populated for math content.
       */
      innerHtml?: string;

      /**
       * The RGBA foreground color of this subtree, as an integer.
       */
      color?: number;

      /**
       * The RGBA background color of this subtree, as an integer.
       */
      backgroundColor?: number;

      /**
       * The RGBA color of an input element whose value is a color.
       */
      colorValue?: number;

      /**
       * Indicates node text is subscript.
       */
      subscript: boolean;

      /**
       * Indicates node text is superscript.
       */
      superscript: boolean;

      /**
       * Indicates node text is bold.
       */
      bold: boolean;

      /**
       * Indicates node text is italic.
       */
      italic: boolean;

      /**
       * Indicates node text is underline.
       */
      underline: boolean;

      /**
       * Indicates node text is line through.
       */
      lineThrough: boolean;

      /**
       * Indicates whether this node is selected, unselected, or neither.
       */
      selected?: boolean;

      /**
       * Indicates the font size of this node.
       */
      fontSize?: number;

      /**
       * Indicates the font family.
       */
      fontFamily: string;

      /**
       * Indicates whether the object functions as a text field which exposes its descendants. Use cases include the root of a content-editable region, an ARIA textbox which isn't currently editable and which has interactive descendants, and a element that has "design-mode" set to "on".
       *
       * @chrome-unknown-version
       */
      nonAtomicTextFieldRoot: boolean;

      /**
       * Indicates aria-current state.
       */
      ariaCurrentState?: AriaCurrentState;

      /**
       * The application id for a tree rooted at this node.
       */
      appId?: string;

      /**
       * Walking the tree.
       */
      children: AutomationNode[];

      parent?: AutomationNode;

      firstChild?: AutomationNode;

      lastChild?: AutomationNode;

      previousSibling?: AutomationNode;

      nextSibling?: AutomationNode;

      previousOnLine?: AutomationNode;

      nextOnLine?: AutomationNode;

      previousFocus?: AutomationNode;

      nextFocus?: AutomationNode;

      /**
       * The index of this node in its parent node's list of children. If this is the root node, this will be undefined.
       */
      indexInParent?: number;

      /**
       * The sort direction of this node.
       */
      sortDirection: SortDirectionType;

      /**
       * Does the default action based on this node's role. This is generally the same action that would result from clicking the node such as expanding a treeitem, toggling a checkbox, selecting a radiobutton, or activating a button.
       */
      doDefault(): void;

      /**
       * Places focus on this node.
       */
      focus(): void;

      /**
       * Request a data url for the contents of an image, optionally resized. Pass zero for maxWidth and/or maxHeight for the original size.
       *
       * @param maxWidth
       * @param maxHeight
       */
      getImageData(
        maxWidth: number,
        maxHeight: number,
      ): void;

      /**
       * Does a hit test of the given global screen coordinates, and fires eventToFire on the resulting object.
       *
       * @param x
       * @param y
       * @param eventToFire
       */
      hitTest(
        x: number,
        y: number,
        eventToFire: EventType,
      ): void;

      /**
       * Does a {@link automation.AutomationNode.hitTest}, and receives a callback with the resulting hit node.
       *
       * @param x
       * @param y
       * @param callback
       */
      hitTestWithReply(
        x: number,
        y: number,
        callback: (
          node: AutomationNode,
        ) => void,
      ): void;

      /**
       * Scrolls this node to make it visible.
       */
      makeVisible(): void;

      /**
       * Performs custom action.
       *
       * @param customActionId
       */
      performCustomAction(
        customActionId: number,
      ): void;

      /**
       * Convenience method to perform a standard action supported by this node. For actions requiring additional arguments, call the specific binding e.g. `setSelection`.
       *
       * @param actionType
       */
      performStandardAction(
        actionType: ActionType,
      ): void;

      /**
       * Replaces the selected text within a text field.
       *
       * @param value
       */
      replaceSelectedText(
        value: string,
      ): void;

      /**
       * Sets accessibility focus. Accessibility focus is the node on which an extension tracks a user's focus. This may be conveyed through a focus ring or or speech output by the extension. Automation will dispatch more events to the accessibility focus such as location changes.
       */
      setAccessibilityFocus(): void;

      /**
       * Sets selection within a text field.
       *
       * @param startIndex
       * @param endIndex
       */
      setSelection(
        startIndex: number,
        endIndex: number,
      ): void;

      /**
       * Clears focus and sets this node as the starting point for the next time the user presses Tab or Shift+Tab.
       */
      setSequentialFocusNavigationStartingPoint(): void;

      /**
       * Sets the value of a text field.
       *
       * @param value
       */
      setValue(
        value: string,
      ): void;

      /**
       * Show the context menu for this element, as if the user right-clicked.
       */
      showContextMenu(): void;

      /**
       * Resume playing any media within this tree.
       */
      resumeMedia(): void;

      /**
       * Start ducking any media within this tree.
       */
      startDuckingMedia(): void;

      /**
       * Stop ducking any media within this tree.
       */
      stopDuckingMedia(): void;

      /**
       * Suspend any media playing within this tree.
       */
      suspendMedia(): void;

      /**
       * Scrolls this scrollable container backward.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollBackward(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container forward.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollForward(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container up.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollUp(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container down.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollDown(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container left.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollLeft(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container right.
       *
       * @param callback Callback called for actions with a response.
       */
      scrollRight(
        callback?: (
          result: boolean,
        ) => void,
      ): void;

      /**
       * Scrolls this scrollable container to the given point.
       *
       * @param x
       * @param y
       */
      scrollToPoint(
        x: number,
        y: number,
      ): void;

      /**
       * Sets this scrollable container's scroll offset.
       *
       * @param x
       * @param y
       */
      setScrollOffset(
        x: number,
        y: number,
      ): void;

      /**
       * Adds a listener for the given event type and event phase.
       *
       * @param eventType
       * @param listener A listener for events on an `AutomationNode`.
       * @param capture
       */
      addEventListener(
        eventType: EventType,
        listener: (
          event: AutomationEvent,
        ) => void,
        capture: boolean,
      ): void;

      /**
       * Removes a listener for the given event type and event phase.
       *
       * @param eventType
       * @param listener A listener for events on an `AutomationNode`.
       * @param capture
       */
      removeEventListener(
        eventType: EventType,
        listener: (
          event: AutomationEvent,
        ) => void,
        capture: boolean,
      ): void;

      /**
       * Gets the first node in this node's subtree which matches the given CSS selector and is within the same DOM context.
       *
       * If this node doesn't correspond directly with an HTML node in the DOM, querySelector will be run on this node's nearest HTML node ancestor. Note that this may result in the query returning a node which is not a descendant of this node.
       *
       * If the selector matches a node which doesn't directly correspond to an automation node (for example an element within an ARIA widget, where the ARIA widget forms one node of the automation tree, or an element which is hidden from accessibility via hiding it using CSS or using aria-hidden), this will return the nearest ancestor which does correspond to an automation node.
       *
       * @param selector
       * @param callback Called when the result for a `query` is available.
       */
      domQuerySelector(
        selector: string,
        callback: (
          node: AutomationNode,
        ) => void,
      ): void;

      /**
       * Finds the first AutomationNode in this node's subtree which matches the given search parameters.
       *
       * @param params
       */
      find(
        params: FindParams,
      ): AutomationNode;

      /**
       * Finds all the AutomationNodes in this node's subtree which matches the given search parameters.
       *
       * @param params
       */
      findAll(
        params: FindParams,
      ): AutomationNode[];

      /**
       * Returns whether this node matches the given {@link automation.FindParams}.
       *
       * @param params
       */
      matches(
        params: FindParams,
      ): boolean;

      /**
       * @param searchStr
       * @param backward
       */
      getNextTextMatch(
        searchStr: string,
        backward: boolean,
      ): AutomationNode;

      /**
       * Returns the detected languages for the provided string attribute as an array of LanguageSpan objects. There are several guarantees about the format of the LanguageSpan array: 1. Is either empty or contains LanguageSpans that cover all indices in the associated string attribute value. 2. Is sorted by increasing startIndex (those with smaller startIndex appear first). 3. LanguageSpans are non-overlapping and contain exactly one language.
       *
       * @param attribute
       */
      languageAnnotationForStringAttribute(
        attribute: string,
      ): LanguageSpan[];

      /**
       * Creates a position object backed by Chrome's accessibility position support.
       *
       * @param offset
       * @param isUpstream
       */
      createPosition(
        offset: number,
        isUpstream?: boolean,
      ): AutomationPosition;
    }
  }

  /**
   * Use the `chrome.bookmarks` API to create, organize, and otherwise manipulate bookmarks. Also see [Override Pages](https://developer.chrome.com/docs/extensions/override), which you can use to create a custom Bookmark Manager page.
   *
   * @chrome-permission bookmarks
   */
  export namespace bookmarks {

    /**
     * @deprecated Bookmark write operations are no longer limited by Chrome.
     */
    export const MAX_WRITE_OPERATIONS_PER_HOUR: 1000000;

    /**
     * @deprecated Bookmark write operations are no longer limited by Chrome.
     */
    export const MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE: 1000000;

    /**
     * Retrieves the specified BookmarkTreeNode(s).
     *
     * @param idOrIdList A single string-valued id, or an array of string-valued ids
     */
    export function get(
      idOrIdList: string | ([string, ...string[]]),
    ): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Retrieves the specified BookmarkTreeNode(s).
     *
     * @param idOrIdList A single string-valued id, or an array of string-valued ids
     * @param callback
     */
    export function get(
      idOrIdList: string | ([string, ...string[]]),
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Retrieves the children of the specified BookmarkTreeNode id.
     *
     * @param id
     */
    export function getChildren(
      id: string,
    ): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Retrieves the children of the specified BookmarkTreeNode id.
     *
     * @param id
     * @param callback
     */
    export function getChildren(
      id: string,
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Retrieves the recently added bookmarks.
     *
     * @param numberOfItems The maximum number of items to return.
     */
    export function getRecent(
      numberOfItems: number,
    ): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Retrieves the recently added bookmarks.
     *
     * @param numberOfItems The maximum number of items to return.
     * @param callback
     */
    export function getRecent(
      numberOfItems: number,
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Retrieves the entire Bookmarks hierarchy.
     */
    export function getTree(): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Retrieves the entire Bookmarks hierarchy.
     *
     * @param callback
     */
    export function getTree(
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Retrieves part of the Bookmarks hierarchy, starting at the specified node.
     *
     * @param id The ID of the root of the subtree to retrieve.
     */
    export function getSubTree(
      id: string,
    ): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Retrieves part of the Bookmarks hierarchy, starting at the specified node.
     *
     * @param id The ID of the root of the subtree to retrieve.
     * @param callback
     */
    export function getSubTree(
      id: string,
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties.
     *
     * @param query Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties `query`, `url`, and `title` may be specified and bookmarks matching all specified properties will be produced.
     */
    export function search(
      query: string | {
        /**
         * A string of words and quoted phrases that are matched against bookmark URLs and titles.
         */
        query?: string,

        /**
         * The URL of the bookmark; matches verbatim. Note that folders have no URL.
         */
        url?: string,

        /**
         * The title of the bookmark; matches verbatim.
         */
        title?: string,
      },
    ): Promise<{
      results: BookmarkTreeNode[],
    }>;

    /**
     * Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties.
     *
     * @param query Either a string of words and quoted phrases that are matched against bookmark URLs and titles, or an object. If an object, the properties `query`, `url`, and `title` may be specified and bookmarks matching all specified properties will be produced.
     * @param callback
     */
    export function search(
      query: string | {
        /**
         * A string of words and quoted phrases that are matched against bookmark URLs and titles.
         */
        query?: string,

        /**
         * The URL of the bookmark; matches verbatim. Note that folders have no URL.
         */
        url?: string,

        /**
         * The title of the bookmark; matches verbatim.
         */
        title?: string,
      },
      callback: (
        results: BookmarkTreeNode[],
      ) => void,
    ): void;

    /**
     * Creates a bookmark or folder under the specified parentId. If url is NULL or missing, it will be a folder.
     *
     * @param bookmark
     */
    export function create(
      bookmark: CreateDetails,
    ): Promise<{
      result: BookmarkTreeNode,
    }>;

    /**
     * Creates a bookmark or folder under the specified parentId. If url is NULL or missing, it will be a folder.
     *
     * @param bookmark
     * @param callback
     */
    export function create(
      bookmark: CreateDetails,
      callback?: (
        result: BookmarkTreeNode,
      ) => void,
    ): void;

    /**
     * Moves the specified BookmarkTreeNode to the provided location.
     *
     * @param id
     * @param destination
     */
    export function move(
      id: string,
      destination: {
        parentId?: string,

        index?: number,
      },
    ): Promise<{
      result: BookmarkTreeNode,
    }>;

    /**
     * Moves the specified BookmarkTreeNode to the provided location.
     *
     * @param id
     * @param destination
     * @param callback
     */
    export function move(
      id: string,
      destination: {
        parentId?: string,

        index?: number,
      },
      callback?: (
        result: BookmarkTreeNode,
      ) => void,
    ): void;

    /**
     * Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. **Note:** Currently, only 'title' and 'url' are supported.
     *
     * @param id
     * @param changes
     */
    export function update(
      id: string,
      changes: {
        title?: string,

        url?: string,
      },
    ): Promise<{
      result: BookmarkTreeNode,
    }>;

    /**
     * Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged. **Note:** Currently, only 'title' and 'url' are supported.
     *
     * @param id
     * @param changes
     * @param callback
     */
    export function update(
      id: string,
      changes: {
        title?: string,

        url?: string,
      },
      callback?: (
        result: BookmarkTreeNode,
      ) => void,
    ): void;

    /**
     * Removes a bookmark or an empty bookmark folder.
     *
     * @param id
     */
    export function remove(
      id: string,
    ): Promise<{}>;

    /**
     * Removes a bookmark or an empty bookmark folder.
     *
     * @param id
     * @param callback
     */
    export function remove(
      id: string,
      callback?: () => void,
    ): void;

    /**
     * Recursively removes a bookmark folder.
     *
     * @param id
     */
    export function removeTree(
      id: string,
    ): Promise<{}>;

    /**
     * Recursively removes a bookmark folder.
     *
     * @param id
     * @param callback
     */
    export function removeTree(
      id: string,
      callback?: () => void,
    ): void;

    /**
     * Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator. Omitted if the node can be modified by the user and the extension (default).
     */
    export type BookmarkTreeNodeUnmodifiable = "managed";

    /**
     * A node (either a bookmark or a folder) in the bookmark tree. Child nodes are ordered within their parent folder.
     */
    export interface BookmarkTreeNode {

      /**
       * The unique identifier for the node. IDs are unique within the current profile, and they remain valid even after the browser is restarted.
       */
      id: string;

      /**
       * The `id` of the parent folder. Omitted for the root node.
       */
      parentId?: string;

      /**
       * The 0-based position of this node within its parent folder.
       */
      index?: number;

      /**
       * The URL navigated to when a user clicks the bookmark. Omitted for folders.
       */
      url?: string;

      /**
       * The text displayed for the node.
       */
      title: string;

      /**
       * When this node was created, in milliseconds since the epoch (`new Date(dateAdded)`).
       */
      dateAdded?: number;

      /**
       * When the contents of this folder last changed, in milliseconds since the epoch.
       */
      dateGroupModified?: number;

      /**
       * Indicates the reason why this node is unmodifiable. The managed value indicates that this node was configured by the system administrator or by the custodian of a supervised user. Omitted if the node can be modified by the user and the extension (default).
       */
      unmodifiable?: BookmarkTreeNodeUnmodifiable;

      /**
       * An ordered list of children of this node.
       */
      children?: BookmarkTreeNode[];
    }

    /**
     * Object passed to the create() function.
     */
    export interface CreateDetails {

      /**
       * Defaults to the Other Bookmarks folder.
       */
      parentId?: string;

      index?: number;

      title?: string;

      url?: string;
    }

    /**
     * Fired when a bookmark or folder is created.
     */
    export const onCreated: events.Event<(
      id: string,
      bookmark: BookmarkTreeNode,
    ) => void>;

    /**
     * Fired when a bookmark or folder is removed. When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.
     */
    export const onRemoved: events.Event<(
      id: string,
      removeInfo: {
        parentId: string,

        index: number,

        node: BookmarkTreeNode,
      },
    ) => void>;

    /**
     * Fired when a bookmark or folder changes. **Note:** Currently, only title and url changes trigger this.
     */
    export const onChanged: events.Event<(
      id: string,
      changeInfo: {
        title: string,

        url?: string,
      },
    ) => void>;

    /**
     * Fired when a bookmark or folder is moved to a different parent folder.
     */
    export const onMoved: events.Event<(
      id: string,
      moveInfo: {
        parentId: string,

        index: number,

        oldParentId: string,

        oldIndex: number,
      },
    ) => void>;

    /**
     * Fired when the children of a folder have changed their order due to the order being sorted in the UI. This is not called as a result of a move().
     */
    export const onChildrenReordered: events.Event<(
      id: string,
      reorderInfo: {
        childIds: string[],
      },
    ) => void>;

    /**
     * Fired when a bookmark import session is begun. Expensive observers should ignore onCreated updates until onImportEnded is fired. Observers should still handle other notifications immediately.
     */
    export const onImportBegan: events.Event<() => void>;

    /**
     * Fired when a bookmark import session is ended.
     */
    export const onImportEnded: events.Event<() => void>;
  }

  /**
   * Use the `chrome.browsingData` API to remove browsing data from a user's local profile.
   *
   * @chrome-permission browsingData
   */
  export namespace browsingData {

    /**
     * Reports which types of data are currently selected in the 'Clear browsing data' settings UI. Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here.
     *
     * @param callback
     */
    export function settings(
      callback: (
        result: {
          options: RemovalOptions,

          /**
           * All of the types will be present in the result, with values of `true` if they are both selected to be removed and permitted to be removed, otherwise `false`.
           */
          dataToRemove: DataTypeSet,

          /**
           * All of the types will be present in the result, with values of `true` if they are permitted to be removed (e.g., by enterprise policy) and `false` if not.
           */
          dataRemovalPermitted: DataTypeSet,
        },
      ) => void,
    ): void;

    /**
     * Clears various types of browsing data stored in a user's profile.
     *
     * @param options
     * @param dataToRemove The set of data types to remove.
     * @param callback Called when deletion has completed.
     */
    export function remove(
      options: RemovalOptions,
      dataToRemove: DataTypeSet,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' appcache data.
     *
     * @param options
     * @param callback Called when websites' appcache data has been cleared.
     */
    export function removeAppcache(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's cache.
     *
     * @param options
     * @param callback Called when the browser's cache has been cleared.
     */
    export function removeCache(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' cache storage data.
     *
     * @since Chrome 72
     * @param options
     * @param callback Called when websites' cache storage has been cleared.
     */
    export function removeCacheStorage(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's cookies and server-bound certificates modified within a particular timeframe.
     *
     * @param options
     * @param callback Called when the browser's cookies and server-bound certificates have been cleared.
     */
    export function removeCookies(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's list of downloaded files (_not_ the downloaded files themselves).
     *
     * @param options
     * @param callback Called when the browser's list of downloaded files has been cleared.
     */
    export function removeDownloads(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' file system data.
     *
     * @param options
     * @param callback Called when websites' file systems have been cleared.
     */
    export function removeFileSystems(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's stored form data (autofill).
     *
     * @param options
     * @param callback Called when the browser's form data has been cleared.
     */
    export function removeFormData(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's history.
     *
     * @param options
     * @param callback Called when the browser's history has cleared.
     */
    export function removeHistory(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' IndexedDB data.
     *
     * @param options
     * @param callback Called when websites' IndexedDB data has been cleared.
     */
    export function removeIndexedDB(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' local storage data.
     *
     * @param options
     * @param callback Called when websites' local storage has been cleared.
     */
    export function removeLocalStorage(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears plugins' data.
     *
     * @deprecated Support for Flash has been removed. This function has no effect.
     * @deprecated-since Chrome 88
     * @param options
     * @param callback Called when plugins' data has been cleared.
     */
    export function removePluginData(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears the browser's stored passwords.
     *
     * @param options
     * @param callback Called when the browser's passwords have been cleared.
     */
    export function removePasswords(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' service workers.
     *
     * @since Chrome 72
     * @param options
     * @param callback Called when websites' service workers have been cleared.
     */
    export function removeServiceWorkers(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Clears websites' WebSQL data.
     *
     * @param options
     * @param callback Called when websites' WebSQL databases have been cleared.
     */
    export function removeWebSQL(
      options: RemovalOptions,
      callback?: () => void,
    ): void;

    /**
     * Options that determine exactly what data will be removed.
     */
    export interface RemovalOptions {

      /**
       * Remove data accumulated on or after this date, represented in milliseconds since the epoch (accessible via the `getTime` method of the JavaScript `Date` object). If absent, defaults to 0 (which would remove all browsing data).
       */
      since?: number;

      /**
       * An object whose properties specify which origin types ought to be cleared. If this object isn't specified, it defaults to clearing only "unprotected" origins. Please ensure that you _really_ want to remove application data before adding 'protectedWeb' or 'extensions'.
       */
      originTypes?: {
        /**
         * Normal websites.
         */
        unprotectedWeb?: boolean,

        /**
         * Websites that have been installed as hosted applications (be careful!).
         */
        protectedWeb?: boolean,

        /**
         * Extensions and packaged applications a user has installed (be \_really\_ careful!).
         */
        extension?: boolean,
      };

      /**
       * When present, only data for origins in this list is deleted. Only supported for cookies, storage and cache. Cookies are cleared for the whole registrable domain.
       *
       * @since Chrome 74
       */
      origins?: string[];

      /**
       * When present, data for origins in this list is excluded from deletion. Can't be used together with `origins`. Only supported for cookies, storage and cache. Cookies are excluded for the whole registrable domain.
       *
       * @since Chrome 74
       */
      excludeOrigins?: string[];
    }

    /**
     * A set of data types. Missing data types are interpreted as `false`.
     */
    export interface DataTypeSet {

      /**
       * Websites' appcaches.
       */
      appcache?: boolean;

      /**
       * The browser's cache.
       */
      cache?: boolean;

      /**
       * Cache storage
       *
       * @since Chrome 72
       */
      cacheStorage?: boolean;

      /**
       * The browser's cookies.
       */
      cookies?: boolean;

      /**
       * The browser's download list.
       */
      downloads?: boolean;

      /**
       * Websites' file systems.
       */
      fileSystems?: boolean;

      /**
       * The browser's stored form data.
       */
      formData?: boolean;

      /**
       * The browser's history.
       */
      history?: boolean;

      /**
       * Websites' IndexedDB data.
       */
      indexedDB?: boolean;

      /**
       * Websites' local storage data.
       */
      localStorage?: boolean;

      /**
       * Server-bound certificates.
       *
       * @deprecated Support for server-bound certificates has been removed. This data type will be ignored.
       * @deprecated-since Chrome 76
       */
      serverBoundCertificates?: boolean;

      /**
       * Stored passwords.
       */
      passwords?: boolean;

      /**
       * Plugins' data.
       *
       * @deprecated Support for Flash has been removed. This data type will be ignored.
       * @deprecated-since Chrome 88
       */
      pluginData?: boolean;

      /**
       * Service Workers.
       */
      serviceWorkers?: boolean;

      /**
       * Websites' WebSQL data.
       */
      webSQL?: boolean;
    }
  }

  /**
   * Use this API to expose certificates to the platform which can use these certificates for TLS authentications.
   *
   * @chrome-platform chromeos
   * @chrome-permission certificateProvider
   */
  export namespace certificateProvider {

    /**
     * Requests the PIN from the user. Only one ongoing request at a time is allowed. The requests issued while another flow is ongoing are rejected. It's the extension's responsibility to try again later if another flow is in progress.
     *
     * @since Chrome 57
     * @param details Contains the details about the requested dialog.
     * @param callback Is called when the dialog is resolved with the user input, or when the dialog request finishes unsuccessfully (e.g. the dialog was canceled by the user or was not allowed to be shown).
     */
    export function requestPin(
      details: RequestPinDetails,
      callback: (
        details?: PinResponseDetails,
      ) => void,
    ): void;

    /**
     * Stops the pin request started by the {@link requestPin} function.
     *
     * @since Chrome 57
     * @param details Contains the details about the reason for stopping the request flow.
     * @param callback To be used by Chrome to send to the extension the status from their request to close PIN dialog for user.
     */
    export function stopPinRequest(
      details: StopPinRequestDetails,
      callback: () => void,
    ): void;

    /**
     * Sets a list of certificates to use in the browser.
     *
     * The extension should call this function after initialization and on every change in the set of currently available certificates. The extension should also call this function in response to {@link onCertificatesUpdateRequested} every time this event is received.
     *
     * @since Chrome 86
     * @param details The certificates to set. Invalid certificates will be ignored.
     * @param callback Called upon completion.
     */
    export function setCertificates(
      details: SetCertificatesDetails,
      callback?: () => void,
    ): void;

    /**
     * Should be called as a response to {@link onSignatureRequested}.
     *
     * The extension must eventually call this function for every {@link onSignatureRequested} event; the API implementation will stop waiting for this call after some time and respond with a timeout error when this function is called.
     *
     * @since Chrome 86
     * @param details
     * @param callback
     */
    export function reportSignature(
      details: ReportSignatureDetails,
      callback?: () => void,
    ): void;

    /**
     * Types of supported cryptographic signature algorithms.
     *
     * @since Chrome 86
     */
    export type Algorithm = "RSASSA_PKCS1_v1_5_MD5_SHA1" | "RSASSA_PKCS1_v1_5_SHA1" | "RSASSA_PKCS1_v1_5_SHA256" | "RSASSA_PKCS1_v1_5_SHA384" | "RSASSA_PKCS1_v1_5_SHA512" | "RSASSA_PSS_SHA256" | "RSASSA_PSS_SHA384" | "RSASSA_PSS_SHA512";

    /**
     * Types of errors that the extension can report.
     *
     * @since Chrome 86
     */
    export type Error = "GENERAL_ERROR";

    /**
     * @since Chrome 86
     */
    export interface ClientCertificateInfo {

      /**
       * The array must contain the DER encoding of the X.509 client certificate as its first element.
       *
       * This must include exactly one certificate.
       */
      certificateChain: ArrayBuffer[];

      /**
       * All algorithms supported for this certificate. The extension will only be asked for signatures using one of these algorithms.
       */
      supportedAlgorithms: Algorithm[];
    }

    /**
     * @since Chrome 86
     */
    export interface SetCertificatesDetails {

      /**
       * When called in response to {@link onCertificatesUpdateRequested}, should contain the received `certificatesRequestId` value. Otherwise, should be unset.
       */
      certificatesRequestId?: number;

      /**
       * Error that occurred while extracting the certificates, if any. This error will be surfaced to the user when appropriate.
       */
      error?: Error;

      /**
       * List of currently available client certificates.
       */
      clientCertificates: ClientCertificateInfo[];
    }

    /**
     * @since Chrome 86
     */
    export interface CertificatesUpdateRequest {

      /**
       * Request identifier to be passed to {@link setCertificates}.
       */
      certificatesRequestId: number;
    }

    /**
     * @since Chrome 86
     */
    export interface SignatureRequest {

      /**
       * Request identifier to be passed to {@link reportSignature}.
       */
      signRequestId: number;

      /**
       * Data to be signed. Note that the data is not hashed.
       */
      input: ArrayBuffer;

      /**
       * Signature algorithm to be used.
       */
      algorithm: Algorithm;

      /**
       * The DER encoding of a X.509 certificate. The extension must sign `input` using the associated private key.
       */
      certificate: ArrayBuffer;
    }

    /**
     * @since Chrome 86
     */
    export interface ReportSignatureDetails {

      /**
       * Request identifier that was received via the {@link onSignatureRequested} event.
       */
      signRequestId: number;

      /**
       * Error that occurred while generating the signature, if any.
       */
      error?: Error;

      /**
       * The signature, if successfully generated.
       */
      signature?: ArrayBuffer;
    }

    /**
     * Deprecated. Replaced by {@link Algorithm}.
     */
    export type Hash = "MD5_SHA1" | "SHA1" | "SHA256" | "SHA384" | "SHA512";

    /**
     * The type of code being requested by the extension with requestPin function.
     *
     * @since Chrome 57
     */
    export type PinRequestType = "PIN" | "PUK";

    /**
     * The types of errors that can be presented to the user through the requestPin function.
     *
     * @since Chrome 57
     */
    export type PinRequestErrorType = "INVALID_PIN" | "INVALID_PUK" | "MAX_ATTEMPTS_EXCEEDED" | "UNKNOWN_ERROR";

    export interface CertificateInfo {

      /**
       * Must be the DER encoding of a X.509 certificate. Currently, only certificates of RSA keys are supported.
       */
      certificate: ArrayBuffer;

      /**
       * Must be set to all hashes supported for this certificate. This extension will only be asked for signatures of digests calculated with one of these hash algorithms. This should be in order of decreasing hash preference.
       */
      supportedHashes: Hash[];
    }

    export interface SignRequest {

      /**
       * The unique ID to be used by the extension should it need to call a method that requires it, e.g. requestPin.
       *
       * @since Chrome 57
       */
      signRequestId: number;

      /**
       * The digest that must be signed.
       */
      digest: ArrayBuffer;

      /**
       * Refers to the hash algorithm that was used to create `digest`.
       */
      hash: Hash;

      /**
       * The DER encoding of a X.509 certificate. The extension must sign `digest` using the associated private key.
       */
      certificate: ArrayBuffer;
    }

    /**
     * @since Chrome 57
     */
    export interface RequestPinDetails {

      /**
       * The ID given by Chrome in SignRequest.
       */
      signRequestId: number;

      /**
       * The type of code requested. Default is PIN.
       */
      requestType?: PinRequestType;

      /**
       * The error template displayed to the user. This should be set if the previous request failed, to notify the user of the failure reason.
       */
      errorType?: PinRequestErrorType;

      /**
       * The number of attempts left. This is provided so that any UI can present this information to the user. Chrome is not expected to enforce this, instead stopPinRequest should be called by the extension with errorType = MAX\_ATTEMPTS\_EXCEEDED when the number of pin requests is exceeded.
       */
      attemptsLeft?: number;
    }

    /**
     * @since Chrome 57
     */
    export interface StopPinRequestDetails {

      /**
       * The ID given by Chrome in SignRequest.
       */
      signRequestId: number;

      /**
       * The error template. If present it is displayed to user. Intended to contain the reason for stopping the flow if it was caused by an error, e.g. MAX\_ATTEMPTS\_EXCEEDED.
       */
      errorType?: PinRequestErrorType;
    }

    /**
     * @since Chrome 57
     */
    export interface PinResponseDetails {

      /**
       * The code provided by the user. Empty if user closed the dialog or some other error occurred.
       */
      userInput?: string;
    }

    /**
     * This event fires if the certificates set via {@link setCertificates} are insufficient or the browser requests updated information. The extension must call {@link setCertificates} with the updated list of certificates and the received `certificatesRequestId`.
     *
     * @since Chrome 86
     */
    export const onCertificatesUpdateRequested: events.Event<(
      request: CertificatesUpdateRequest,
    ) => void>;

    /**
     * This event fires every time the browser needs to sign a message using a certificate provided by this extension via {@link setCertificates}.
     *
     * The extension must sign the input data from `request` using the appropriate algorithm and private key and return it by calling {@link reportSignature} with the received `signRequestId`.
     *
     * @since Chrome 86
     */
    export const onSignatureRequested: events.Event<(
      request: SignatureRequest,
    ) => void>;
  }

  /**
   * Stub namespace for the "chrome\_url\_overrides" manifest key.
   *
   * @chrome-unknown-version
   */
  export namespace chrome_url_overrides {

    export interface UrlOverrideInfo {

      /**
       * Override for the chrome://newtab page.
       */
      newtab?: string;

      /**
       * Override for the chrome://bookmarks page.
       */
      bookmarks?: string;

      /**
       * Override for the chrome://history page.
       */
      history?: string;
    }
  }

  /**
   * Use the commands API to add keyboard shortcuts that trigger actions in your extension, for example, an action to open the browser action or send a command to the extension.
   */
  export namespace commands {

    /**
     * Returns all the registered extension commands for this extension and their shortcut (if active).
     *
     * @param callback Called to return the registered commands.
     */
    export function getAll(
      callback?: (
        commands: Command[],
      ) => void,
    ): void;

    export interface Command {

      /**
       * The name of the Extension Command
       */
      name?: string;

      /**
       * The Extension Command description
       */
      description?: string;

      /**
       * The shortcut active for this command, or blank if not active.
       */
      shortcut?: string;
    }

    /**
     * Fired when a registered command is activated using a keyboard shortcut.
     */
    export const onCommand: events.Event<(
      command: string,
      /**
       * @since Chrome 86
       */
      tab?: tabs.Tab,
    ) => void>;
  }

  /**
   * Stub namespace for the "content\_scripts" manifest key.
   *
   * @since Chrome 88
   */
  export namespace contentScripts {

    /**
     * The stage in the document lifecycle when the javascript file is injected.
     */
    export type RunAt = "document_idle" | "document_start" | "document_end";

    export interface ContentScript {

      /**
       * Specifies which pages this content script will be injected into. See [Match Patterns](https://developer.chrome.com/docs/extensions/match_patterns) for more details on the syntax of these strings.
       */
      matches: string[];

      /**
       * Excludes pages that this content script would otherwise be injected into. See [Match Patterns](https://developer.chrome.com/docs/extensions/match_patterns) for more details on the syntax of these strings.
       */
      exclude_matches?: string[];

      /**
       * The list of CSS files to be injected into matching pages. These are injected in the order they appear in this array, before any DOM is constructed or displayed for the page.
       */
      css?: string[];

      /**
       * The list of JavaScript files to be injected into matching pages. These are injected in the order they appear in this array.
       */
      js?: string[];

      /**
       * If specified true, it will inject into all frames, even if the frame is not the top-most frame in the tab. Each frame is checked independently for URL requirements; it will not inject into child frames if the URL requirements are not met. Defaults to false, meaning that only the top frame is matched.
       */
      all_frames?: boolean;

      /**
       * Whether the script should inject into an about:blank frame where the parent or opener frame matches one of the patterns declared in matches. Defaults to false.
       */
      match_about_blank?: boolean;

      /**
       * Applied after matches to include only those URLs that also match this glob. Intended to emulate the [@include](https://wiki.greasespot.net/Metadata_Block#.40include) Greasemonkey keyword.
       */
      include_globs?: string[];

      /**
       * Applied after matches to exclude URLs that match this glob. Intended to emulate the [@exclude](https://wiki.greasespot.net/Metadata_Block#.40exclude) Greasemonkey keyword.
       */
      exclude_globs?: string[];

      /**
       * Specifies when JavaScript files are injected into the web page. The preferred and default value is `document_idle`.
       */
      run_at?: RunAt;
    }
  }

  /**
   * Use the `chrome.contentSettings` API to change settings that control whether websites can use features such as cookies, JavaScript, and plugins. More generally speaking, content settings allow you to customize Chrome's behavior on a per-site basis instead of globally.
   *
   * @chrome-permission contentSettings
   */
  export namespace contentSettings {

    /**
     * Whether to allow cookies and other local data to be set by websites. One of
     * allow: Accept cookies,
     * block: Block cookies,
     * session\_only: Accept cookies only for the current session.
     * Default is allow.
     * The primary URL is the URL representing the cookie origin. The secondary URL is the URL of the top-level frame.
     */
    export const cookies: ContentSetting<CookiesContentSetting>;

    /**
     * Whether to show images. One of
     * allow: Show images,
     * block: Don't show images.
     * Default is allow.
     * The primary URL is the URL of the top-level frame. The secondary URL is the URL of the image.
     */
    export const images: ContentSetting<ImagesContentSetting>;

    /**
     * Whether to run JavaScript. One of
     * allow: Run JavaScript,
     * block: Don't run JavaScript.
     * Default is allow.
     * The primary URL is the URL of the top-level frame. The secondary URL is not used.
     */
    export const javascript: ContentSetting<JavascriptContentSetting>;

    /**
     * Whether to allow Geolocation. One of
     * allow: Allow sites to track your physical location,
     * block: Don't allow sites to track your physical location,
     * ask: Ask before allowing sites to track your physical location.
     * Default is ask.
     * The primary URL is the URL of the document which requested location data. The secondary URL is the URL of the top-level frame (which may or may not differ from the requesting URL).
     */
    export const location: ContentSetting<LocationContentSetting>;

    /**
     * _Deprecated._ With Flash support removed in Chrome 88, this permission no longer has any effect. Value is always block. Calls to `set()` and `clear()` will be ignored.
     */
    export const plugins: ContentSetting<PluginsContentSetting>;

    /**
     * Whether to allow sites to show pop-ups. One of
     * allow: Allow sites to show pop-ups,
     * block: Don't allow sites to show pop-ups.
     * Default is block.
     * The primary URL is the URL of the top-level frame. The secondary URL is not used.
     */
    export const popups: ContentSetting<PopupsContentSetting>;

    /**
     * Whether to allow sites to show desktop notifications. One of
     * allow: Allow sites to show desktop notifications,
     * block: Don't allow sites to show desktop notifications,
     * ask: Ask when a site wants to show desktop notifications.
     * Default is ask.
     * The primary URL is the URL of the document which wants to show the notification. The secondary URL is not used.
     */
    export const notifications: ContentSetting<NotificationsContentSetting>;

    /**
     * _Deprecated._ No longer has any effect. Fullscreen permission is now automatically granted for all sites. Value is always allow.
     */
    export const fullscreen: ContentSetting<FullscreenContentSetting>;

    /**
     * _Deprecated._ No longer has any effect. Mouse lock permission is now automatically granted for all sites. Value is always allow.
     */
    export const mouselock: ContentSetting<MouselockContentSetting>;

    /**
     * Whether to allow sites to access the microphone. One of
     * allow: Allow sites to access the microphone,
     * block: Don't allow sites to access the microphone,
     * ask: Ask when a site wants to access the microphone.
     * Default is ask.
     * The primary URL is the URL of the document which requested microphone access. The secondary URL is not used.
     * NOTE: The 'allow' setting is not valid if both patterns are ''.
     */
    export const microphone: ContentSetting<MicrophoneContentSetting>;

    /**
     * Whether to allow sites to access the camera. One of
     * allow: Allow sites to access the camera,
     * block: Don't allow sites to access the camera,
     * ask: Ask when a site wants to access the camera.
     * Default is ask.
     * The primary URL is the URL of the document which requested camera access. The secondary URL is not used.
     * NOTE: The 'allow' setting is not valid if both patterns are ''.
     */
    export const camera: ContentSetting<CameraContentSetting>;

    /**
     * Whether to allow sites to run plugins unsandboxed. One of
     * allow: Allow sites to run plugins unsandboxed,
     * block: Don't allow sites to run plugins unsandboxed,
     * ask: Ask when a site wants to run a plugin unsandboxed.
     * Default is ask.
     * The primary URL is the URL of the top-level frame. The secondary URL is not used.
     */
    export const unsandboxedPlugins: ContentSetting<PpapiBrokerContentSetting>;

    /**
     * Whether to allow sites to download multiple files automatically. One of
     * allow: Allow sites to download multiple files automatically,
     * block: Don't allow sites to download multiple files automatically,
     * ask: Ask when a site wants to download files automatically after the first file.
     * Default is ask.
     * The primary URL is the URL of the top-level frame. The secondary URL is not used.
     */
    export const automaticDownloads: ContentSetting<MultipleAutomaticDownloadsContentSetting>;

    /**
     * The only content type using resource identifiers is {@link contentSettings.plugins}. For more information, see [Resource Identifiers](https://developer.chrome.com/docs/extensions/reference/contentSettings/#resource-identifiers).
     */
    export interface ResourceIdentifier {

      /**
       * The resource identifier for the given content type.
       */
      id: string;

      /**
       * A human readable description of the resource.
       */
      description?: string;
    }

    /**
     * The scope of the ContentSetting. One of
     * regular: setting for regular profile (which is inherited by the incognito profile if not overridden elsewhere),
     * incognito\_session\_only: setting for incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular settings).
     */
    export type Scope = "regular" | "incognito_session_only";

    export interface ContentSetting<T> {

      /**
       * Clear all content setting rules set by this extension.
       *
       * @param details
       * @param callback
       */
      clear(
        details: {
          /**
           * Where to clear the setting (default: regular).
           */
          scope?: Scope,
        },
        callback?: () => void,
      ): void;

      /**
       * Gets the current content setting for a given pair of URLs.
       *
       * @param details
       * @param callback
       */
      get(
        details: {
          /**
           * The primary URL for which the content setting should be retrieved. Note that the meaning of a primary URL depends on the content type.
           */
          primaryUrl: string,

          /**
           * The secondary URL for which the content setting should be retrieved. Defaults to the primary URL. Note that the meaning of a secondary URL depends on the content type, and not all content types use secondary URLs.
           */
          secondaryUrl?: string,

          /**
           * A more specific identifier of the type of content for which the settings should be retrieved.
           */
          resourceIdentifier?: ResourceIdentifier,

          /**
           * Whether to check the content settings for an incognito session. (default false)
           */
          incognito?: boolean,
        },
        callback: (
          details: {
            /**
             * The content setting. See the description of the individual ContentSetting objects for the possible values.
             */
            setting: T,
          },
        ) => void,
      ): void;

      /**
       * Applies a new content setting rule.
       *
       * @param details
       * @param callback
       */
      set(
        details: {
          /**
           * The pattern for the primary URL. For details on the format of a pattern, see [Content Setting Patterns](https://developer.chrome.com/docs/extensions/reference/contentSettings/#patterns).
           */
          primaryPattern: string,

          /**
           * The pattern for the secondary URL. Defaults to matching all URLs. For details on the format of a pattern, see [Content Setting Patterns](https://developer.chrome.com/docs/extensions/reference/contentSettings/#patterns).
           */
          secondaryPattern?: string,

          /**
           * The resource identifier for the content type.
           */
          resourceIdentifier?: ResourceIdentifier,

          /**
           * The setting applied by this rule. See the description of the individual ContentSetting objects for the possible values.
           */
          setting: T,

          /**
           * Where to set the setting (default: regular).
           */
          scope?: Scope,
        },
        callback?: () => void,
      ): void;

      /**
       * @param callback
       */
      getResourceIdentifiers(
        callback: (
          /**
           * A list of resource identifiers for this content type, or undefined if this content type does not use resource identifiers.
           */
          resourceIdentifiers?: ResourceIdentifier[],
        ) => void,
      ): void;
    }

    export type CookiesContentSetting = "allow" | "block" | "session_only";

    export type ImagesContentSetting = "allow" | "block";

    export type JavascriptContentSetting = "allow" | "block";

    export type LocationContentSetting = "allow" | "block" | "ask";

    export type PluginsContentSetting = "block";

    export type PopupsContentSetting = "allow" | "block";

    export type NotificationsContentSetting = "allow" | "block" | "ask";

    export type FullscreenContentSetting = "allow";

    export type MouselockContentSetting = "allow";

    export type MicrophoneContentSetting = "allow" | "block" | "ask";

    export type CameraContentSetting = "allow" | "block" | "ask";

    export type PpapiBrokerContentSetting = "allow" | "block" | "ask";

    export type MultipleAutomaticDownloadsContentSetting = "allow" | "block" | "ask";
  }

  /**
   * Use the `chrome.contextMenus` API to add items to Google Chrome's context menu. You can choose what types of objects your context menu additions apply to, such as images, hyperlinks, and pages.
   *
   * @chrome-permission contextMenus
   */
  export namespace contextMenus {

    /**
     * The maximum number of top level extension items that can be added to an extension action context menu. Any items beyond this limit will be ignored.
     */
    export const ACTION_MENU_TOP_LEVEL_LIMIT: 6;

    /**
     * Creates a new context menu item. If an error occurs during creation, it may not be detected until the creation callback fires; details will be in {@link runtime.lastError}.
     *
     * @param createProperties
     * @param callback Called when the item has been created in the browser. If an error occurs during creation, details will be available in {@link runtime.lastError}.
     * @returns The ID of the newly created item.
     */
    export function create(
      createProperties: {
        /**
         * The type of menu item. Defaults to `normal`.
         */
        type?: ItemType,

        /**
         * The unique ID to assign to this item. Mandatory for event pages. Cannot be the same as another ID for this extension.
         */
        id?: string,

        /**
         * The text to display in the item; this is _required_ unless `type` is `separator`. When the context is `selection`, use `%s` within the string to show the selected text. For example, if this parameter's value is "Translate '%s' to Pig Latin" and the user selects the word "cool", the context menu item for the selection is "Translate 'cool' to Pig Latin".
         */
        title?: string,

        /**
         * The initial state of a checkbox or radio button: `true` for selected, `false` for unselected. Only one radio button can be selected at a time in a given group.
         */
        checked?: boolean,

        /**
         * List of contexts this menu item will appear in. Defaults to `['page']`.
         */
        contexts?: [ContextType, ...ContextType[]],

        /**
         * Whether the item is visible in the menu.
         *
         * @since Chrome 62
         */
        visible?: boolean,

        /**
         * A function that is called back when the menu item is clicked. Event pages cannot use this; instead, they should register a listener for {@link contextMenus.onClicked}.
         *
         * @param info Information about the item clicked and the context where the click happened.
         * @param tab The details of the tab where the click took place. This parameter is not present for platform apps.
         */
        onclick?: (
          /**
           * Information about the item clicked and the context where the click happened.
           */
          info: OnClickData,

          /**
           * The details of the tab where the click took place. This parameter is not present for platform apps.
           */
          tab: tabs.Tab,
        ) => void,

        /**
         * The ID of a parent menu item; this makes the item a child of a previously added item.
         */
        parentId?: number | string,

        /**
         * Restricts the item to apply only to documents or frames whose URL matches one of the given patterns. For details on pattern formats, see [Match Patterns](https://developer.chrome.com/docs/extensions/match_patterns).
         */
        documentUrlPatterns?: string[],

        /**
         * Similar to `documentUrlPatterns`, filters based on the `src` attribute of `img`, `audio`, and `video` tags and the `href` attribute of `a` tags.
         */
        targetUrlPatterns?: string[],

        /**
         * Whether this context menu item is enabled or disabled. Defaults to `true`.
         */
        enabled?: boolean,
      },
      callback?: () => void,
    ): number | string;

    /**
     * Updates a previously created context menu item.
     *
     * @param id The ID of the item to update.
     * @param updateProperties The properties to update. Accepts the same values as the {@link contextMenus.create} function.
     * @param callback Called when the context menu has been updated.
     */
    export function update(
      id: number | string,
      updateProperties: {
        type?: ItemType,

        title?: string,

        checked?: boolean,

        contexts?: [ContextType, ...ContextType[]],

        /**
         * Whether the item is visible in the menu.
         *
         * @since Chrome 62
         */
        visible?: boolean,

        /**
         * @param info
         * @param tab The details of the tab where the click took place. This parameter is not present for platform apps.
         */
        onclick?: (
          info: OnClickData,
          /**
           * The details of the tab where the click took place. This parameter is not present for platform apps.
           */
          tab: tabs.Tab,
        ) => void,

        /**
         * The ID of the item to be made this item's parent. Note: You cannot set an item to become a child of its own descendant.
         */
        parentId?: number | string,

        documentUrlPatterns?: string[],

        targetUrlPatterns?: string[],

        enabled?: boolean,
      },
      callback?: () => void,
    ): void;

    /**
     * Removes a context menu item.
     *
     * @param menuItemId The ID of the context menu item to remove.
     * @param callback Called when the context menu has been removed.
     */
    export function remove(
      menuItemId: number | string,
      callback?: () => void,
    ): void;

    /**
     * Removes all context menu items added by this extension.
     *
     * @param callback Called when removal is complete.
     */
    export function removeAll(
      callback?: () => void,
    ): void;

    /**
     * The different contexts a menu can appear in. Specifying 'all' is equivalent to the combination of all other contexts except for 'launcher'. The 'launcher' context is only supported by apps and is used to add menu items to the context menu that appears when clicking the app icon in the launcher/taskbar/dock/etc. Different platforms might put limitations on what is actually supported in a launcher context menu.
     */
    export type ContextType = "all" | "page" | "frame" | "selection" | "link" | "editable" | "image" | "video" | "audio" | "launcher" | "browser_action" | "page_action" | "action";

    /**
     * The type of menu item.
     */
    export type ItemType = "normal" | "checkbox" | "radio" | "separator";

    /**
     * Information sent when a context menu item is clicked.
     */
    export interface OnClickData {

      /**
       * The ID of the menu item that was clicked.
       */
      menuItemId: number | string;

      /**
       * The parent ID, if any, for the item clicked.
       */
      parentMenuItemId?: number | string;

      /**
       * One of 'image', 'video', or 'audio' if the context menu was activated on one of these types of elements.
       */
      mediaType?: string;

      /**
       * If the element is a link, the URL it points to.
       */
      linkUrl?: string;

      /**
       * Will be present for elements with a 'src' URL.
       */
      srcUrl?: string;

      /**
       * The URL of the page where the menu item was clicked. This property is not set if the click occured in a context where there is no current page, such as in a launcher context menu.
       */
      pageUrl?: string;

      /**
       * The URL of the frame of the element where the context menu was clicked, if it was in a frame.
       */
      frameUrl?: string;

      /**
       * The [ID of the frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) of the element where the context menu was clicked, if it was in a frame.
       */
      frameId?: number;

      /**
       * The text for the context selection, if any.
       */
      selectionText?: string;

      /**
       * A flag indicating whether the element is editable (text input, textarea, etc.).
       */
      editable: boolean;

      /**
       * A flag indicating the state of a checkbox or radio item before it was clicked.
       */
      wasChecked?: boolean;

      /**
       * A flag indicating the state of a checkbox or radio item after it is clicked.
       */
      checked?: boolean;
    }

    /**
     * Fired when a context menu item is clicked.
     */
    export const onClicked: events.Event<(
      info: OnClickData,
      tab?: tabs.Tab,
    ) => void>;
  }

  /**
   * Use the `chrome.cookies` API to query and modify cookies, and to be notified when they change.
   *
   * @chrome-permission cookies
   */
  export namespace cookies {

    /**
     * Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned.
     *
     * @param details
     */
    export function get(
      details: CookieDetails,
    ): Promise<{
      /**
       * Contains details about the cookie. This parameter is null if no such cookie was found.
       */
      cookie?: Cookie,
    }>;

    /**
     * Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned.
     *
     * @param details
     * @param callback
     */
    export function get(
      details: CookieDetails,
      callback: (
        /**
         * Contains details about the cookie. This parameter is null if no such cookie was found.
         */
        cookie?: Cookie,
      ) => void,
    ): void;

    /**
     * Retrieves all cookies from a single cookie store that match the given information. The cookies returned will be sorted, with those with the longest path first. If multiple cookies have the same path length, those with the earliest creation time will be first.
     *
     * @param details Information to filter the cookies being retrieved.
     */
    export function getAll(
      details: {
        /**
         * Restricts the retrieved cookies to those that would match the given URL.
         */
        url?: string,

        /**
         * Filters the cookies by name.
         */
        name?: string,

        /**
         * Restricts the retrieved cookies to those whose domains match or are subdomains of this one.
         */
        domain?: string,

        /**
         * Restricts the retrieved cookies to those whose path exactly matches this string.
         */
        path?: string,

        /**
         * Filters the cookies by their Secure property.
         */
        secure?: boolean,

        /**
         * Filters out session vs. persistent cookies.
         */
        session?: boolean,

        /**
         * The cookie store to retrieve cookies from. If omitted, the current execution context's cookie store will be used.
         */
        storeId?: string,
      },
    ): Promise<{
      /**
       * All the existing, unexpired cookies that match the given cookie info.
       */
      cookies: Cookie[],
    }>;

    /**
     * Retrieves all cookies from a single cookie store that match the given information. The cookies returned will be sorted, with those with the longest path first. If multiple cookies have the same path length, those with the earliest creation time will be first.
     *
     * @param details Information to filter the cookies being retrieved.
     * @param callback
     */
    export function getAll(
      details: {
        /**
         * Restricts the retrieved cookies to those that would match the given URL.
         */
        url?: string,

        /**
         * Filters the cookies by name.
         */
        name?: string,

        /**
         * Restricts the retrieved cookies to those whose domains match or are subdomains of this one.
         */
        domain?: string,

        /**
         * Restricts the retrieved cookies to those whose path exactly matches this string.
         */
        path?: string,

        /**
         * Filters the cookies by their Secure property.
         */
        secure?: boolean,

        /**
         * Filters out session vs. persistent cookies.
         */
        session?: boolean,

        /**
         * The cookie store to retrieve cookies from. If omitted, the current execution context's cookie store will be used.
         */
        storeId?: string,
      },
      callback: (
        /**
         * All the existing, unexpired cookies that match the given cookie info.
         */
        cookies: Cookie[],
      ) => void,
    ): void;

    /**
     * Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
     *
     * @param details Details about the cookie being set.
     */
    export function set(
      details: {
        /**
         * The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail.
         */
        url: string,

        /**
         * The name of the cookie. Empty by default if omitted.
         */
        name?: string,

        /**
         * The value of the cookie. Empty by default if omitted.
         */
        value?: string,

        /**
         * The domain of the cookie. If omitted, the cookie becomes a host-only cookie.
         */
        domain?: string,

        /**
         * The path of the cookie. Defaults to the path portion of the url parameter.
         */
        path?: string,

        /**
         * Whether the cookie should be marked as Secure. Defaults to false.
         */
        secure?: boolean,

        /**
         * Whether the cookie should be marked as HttpOnly. Defaults to false.
         */
        httpOnly?: boolean,

        /**
         * The cookie's same-site status. Defaults to "unspecified", i.e., if omitted, the cookie is set without specifying a SameSite attribute.
         */
        sameSite?: SameSiteStatus,

        /**
         * The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted, the cookie becomes a session cookie.
         */
        expirationDate?: number,

        /**
         * The ID of the cookie store in which to set the cookie. By default, the cookie is set in the current execution context's cookie store.
         */
        storeId?: string,
      },
    ): Promise<{
      /**
       * Contains details about the cookie that's been set. If setting failed for any reason, this will be "null", and {@link runtime.lastError} will be set.
       */
      cookie?: Cookie,
    }>;

    /**
     * Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
     *
     * @param details Details about the cookie being set.
     * @param callback
     */
    export function set(
      details: {
        /**
         * The request-URI to associate with the setting of the cookie. This value can affect the default domain and path values of the created cookie. If host permissions for this URL are not specified in the manifest file, the API call will fail.
         */
        url: string,

        /**
         * The name of the cookie. Empty by default if omitted.
         */
        name?: string,

        /**
         * The value of the cookie. Empty by default if omitted.
         */
        value?: string,

        /**
         * The domain of the cookie. If omitted, the cookie becomes a host-only cookie.
         */
        domain?: string,

        /**
         * The path of the cookie. Defaults to the path portion of the url parameter.
         */
        path?: string,

        /**
         * Whether the cookie should be marked as Secure. Defaults to false.
         */
        secure?: boolean,

        /**
         * Whether the cookie should be marked as HttpOnly. Defaults to false.
         */
        httpOnly?: boolean,

        /**
         * The cookie's same-site status. Defaults to "unspecified", i.e., if omitted, the cookie is set without specifying a SameSite attribute.
         */
        sameSite?: SameSiteStatus,

        /**
         * The expiration date of the cookie as the number of seconds since the UNIX epoch. If omitted, the cookie becomes a session cookie.
         */
        expirationDate?: number,

        /**
         * The ID of the cookie store in which to set the cookie. By default, the cookie is set in the current execution context's cookie store.
         */
        storeId?: string,
      },
      callback?: (
        /**
         * Contains details about the cookie that's been set. If setting failed for any reason, this will be "null", and {@link runtime.lastError} will be set.
         */
        cookie?: Cookie,
      ) => void,
    ): void;

    /**
     * Deletes a cookie by name.
     *
     * @param details
     */
    export function remove(
      details: CookieDetails,
    ): Promise<{
      /**
       * Contains details about the cookie that's been removed. If removal failed for any reason, this will be "null", and {@link runtime.lastError} will be set.
       */
      details?: {
        /**
         * The URL associated with the cookie that's been removed.
         */
        url: string,

        /**
         * The name of the cookie that's been removed.
         */
        name: string,

        /**
         * The ID of the cookie store from which the cookie was removed.
         */
        storeId: string,
      },
    }>;

    /**
     * Deletes a cookie by name.
     *
     * @param details
     * @param callback
     */
    export function remove(
      details: CookieDetails,
      callback?: (
        /**
         * Contains details about the cookie that's been removed. If removal failed for any reason, this will be "null", and {@link runtime.lastError} will be set.
         */
        details?: {
          /**
           * The URL associated with the cookie that's been removed.
           */
          url: string,

          /**
           * The name of the cookie that's been removed.
           */
          name: string,

          /**
           * The ID of the cookie store from which the cookie was removed.
           */
          storeId: string,
        },
      ) => void,
    ): void;

    /**
     * Lists all existing cookie stores.
     */
    export function getAllCookieStores(): Promise<{
      /**
       * All the existing cookie stores.
       */
      cookieStores: CookieStore[],
    }>;

    /**
     * Lists all existing cookie stores.
     *
     * @param callback
     */
    export function getAllCookieStores(
      callback: (
        /**
         * All the existing cookie stores.
         */
        cookieStores: CookieStore[],
      ) => void,
    ): void;

    /**
     * A cookie's 'SameSite' state (https://tools.ietf.org/html/draft-west-first-party-cookies). 'no\_restriction' corresponds to a cookie set with 'SameSite=None', 'lax' to 'SameSite=Lax', and 'strict' to 'SameSite=Strict'. 'unspecified' corresponds to a cookie set without the SameSite attribute.
     */
    export type SameSiteStatus = "no_restriction" | "lax" | "strict" | "unspecified";

    /**
     * Represents information about an HTTP cookie.
     */
    export interface Cookie {

      /**
       * The name of the cookie.
       */
      name: string;

      /**
       * The value of the cookie.
       */
      value: string;

      /**
       * The domain of the cookie (e.g. "www.google.com", "example.com").
       */
      domain: string;

      /**
       * True if the cookie is a host-only cookie (i.e. a request's host must exactly match the domain of the cookie).
       */
      hostOnly: boolean;

      /**
       * The path of the cookie.
       */
      path: string;

      /**
       * True if the cookie is marked as Secure (i.e. its scope is limited to secure channels, typically HTTPS).
       */
      secure: boolean;

      /**
       * True if the cookie is marked as HttpOnly (i.e. the cookie is inaccessible to client-side scripts).
       */
      httpOnly: boolean;

      /**
       * The cookie's same-site status (i.e. whether the cookie is sent with cross-site requests).
       */
      sameSite: SameSiteStatus;

      /**
       * True if the cookie is a session cookie, as opposed to a persistent cookie with an expiration date.
       */
      session: boolean;

      /**
       * The expiration date of the cookie as the number of seconds since the UNIX epoch. Not provided for session cookies.
       */
      expirationDate?: number;

      /**
       * The ID of the cookie store containing this cookie, as provided in getAllCookieStores().
       */
      storeId: string;
    }

    /**
     * Represents a cookie store in the browser. An incognito mode window, for instance, uses a separate cookie store from a non-incognito window.
     */
    export interface CookieStore {

      /**
       * The unique identifier for the cookie store.
       */
      id: string;

      /**
       * Identifiers of all the browser tabs that share this cookie store.
       */
      tabIds: number[];
    }

    /**
     * The underlying reason behind the cookie's change. If a cookie was inserted, or removed via an explicit call to "chrome.cookies.remove", "cause" will be "explicit". If a cookie was automatically removed due to expiry, "cause" will be "expired". If a cookie was removed due to being overwritten with an already-expired expiration date, "cause" will be set to "expired\_overwrite". If a cookie was automatically removed due to garbage collection, "cause" will be "evicted". If a cookie was automatically removed due to a "set" call that overwrote it, "cause" will be "overwrite". Plan your response accordingly.
     */
    export type OnChangedCause = "evicted" | "expired" | "explicit" | "expired_overwrite" | "overwrite";

    /**
     * Details to identify the cookie.
     *
     * @since Chrome 88
     */
    export interface CookieDetails {

      /**
       * The URL with which the cookie to access is associated. This argument may be a full URL, in which case any data following the URL path (e.g. the query string) is simply ignored. If host permissions for this URL are not specified in the manifest file, the API call will fail.
       */
      url: string;

      /**
       * The name of the cookie to access.
       */
      name: string;

      /**
       * The ID of the cookie store in which to look for the cookie. By default, the current execution context's cookie store will be used.
       */
      storeId?: string;
    }

    /**
     * Fired when a cookie is set or removed. As a special case, note that updating a cookie's properties is implemented as a two step process: the cookie to be updated is first removed entirely, generating a notification with "cause" of "overwrite" . Afterwards, a new cookie is written with the updated values, generating a second notification with "cause" "explicit".
     */
    export const onChanged: events.Event<(
      changeInfo: {
        /**
         * True if a cookie was removed.
         */
        removed: boolean,

        /**
         * Information about the cookie that was set or removed.
         */
        cookie: Cookie,

        /**
         * The underlying reason behind the cookie's change.
         */
        cause: OnChangedCause,
      },
    ) => void>;
  }

  /**
   * Stub namespace for manifest keys relating to the cross origin isolation response headers.
   *
   * @chrome-unknown-version
   */
  export namespace crossOriginIsolation {

    export interface ResponseHeader {

      value?: string;
    }
  }

  export {_debugger as debugger};

  /**
   * The `chrome.debugger` API serves as an alternate transport for Chrome's [remote debugging protocol](https://developer.chrome.com/devtools/docs/debugger-protocol). Use `chrome.debugger` to attach to one or more tabs to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee `tabId` to target tabs with sendCommand and route events by `tabId` from onEvent callbacks.
   *
   * @chrome-permission debugger
   */
  namespace _debugger {

    /**
     * Attaches debugger to the given target.
     *
     * @param target Debugging target to which you want to attach.
     * @param requiredVersion Required debugging protocol version ("0.1"). One can only attach to the debuggee with matching major version and greater or equal minor version. List of the protocol versions can be obtained [here](https://developer.chrome.com/devtools/docs/debugger-protocol).
     * @param callback Called once the attach operation succeeds or fails. Callback receives no arguments. If the attach fails, {@link runtime.lastError} will be set to the error message.
     */
    export function attach(
      target: Debuggee,
      requiredVersion: string,
      callback?: () => void,
    ): void;

    /**
     * Detaches debugger from the given target.
     *
     * @param target Debugging target from which you want to detach.
     * @param callback Called once the detach operation succeeds or fails. Callback receives no arguments. If the detach fails, {@link runtime.lastError} will be set to the error message.
     */
    export function detach(
      target: Debuggee,
      callback?: () => void,
    ): void;

    /**
     * Sends given command to the debugging target.
     *
     * @param target Debugging target to which you want to send the command.
     * @param method Method name. Should be one of the methods defined by the [remote debugging protocol](https://developer.chrome.com/devtools/docs/debugger-protocol).
     * @param commandParams JSON object with request parameters. This object must conform to the remote debugging params scheme for given method.
     * @param callback Response body. If an error occurs while posting the message, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.
     */
    export function sendCommand(
      target: Debuggee,
      method: string,
      commandParams?: {[name: string]: any},
      callback?: (
        /**
         * JSON object with the response. Structure of the response varies depending on the method name and is defined by the 'returns' attribute of the command description in the remote debugging protocol.
         */
        result?: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * Returns the list of available debug targets.
     *
     * @param callback
     */
    export function getTargets(
      callback: (
        /**
         * Array of TargetInfo objects corresponding to the available debug targets.
         */
        result: TargetInfo[],
      ) => void,
    ): void;

    /**
     * Debuggee identifier. Either tabId or extensionId must be specified
     */
    export interface Debuggee {

      /**
       * The id of the tab which you intend to debug.
       */
      tabId?: number;

      /**
       * The id of the extension which you intend to debug. Attaching to an extension background page is only possible when the `--silent-debugger-extension-api` command-line switch is used.
       */
      extensionId?: string;

      /**
       * The opaque id of the debug target.
       */
      targetId?: string;
    }

    /**
     * Target type.
     */
    export type TargetInfoType = "page" | "background_page" | "worker" | "other";

    /**
     * Connection termination reason.
     */
    export type DetachReason = "target_closed" | "canceled_by_user";

    /**
     * Debug target information
     */
    export interface TargetInfo {

      /**
       * Target type.
       */
      type: TargetInfoType;

      /**
       * Target id.
       */
      id: string;

      /**
       * The tab id, defined if type == 'page'.
       */
      tabId?: number;

      /**
       * The extension id, defined if type = 'background\_page'.
       */
      extensionId?: string;

      /**
       * True if debugger is already attached.
       */
      attached: boolean;

      /**
       * Target page title.
       */
      title: string;

      /**
       * Target URL.
       */
      url: string;

      /**
       * Target favicon URL.
       */
      faviconUrl?: string;
    }

    /**
     * Fired whenever debugging target issues instrumentation event.
     */
    export const onEvent: events.Event<(
      /**
       * The debuggee that generated this event.
       */
      source: Debuggee,

      /**
       * Method name. Should be one of the notifications defined by the [remote debugging protocol](https://developer.chrome.com/devtools/docs/debugger-protocol).
       */
      method: string,

      /**
       * JSON object with the parameters. Structure of the parameters varies depending on the method name and is defined by the 'parameters' attribute of the event description in the remote debugging protocol.
       */
      params?: {[name: string]: any},
    ) => void>;

    /**
     * Fired when browser terminates debugging session for the tab. This happens when either the tab is being closed or Chrome DevTools is being invoked for the attached tab.
     */
    export const onDetach: events.Event<(
      /**
       * The debuggee that was detached.
       */
      source: Debuggee,

      /**
       * Connection termination reason.
       */
      reason: DetachReason,
    ) => void>;
  }

  /**
   * Use the `chrome.declarativeContent` API to take actions depending on the content of a page, without requiring permission to read the page's content.
   *
   * @chrome-permission declarativeContent
   */
  export namespace declarativeContent {

    /**
     * See [https://developer.mozilla.org/en-US/docs/Web/API/ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).
     */
    export type ImageDataType = ImageData;

    /**
     * @since Chrome 54
     */
    export type PageStateMatcherInstanceType = "declarativeContent.PageStateMatcher";

    /**
     * @since Chrome 54
     */
    export type ShowPageActionInstanceType = "declarativeContent.ShowPageAction";

    /**
     * @since Chrome 73
     */
    export type ShowActionInstanceType = "declarativeContent.ShowAction";

    /**
     * @since Chrome 54
     */
    export type SetIconInstanceType = "declarativeContent.SetIcon";

    /**
     * @since Chrome 54
     */
    export type RequestContentScriptInstanceType = "declarativeContent.RequestContentScript";

    /**
     * Matches the state of a web page based on various criteria.
     */
    export class PageStateMatcher {
      constructor(arg: Omit<PageStateMatcher, 'instanceType'>);

      /**
       * Matches if the conditions of the `UrlFilter` are fulfilled for the top-level URL of the page.
       */
      pageUrl?: events.UrlFilter;

      /**
       * Matches if all of the CSS selectors in the array match displayed elements in a frame with the same origin as the page's main frame. All selectors in this array must be [compound selectors](https://www.w3.org/TR/selectors4/#compound) to speed up matching. Note: Listing hundreds of CSS selectors or listing CSS selectors that match hundreds of times per page can slow down web sites.
       */
      css?: string[];

      /**
       * Matches if the bookmarked state of the page is equal to the specified value. Requres the [bookmarks permission](https://developer.chrome.com/docs/extensions/declare_permissions).
       */
      isBookmarked?: boolean;

      /**
       * @since Chrome 54
       */
      instanceType: PageStateMatcherInstanceType;
    }

    /**
     * Declarative event action that shows the extension's {@link pageAction page action} while the corresponding conditions are met. This action can be used without [host permissions](https://developer.chrome.com/docs/extensions/declare_permissions#host-permissions), but the extension must have a page action. If the extension has the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission, clicking the page action grants access to the active tab.
     */
    export class ShowPageAction {
      constructor(arg: Omit<ShowPageAction, 'instanceType'>);

      /**
       * @since Chrome 54
       */
      instanceType: ShowPageActionInstanceType;
    }

    /**
     * Declarative event action that sets the n-dip square icon for the extension's {@link pageAction page action} or {@link browserAction browser action} while the corresponding conditions are met. This action can be used without [host permissions](https://developer.chrome.com/docs/extensions/declare_permissions#host-permissions), but the extension must have a page or browser action.
     *
     * Exactly one of `imageData` or `path` must be specified. Both are dictionaries mapping a number of pixels to an image representation. The image representation in `imageData` is an [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) object; for example, from a `canvas` element, while the image representation in `path` is the path to an image file relative to the extension's manifest. If `scale` screen pixels fit into a device-independent pixel, the `scale * n` icon is used. If that scale is missing, another image is resized to the required size.
     */
    export class SetIcon {
      constructor(arg: Omit<SetIcon, 'instanceType'>);

      /**
       * @since Chrome 54
       */
      instanceType: SetIconInstanceType;

      /**
       * Either an `ImageData` object or a dictionary {size -> ImageData} representing an icon to be set. If the icon is specified as a dictionary, the image used is chosen depending on the screen's pixel density. If the number of image pixels that fit into one screen space unit equals `scale`, then an image with size `scale * n` is selected, where _n_ is the size of the icon in the UI. At least one image must be specified. Note that `details.imageData = foo` is equivalent to `details.imageData = {'16': foo}`.
       */
      imageData?: ImageDataType | {[name: string]: any};
    }

    /**
     * Declarative event action that injects a content script.
     *
     * **WARNING:** This action is still experimental and is not supported on stable builds of Chrome.
     */
    export class RequestContentScript {
      constructor(arg: Omit<RequestContentScript, 'instanceType'>);

      /**
       * Names of CSS files to be injected as a part of the content script.
       */
      css?: string[];

      /**
       * Names of JavaScript files to be injected as a part of the content script.
       */
      js?: string[];

      /**
       * Whether the content script runs in all frames of the matching page, or in only the top frame. Default is `false`.
       */
      allFrames?: boolean;

      /**
       * Whether to insert the content script on `about:blank` and `about:srcdoc`. Default is `false`.
       */
      matchAboutBlank?: boolean;

      /**
       * @since Chrome 54
       */
      instanceType: RequestContentScriptInstanceType;
    }

    export const onPageChanged: events.Event<void, PageStateMatcher, RequestContentScript | SetIcon | ShowPageAction | ShowAction>;
  }

  /**
   * The `chrome.declarativeNetRequest` API is used to block or modify network requests by specifying declarative rules. This lets extensions modify network requests without intercepting them and viewing their content, thus providing more privacy.
   *
   * @chrome-permission declarativeNetRequest
   * @since Chrome 84
   */
  export namespace declarativeNetRequest {

    /**
     * The minimum number of static rules guaranteed to an extension across its enabled static rulesets. Any rules above this limit will count towards the [global rule limit](https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#global-rule-limit).
     *
     * @since Chrome 89
     */
    export const GUARANTEED_MINIMUM_STATIC_RULES: 30000;

    /**
     * The maximum number of combined dynamic and session scoped rules an extension can add.
     *
     * @since Chrome 90
     */
    export const MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES: 5000;

    /**
     * Time interval within which `MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL getMatchedRules` calls can be made, specified in minutes. Additional calls will fail immediately and set {@link runtime.lastError}. Note: `getMatchedRules` calls associated with a user gesture are exempt from the quota.
     */
    export const GETMATCHEDRULES_QUOTA_INTERVAL: 10;

    /**
     * The number of times `getMatchedRules` can be called within a period of `GETMATCHEDRULES_QUOTA_INTERVAL`.
     */
    export const MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL: 20;

    /**
     * The maximum number of regular expression rules that an extension can add. This limit is evaluated separately for the set of dynamic rules and those specified in the rule resources file.
     */
    export const MAX_NUMBER_OF_REGEX_RULES: 1000;

    /**
     * The maximum number of static `Rulesets` an extension can specify as part of the `"rule_resources"` manifest key.
     */
    export const MAX_NUMBER_OF_STATIC_RULESETS: 50;

    /**
     * The maximum number of static `Rulesets` an extension can enable at any one time.
     *
     * @chrome-unknown-version
     */
    export const MAX_NUMBER_OF_ENABLED_STATIC_RULESETS: 10;

    /**
     * Ruleset ID for the dynamic rules added by the extension.
     */
    export const DYNAMIC_RULESET_ID: "_dynamic";

    /**
     * Ruleset ID for the session-scoped rules added by the extension.
     *
     * @since Chrome 90
     */
    export const SESSION_RULESET_ID: "_session";

    /**
     * Modifies the current set of dynamic rules for the extension. The rules with IDs listed in `options.removeRuleIds` are first removed, and then the rules given in `options.addRules` are added. Notes:
     *
     * *   This update happens as a single atomic operation: either all specified rules are added and removed, or an error is returned.
     * *   These rules are persisted across browser sessions and across extension updates.
     * *   Static rules specified as part of the extension package can not be removed using this function.
     * *   {@link MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined dynamic and session rules an extension can add.
     *
     * @param options
     */
    export function updateDynamicRules(
      options: UpdateRuleOptions,
    ): Promise<{}>;

    /**
     * Modifies the current set of dynamic rules for the extension. The rules with IDs listed in `options.removeRuleIds` are first removed, and then the rules given in `options.addRules` are added. Notes:
     *
     * *   This update happens as a single atomic operation: either all specified rules are added and removed, or an error is returned.
     * *   These rules are persisted across browser sessions and across extension updates.
     * *   Static rules specified as part of the extension package can not be removed using this function.
     * *   {@link MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined dynamic and session rules an extension can add.
     *
     * @param options
     * @param callback Called once the update is complete or has failed. In case of an error, {@link runtime.lastError} will be set and no change will be made to the rule set. This can happen for multiple reasons, such as invalid rule format, duplicate rule ID, rule count limit exceeded, internal errors, and others.
     */
    export function updateDynamicRules(
      options: UpdateRuleOptions,
      callback?: () => void,
    ): void;

    /**
     * Returns the current set of dynamic rules for the extension.
     */
    export function getDynamicRules(): Promise<{
      rules: Rule[],
    }>;

    /**
     * Returns the current set of dynamic rules for the extension.
     *
     * @param callback Called with the set of dynamic rules. An error might be raised in case of transient internal errors.
     */
    export function getDynamicRules(
      callback: (
        rules: Rule[],
      ) => void,
    ): void;

    /**
     * Modifies the current set of session scoped rules for the extension. The rules with IDs listed in `options.removeRuleIds` are first removed, and then the rules given in `options.addRules` are added. Notes:
     *
     * *   This update happens as a single atomic operation: either all specified rules are added and removed, or an error is returned.
     * *   These rules are not persisted across sessions and are backed in memory.
     * *   {@link MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined dynamic and session rules an extension can add.
     *
     * @since Chrome 90
     * @param options
     */
    export function updateSessionRules(
      options: UpdateRuleOptions,
    ): Promise<{}>;

    /**
     * Modifies the current set of session scoped rules for the extension. The rules with IDs listed in `options.removeRuleIds` are first removed, and then the rules given in `options.addRules` are added. Notes:
     *
     * *   This update happens as a single atomic operation: either all specified rules are added and removed, or an error is returned.
     * *   These rules are not persisted across sessions and are backed in memory.
     * *   {@link MAX_NUMBER_OF_DYNAMIC_AND_SESSION_RULES} is the maximum number of combined dynamic and session rules an extension can add.
     *
     * @since Chrome 90
     * @param options
     * @param callback Called once the update is complete or has failed. In case of an error, {@link runtime.lastError} will be set and no change will be made to the rule set. This can happen for multiple reasons, such as invalid rule format, duplicate rule ID, rule count limit exceeded, and others.
     */
    export function updateSessionRules(
      options: UpdateRuleOptions,
      callback?: () => void,
    ): void;

    /**
     * Returns the current set of session scoped rules for the extension.
     *
     * @since Chrome 90
     */
    export function getSessionRules(): Promise<{
      rules: Rule[],
    }>;

    /**
     * Returns the current set of session scoped rules for the extension.
     *
     * @since Chrome 90
     * @param callback Called with the set of session scoped rules.
     */
    export function getSessionRules(
      callback: (
        rules: Rule[],
      ) => void,
    ): void;

    /**
     * Updates the set of enabled static rulesets for the extension. The rulesets with IDs listed in `options.disableRulesetIds` are first removed, and then the rulesets listed in `options.enableRulesetIds` are added.
     * Note that the set of enabled static rulesets is persisted across sessions but not across extension updates, i.e. the `rule_resources` manifest key will determine the set of enabled static rulesets on each extension update.
     *
     * @param options
     */
    export function updateEnabledRulesets(
      options: UpdateRulesetOptions,
    ): Promise<{}>;

    /**
     * Updates the set of enabled static rulesets for the extension. The rulesets with IDs listed in `options.disableRulesetIds` are first removed, and then the rulesets listed in `options.enableRulesetIds` are added.
     * Note that the set of enabled static rulesets is persisted across sessions but not across extension updates, i.e. the `rule_resources` manifest key will determine the set of enabled static rulesets on each extension update.
     *
     * @param options
     * @param callback Called once the update is complete. In case of an error, {@link runtime.lastError} will be set and no change will be made to set of enabled rulesets. This can happen for multiple reasons, such as invalid ruleset IDs, rule count limit exceeded, or internal errors.
     */
    export function updateEnabledRulesets(
      options: UpdateRulesetOptions,
      callback?: () => void,
    ): void;

    /**
     * Returns the ids for the current set of enabled static rulesets.
     */
    export function getEnabledRulesets(): Promise<{
      rulesetIds: string[],
    }>;

    /**
     * Returns the ids for the current set of enabled static rulesets.
     *
     * @param callback Called with a list of ids, where each id corresponds to an enabled static {@link Ruleset}.
     */
    export function getEnabledRulesets(
      callback: (
        rulesetIds: string[],
      ) => void,
    ): void;

    /**
     * Returns all rules matched for the extension. Callers can optionally filter the list of matched rules by specifying a `filter`. This method is only available to extensions with the `declarativeNetRequestFeedback` permission or having the `activeTab` permission granted for the `tabId` specified in `filter`. Note: Rules not associated with an active document that were matched more than five minutes ago will not be returned.
     *
     * @param filter An object to filter the list of matched rules.
     */
    export function getMatchedRules(
      filter?: MatchedRulesFilter,
    ): Promise<{
      details: RulesMatchedDetails,
    }>;

    /**
     * Returns all rules matched for the extension. Callers can optionally filter the list of matched rules by specifying a `filter`. This method is only available to extensions with the `declarativeNetRequestFeedback` permission or having the `activeTab` permission granted for the `tabId` specified in `filter`. Note: Rules not associated with an active document that were matched more than five minutes ago will not be returned.
     *
     * @param filter An object to filter the list of matched rules.
     * @param callback Called once the list of matched rules has been fetched. In case of an error, {@link runtime.lastError} will be set and no rules will be returned. This can happen for multiple reasons, such as insufficient permissions, or exceeding the quota.
     */
    export function getMatchedRules(
      filter: MatchedRulesFilter,
      callback: (
        details: RulesMatchedDetails,
      ) => void,
    ): void;

    /**
     * Returns all rules matched for the extension. Callers can optionally filter the list of matched rules by specifying a `filter`. This method is only available to extensions with the `declarativeNetRequestFeedback` permission or having the `activeTab` permission granted for the `tabId` specified in `filter`. Note: Rules not associated with an active document that were matched more than five minutes ago will not be returned.
     *
     * @param callback Called once the list of matched rules has been fetched. In case of an error, {@link runtime.lastError} will be set and no rules will be returned. This can happen for multiple reasons, such as insufficient permissions, or exceeding the quota.
     */
    export function getMatchedRules(
      callback: (
        details: RulesMatchedDetails,
      ) => void,
    ): void;

    /**
     * Configures if the action count for tabs should be displayed as the extension action's badge text and provides a way for that action count to be incremented.
     *
     * @since Chrome 88
     * @param options
     */
    export function setExtensionActionOptions(
      options: ExtensionActionOptions,
    ): Promise<{}>;

    /**
     * Configures if the action count for tabs should be displayed as the extension action's badge text and provides a way for that action count to be incremented.
     *
     * @since Chrome 88
     * @param options
     * @param callback
     */
    export function setExtensionActionOptions(
      options: ExtensionActionOptions,
      callback?: () => void,
    ): void;

    /**
     * Checks if the given regular expression will be supported as a `regexFilter` rule condition.
     *
     * @since Chrome 87
     * @param regexOptions The regular expression to check.
     */
    export function isRegexSupported(
      regexOptions: RegexOptions,
    ): Promise<{
      result: IsRegexSupportedResult,
    }>;

    /**
     * Checks if the given regular expression will be supported as a `regexFilter` rule condition.
     *
     * @since Chrome 87
     * @param regexOptions The regular expression to check.
     * @param callback Called with details consisting of whether the regular expression is supported and the reason if not.
     */
    export function isRegexSupported(
      regexOptions: RegexOptions,
      callback: (
        result: IsRegexSupportedResult,
      ) => void,
    ): void;

    /**
     * Returns the number of static rules an extension can enable before the [global static rule limit](https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#global-rule-limit) is reached.
     *
     * @since Chrome 89
     */
    export function getAvailableStaticRuleCount(): Promise<{
      count: number,
    }>;

    /**
     * Returns the number of static rules an extension can enable before the [global static rule limit](https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#global-rule-limit) is reached.
     *
     * @since Chrome 89
     * @param callback
     */
    export function getAvailableStaticRuleCount(
      callback: (
        count: number,
      ) => void,
    ): void;

    /**
     * This describes the resource type of the network request.
     */
    export type ResourceType = "main_frame" | "sub_frame" | "stylesheet" | "script" | "image" | "font" | "object" | "xmlhttprequest" | "ping" | "csp_report" | "media" | "websocket" | "other";

    /**
     * This describes the HTTP request method of a network request.
     *
     * @since Chrome 91
     */
    export type RequestMethod = "delete" | "get" | "head" | "options" | "patch" | "post" | "put";

    /**
     * This describes whether the request is first or third party to the frame in which it originated. A request is said to be first party if it has the same domain (eTLD+1) as the frame in which the request originated.
     */
    export type DomainType = "firstParty" | "thirdParty";

    /**
     * This describes the possible operations for a "modifyHeaders" rule.
     *
     * @since Chrome 86
     */
    export type HeaderOperation = "append" | "set" | "remove";

    /**
     * Describes the kind of action to take if a given RuleCondition matches.
     */
    export type RuleActionType = "block" | "redirect" | "allow" | "upgradeScheme" | "modifyHeaders" | "allowAllRequests";

    /**
     * Describes the reason why a given regular expression isn't supported.
     *
     * @since Chrome 87
     */
    export type UnsupportedRegexReason = "syntaxError" | "memoryLimitExceeded";

    export interface Ruleset {

      /**
       * A non-empty string uniquely identifying the ruleset. IDs beginning with '\_' are reserved for internal use.
       */
      id: string;

      /**
       * The path of the JSON ruleset relative to the extension directory.
       */
      path: string;

      /**
       * Whether the ruleset is enabled by default.
       */
      enabled: boolean;
    }

    export interface QueryKeyValue {

      key: string;

      value: string;

      /**
       * If true, the query key is replaced only if it's already present. Otherwise, the key is also added if it's missing. Defaults to false.
       *
       * @chrome-unknown-version
       */
      replaceOnly?: boolean;
    }

    export interface QueryTransform {

      /**
       * The list of query keys to be removed.
       */
      removeParams?: string[];

      /**
       * The list of query key-value pairs to be added or replaced.
       */
      addOrReplaceParams?: QueryKeyValue[];
    }

    export interface URLTransform {

      /**
       * The new scheme for the request. Allowed values are "http", "https", "ftp" and "chrome-extension".
       */
      scheme?: string;

      /**
       * The new host for the request.
       */
      host?: string;

      /**
       * The new port for the request. If empty, the existing port is cleared.
       */
      port?: string;

      /**
       * The new path for the request. If empty, the existing path is cleared.
       */
      path?: string;

      /**
       * The new query for the request. Should be either empty, in which case the existing query is cleared; or should begin with '?'.
       */
      query?: string;

      /**
       * Add, remove or replace query key-value pairs.
       */
      queryTransform?: QueryTransform;

      /**
       * The new fragment for the request. Should be either empty, in which case the existing fragment is cleared; or should begin with '#'.
       */
      fragment?: string;

      /**
       * The new username for the request.
       */
      username?: string;

      /**
       * The new password for the request.
       */
      password?: string;
    }

    export interface Redirect {

      /**
       * Path relative to the extension directory. Should start with '/'.
       */
      extensionPath?: string;

      /**
       * Url transformations to perform.
       */
      transform?: URLTransform;

      /**
       * The redirect url. Redirects to JavaScript urls are not allowed.
       */
      url?: string;

      /**
       * Substitution pattern for rules which specify a `regexFilter`. The first match of `regexFilter` within the url will be replaced with this pattern. Within `regexSubstitution`, backslash-escaped digits (\\1 to \\9) can be used to insert the corresponding capture groups. \\0 refers to the entire matching text.
       */
      regexSubstitution?: string;
    }

    export interface RuleCondition {

      /**
       * The pattern which is matched against the network request url. Supported constructs:
       *
       * **'\*'** : Wildcard: Matches any number of characters.
       *
       * **'|'** : Left/right anchor: If used at either end of the pattern, specifies the beginning/end of the url respectively.
       *
       * **'||'** : Domain name anchor: If used at the beginning of the pattern, specifies the start of a (sub-)domain of the URL.
       *
       * **'^'** : Separator character: This matches anything except a letter, a digit or one of the following: \_ - . %. This can also match the end of the URL.
       *
       * Therefore `urlFilter` is composed of the following parts: (optional Left/Domain name anchor) + pattern + (optional Right anchor).
       *
       * If omitted, all urls are matched. An empty string is not allowed.
       *
       * A pattern beginning with `||*` is not allowed. Use `*` instead.
       *
       * Note: Only one of `urlFilter` or `regexFilter` can be specified.
       *
       * Note: The `urlFilter` must be composed of only ASCII characters. This is matched against a url where the host is encoded in the punycode format (in case of internationalized domains) and any other non-ascii characters are url encoded in utf-8. For example, when the request url is http://abc.рф?q=ф, the `urlFilter` will be matched against the url http://abc.xn--p1ai/?q=%D1%84.
       */
      urlFilter?: string;

      /**
       * Regular expression to match against the network request url. This follows the [RE2 syntax](https://github.com/google/re2/wiki/Syntax).
       *
       * Note: Only one of `urlFilter` or `regexFilter` can be specified.
       *
       * Note: The `regexFilter` must be composed of only ASCII characters. This is matched against a url where the host is encoded in the punycode format (in case of internationalized domains) and any other non-ascii characters are url encoded in utf-8.
       */
      regexFilter?: string;

      /**
       * Whether the `urlFilter` or `regexFilter` (whichever is specified) is case sensitive. Default is true.
       */
      isUrlFilterCaseSensitive?: boolean;

      /**
       * The rule will only match network requests originating from the list of `domains`. If the list is omitted, the rule is applied to requests from all domains. An empty list is not allowed.
       *
       * Notes:
       *
       * *   Sub-domains like "a.example.com" are also allowed.
       * *   The entries must consist of only ascii characters.
       * *   Use punycode encoding for internationalized domains.
       * *   This matches against the request initiator and not the request url.
       */
      domains?: string[];

      /**
       * The rule will not match network requests originating from the list of `excludedDomains`. If the list is empty or omitted, no domains are excluded. This takes precedence over `domains`.
       *
       * Notes:
       *
       * *   Sub-domains like "a.example.com" are also allowed.
       * *   The entries must consist of only ascii characters.
       * *   Use punycode encoding for internationalized domains.
       * *   This matches against the request initiator and not the request url.
       */
      excludedDomains?: string[];

      /**
       * List of resource types which the rule can match. An empty list is not allowed.
       *
       * Note: this must be specified for `allowAllRequests` rules and may only include the `sub_frame` and `main_frame` resource types.
       */
      resourceTypes?: ResourceType[];

      /**
       * List of resource types which the rule won't match. Only one of `resourceTypes` and `excludedResourceTypes` should be specified. If neither of them is specified, all resource types except "main\_frame" are blocked.
       */
      excludedResourceTypes?: ResourceType[];

      /**
       * List of HTTP request methods which the rule can match. An empty list is not allowed.
       *
       * Note: Specifying a `requestMethods` rule condition will also exclude non-HTTP(s) requests, whereas specifying `excludedRequestMethods` will not.
       *
       * @since Chrome 91
       */
      requestMethods?: RequestMethod[];

      /**
       * List of request methods which the rule won't match. Only one of `requestMethods` and `excludedRequestMethods` should be specified. If neither of them is specified, all request methods are matched.
       *
       * @since Chrome 91
       */
      excludedRequestMethods?: RequestMethod[];

      /**
       * Specifies whether the network request is first-party or third-party to the domain from which it originated. If omitted, all requests are accepted.
       */
      domainType?: DomainType;

      /**
       * List of {@link tabs.Tab.id} which the rule should match. An ID of {@link tabs.TAB_ID_NONE} matches requests which don't originate from a tab. An empty list is not allowed. Only supported for session-scoped rules.
       *
       * @since Chrome 92
       */
      tabIds?: number[];

      /**
       * List of {@link tabs.Tab.id} which the rule should not match. An ID of {@link tabs.TAB_ID_NONE} excludes requests which don't originate from a tab. Only supported for session-scoped rules.
       *
       * @since Chrome 92
       */
      excludedTabIds?: number[];
    }

    /**
     * @since Chrome 86
     */
    export interface ModifyHeaderInfo {

      /**
       * The name of the header to be modified.
       */
      header: string;

      /**
       * The operation to be performed on a header.
       */
      operation: HeaderOperation;

      /**
       * The new value for the header. Must be specified for `append` and `set` operations.
       */
      value?: string;
    }

    export interface RuleAction {

      /**
       * The type of action to perform.
       */
      type: RuleActionType;

      /**
       * Describes how the redirect should be performed. Only valid for redirect rules.
       */
      redirect?: Redirect;

      /**
       * The request headers to modify for the request. Only valid if RuleActionType is "modifyHeaders".
       *
       * @since Chrome 86
       */
      requestHeaders?: ModifyHeaderInfo[];

      /**
       * The response headers to modify for the request. Only valid if RuleActionType is "modifyHeaders".
       *
       * @since Chrome 86
       */
      responseHeaders?: ModifyHeaderInfo[];
    }

    export interface Rule {

      /**
       * An id which uniquely identifies a rule. Mandatory and should be >= 1.
       */
      id: number;

      /**
       * Rule priority. Defaults to 1. When specified, should be >= 1.
       */
      priority?: number;

      /**
       * The condition under which this rule is triggered.
       */
      condition: RuleCondition;

      /**
       * The action to take if this rule is matched.
       */
      action: RuleAction;
    }

    export interface MatchedRule {

      /**
       * A matching rule's ID.
       */
      ruleId: number;

      /**
       * ID of the {@link Ruleset} this rule belongs to. For a rule originating from the set of dynamic rules, this will be equal to {@link DYNAMIC_RULESET_ID}.
       */
      rulesetId: string;
    }

    export interface MatchedRuleInfo {

      rule: MatchedRule;

      /**
       * The time the rule was matched. Timestamps will correspond to the Javascript convention for times, i.e. number of milliseconds since the epoch.
       */
      timeStamp: number;

      /**
       * The tabId of the tab from which the request originated if the tab is still active. Else -1.
       */
      tabId: number;
    }

    export interface MatchedRulesFilter {

      /**
       * If specified, only matches rules for the given tab. Matches rules not associated with any active tab if set to -1.
       */
      tabId?: number;

      /**
       * If specified, only matches rules after the given timestamp.
       */
      minTimeStamp?: number;
    }

    export interface RulesMatchedDetails {

      /**
       * Rules matching the given filter.
       */
      rulesMatchedInfo: MatchedRuleInfo[];
    }

    export interface RequestDetails {

      /**
       * The ID of the request. Request IDs are unique within a browser session.
       */
      requestId: string;

      /**
       * The URL of the request.
       */
      url: string;

      /**
       * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
       */
      initiator?: string;

      /**
       * Standard HTTP method.
       */
      method: string;

      /**
       * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
       */
      frameId: number;

      /**
       * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
       */
      parentFrameId: number;

      /**
       * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
       */
      tabId: number;

      /**
       * The resource type of the request.
       */
      type: ResourceType;
    }

    export interface MatchedRuleInfoDebug {

      rule: MatchedRule;

      /**
       * Details about the request for which the rule was matched.
       */
      request: RequestDetails;
    }

    /**
     * @since Chrome 87
     */
    export interface RegexOptions {

      /**
       * The regular expresson to check.
       */
      regex: string;

      /**
       * Whether the `regex` specified is case sensitive. Default is true.
       */
      isCaseSensitive?: boolean;

      /**
       * Whether the `regex` specified requires capturing. Capturing is only required for redirect rules which specify a `regexSubstition` action. The default is false.
       */
      requireCapturing?: boolean;
    }

    /**
     * @since Chrome 87
     */
    export interface IsRegexSupportedResult {

      isSupported: boolean;

      /**
       * Specifies the reason why the regular expression is not supported. Only provided if `isSupported` is false.
       */
      reason?: UnsupportedRegexReason;
    }

    /**
     * @since Chrome 87
     */
    export interface UpdateRuleOptions {

      /**
       * IDs of the rules to remove. Any invalid IDs will be ignored.
       */
      removeRuleIds?: number[];

      /**
       * Rules to add.
       */
      addRules?: Rule[];
    }

    /**
     * @since Chrome 87
     */
    export interface UpdateRulesetOptions {

      /**
       * The set of ids corresponding to a static {@link Ruleset} that should be disabled.
       */
      disableRulesetIds?: string[];

      /**
       * The set of ids corresponding to a static {@link Ruleset} that should be enabled.
       */
      enableRulesetIds?: string[];
    }

    /**
     * @since Chrome 89
     */
    export interface TabActionCountUpdate {

      /**
       * The tab for which to update the action count.
       */
      tabId: number;

      /**
       * The amount to increment the tab's action count by. Negative values will decrement the count.
       */
      increment: number;
    }

    /**
     * @since Chrome 88
     */
    export interface ExtensionActionOptions {

      /**
       * Whether to automatically display the action count for a page as the extension's badge text. This preference is persisted across sessions.
       */
      displayActionCountAsBadgeText?: boolean;

      /**
       * Details of how the tab's action count should be adjusted.
       *
       * @since Chrome 89
       */
      tabUpdate?: TabActionCountUpdate;
    }

    /**
     * Fired when a rule is matched with a request. Only available for unpacked extensions with the `declarativeNetRequestFeedback` permission as this is intended to be used for debugging purposes only.
     *
     * @chrome-permission declarativeNetRequestFeedback
     */
    export const onRuleMatchedDebug: events.Event<(
      /**
       * The rule that has been matched along with information about the associated request.
       *
       * @since Chrome 85
       */
      info: MatchedRuleInfoDebug,
    ) => void>;
  }

  /**
   * Desktop Capture API that can be used to capture content of screen, individual windows or tabs.
   *
   * @chrome-permission desktopCapture
   */
  export namespace desktopCapture {

    /**
     * Shows desktop media picker UI with the specified set of sources.
     *
     * @param sources Set of sources that should be shown to the user. The sources order in the set decides the tab order in the picker.
     * @param targetTab Optional tab for which the stream is created. If not specified then the resulting stream can be used only by the calling extension. The stream can only be used by frames in the given tab whose security origin matches `tab.url`. The tab's origin must be a secure origin, e.g. HTTPS.
     * @param callback
     * @returns An id that can be passed to cancelChooseDesktopMedia() in case the prompt need to be canceled.
     */
    export function chooseDesktopMedia(
      sources: DesktopCaptureSourceType[],
      targetTab: tabs.Tab,
      callback: (
        /**
         * An opaque string that can be passed to `getUserMedia()` API to generate media stream that corresponds to the source selected by the user. If user didn't select any source (i.e. canceled the prompt) then the callback is called with an empty `streamId`. The created `streamId` can be used only once and expires after a few seconds when it is not used.
         */
        streamId: string,

        /**
         * Contains properties that describe the stream.
         *
         * @since Chrome 57
         */
        options: {
          /**
           * True if "audio" is included in parameter sources, and the end user does not uncheck the "Share audio" checkbox. Otherwise false, and in this case, one should not ask for audio stream through getUserMedia call.
           */
          canRequestAudioTrack: boolean,
        },
      ) => void,
    ): number;

    /**
     * Shows desktop media picker UI with the specified set of sources.
     *
     * @param sources Set of sources that should be shown to the user. The sources order in the set decides the tab order in the picker.
     * @param callback
     * @returns An id that can be passed to cancelChooseDesktopMedia() in case the prompt need to be canceled.
     */
    export function chooseDesktopMedia(
      sources: DesktopCaptureSourceType[],
      callback: (
        /**
         * An opaque string that can be passed to `getUserMedia()` API to generate media stream that corresponds to the source selected by the user. If user didn't select any source (i.e. canceled the prompt) then the callback is called with an empty `streamId`. The created `streamId` can be used only once and expires after a few seconds when it is not used.
         */
        streamId: string,

        /**
         * Contains properties that describe the stream.
         *
         * @since Chrome 57
         */
        options: {
          /**
           * True if "audio" is included in parameter sources, and the end user does not uncheck the "Share audio" checkbox. Otherwise false, and in this case, one should not ask for audio stream through getUserMedia call.
           */
          canRequestAudioTrack: boolean,
        },
      ) => void,
    ): number;

    /**
     * Hides desktop media picker dialog shown by chooseDesktopMedia().
     *
     * @param desktopMediaRequestId Id returned by chooseDesktopMedia()
     */
    export function cancelChooseDesktopMedia(
      desktopMediaRequestId: number,
    ): void;

    /**
     * Enum used to define set of desktop media sources used in chooseDesktopMedia().
     */
    export type DesktopCaptureSourceType = "screen" | "window" | "tab" | "audio";
  }

  /**
   * Use the `chrome.devtools.inspectedWindow` API to interact with the inspected window: obtain the tab ID for the inspected page, evaluate the code in the context of the inspected window, reload the page, or obtain the list of resources within the page.
   */
  export namespace devtools.inspectedWindow {

    /**
     * The ID of the tab being inspected. This ID may be used with chrome.tabs.\* API.
     */
    export const tabId: number;

    /**
     * Evaluates a JavaScript expression in the context of the main frame of the inspected page. The expression must evaluate to a JSON-compliant object, otherwise an exception is thrown. The eval function can report either a DevTools-side error or a JavaScript exception that occurs during evaluation. In either case, the `result` parameter of the callback is `undefined`. In the case of a DevTools-side error, the `isException` parameter is non-null and has `isError` set to true and `code` set to an error code. In the case of a JavaScript error, `isException` is set to true and `value` is set to the string value of thrown object.
     *
     * @param expression An expression to evaluate.
     * @param options The options parameter can contain one or more options.
     * @param callback A function called when evaluation completes.
     */
    export function eval(
      expression: string,
      options?: {
        /**
         * If specified, the expression is evaluated on the iframe whose URL matches the one specified. By default, the expression is evaluated in the top frame of the inspected page.
         */
        frameURL?: string,

        /**
         * Evaluate the expression in the context of the content script of the calling extension, provided that the content script is already injected into the inspected page. If not, the expression is not evaluated and the callback is invoked with the exception parameter set to an object that has the `isError` field set to true and the `code` field set to `E_NOTFOUND`.
         */
        useContentScriptContext?: boolean,

        /**
         * Evaluate the expression in the context of a content script of an extension that matches the specified origin. If given, contextSecurityOrigin overrides the 'true' setting on userContentScriptContext.
         */
        contextSecurityOrigin?: string,
      },
      callback?: (
        /**
         * The result of evaluation.
         */
        result: {[name: string]: any},

        /**
         * An object providing details if an exception occurred while evaluating the expression.
         */
        exceptionInfo: {
          /**
           * Set if the error occurred on the DevTools side before the expression is evaluated.
           */
          isError: boolean,

          /**
           * Set if the error occurred on the DevTools side before the expression is evaluated.
           */
          code: string,

          /**
           * Set if the error occurred on the DevTools side before the expression is evaluated.
           */
          description: string,

          /**
           * Set if the error occurred on the DevTools side before the expression is evaluated, contains the array of the values that may be substituted into the description string to provide more information about the cause of the error.
           */
          details: any[],

          /**
           * Set if the evaluated code produces an unhandled exception.
           */
          isException: boolean,

          /**
           * Set if the evaluated code produces an unhandled exception.
           */
          value: string,
        },
      ) => void,
    ): void;

    /**
     * Reloads the inspected page.
     *
     * @param reloadOptions
     */
    export function reload(
      reloadOptions?: {
        /**
         * When true, the loader will bypass the cache for all inspected page resources loaded before the `load` event is fired. The effect is similar to pressing Ctrl+Shift+R in the inspected window or within the Developer Tools window.
         */
        ignoreCache?: boolean,

        /**
         * If specified, the string will override the value of the `User-Agent` HTTP header that's sent while loading the resources of the inspected page. The string will also override the value of the `navigator.userAgent` property that's returned to any scripts that are running within the inspected page.
         */
        userAgent?: string,

        /**
         * If specified, the script will be injected into every frame of the inspected page immediately upon load, before any of the frame's scripts. The script will not be injected after subsequent reloads—for example, if the user presses Ctrl+R.
         */
        injectedScript?: string,
      },
    ): void;

    /**
     * Retrieves the list of resources from the inspected page.
     *
     * @param callback A function that receives the list of resources when the request completes.
     */
    export function getResources(
      callback: (
        /**
         * The resources within the page.
         */
        resources: Resource[],
      ) => void,
    ): void;

    /**
     * A resource within the inspected page, such as a document, a script, or an image.
     */
    export interface Resource {

      /**
       * The URL of the resource.
       */
      url: string;

      /**
       * Gets the content of the resource.
       *
       * @param callback A function that receives resource content when the request completes.
       */
      getContent(
        callback: (
          /**
           * Content of the resource (potentially encoded).
           */
          content: string,

          /**
           * Empty if the content is not encoded, encoding name otherwise. Currently, only base64 is supported.
           */
          encoding: string,
        ) => void,
      ): void;

      /**
       * Sets the content of the resource.
       *
       * @param content New content of the resource. Only resources with the text type are currently supported.
       * @param commit True if the user has finished editing the resource, and the new content of the resource should be persisted; false if this is a minor change sent in progress of the user editing the resource.
       * @param callback A function called upon request completion.
       */
      setContent(
        content: string,
        commit: boolean,
        callback?: (
          /**
           * Set to undefined if the resource content was set successfully; describes error otherwise.
           */
          error?: {[name: string]: any},
        ) => void,
      ): void;
    }

    /**
     * Fired when a new resource is added to the inspected page.
     */
    export const onResourceAdded: events.Event<(
      resource: Resource,
    ) => void>;

    /**
     * Fired when a new revision of the resource is committed (e.g. user saves an edited version of the resource in the Developer Tools).
     */
    export const onResourceContentCommitted: events.Event<(
      resource: Resource,
      /**
       * New content of the resource.
       */
      content: string,
    ) => void>;
  }

  /**
   * Use the `chrome.devtools.network` API to retrieve the information about network requests displayed by the Developer Tools in the Network panel.
   */
  export namespace devtools.network {

    /**
     * Returns HAR log that contains all known network requests.
     *
     * @param callback A function that receives the HAR log when the request completes.
     */
    export function getHAR(
      callback: (
        /**
         * A HAR log. See HAR specification for details.
         */
        harLog: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * Represents a network request for a document resource (script, image and so on). See HAR Specification for reference.
     */
    export interface Request {

      /**
       * Returns content of the response body.
       *
       * @param callback A function that receives the response body when the request completes.
       */
      getContent(
        callback: (
          /**
           * Content of the response body (potentially encoded).
           */
          content: string,

          /**
           * Empty if content is not encoded, encoding name otherwise. Currently, only base64 is supported.
           */
          encoding: string,
        ) => void,
      ): void;
    }

    /**
     * Fired when a network request is finished and all request data are available.
     */
    export const onRequestFinished: events.Event<(
      /**
       * Description of a network request in the form of a HAR entry. See HAR specification for details.
       */
      request: Request,
    ) => void>;

    /**
     * Fired when the inspected window navigates to a new page.
     */
    export const onNavigated: events.Event<(
      /**
       * URL of the new page.
       */
      url: string,
    ) => void>;
  }

  /**
   * Use the `chrome.devtools.panels` API to integrate your extension into Developer Tools window UI: create your own panels, access existing panels, and add sidebars.
   */
  export namespace devtools.panels {

    /**
     * Elements panel.
     */
    export const elements: ElementsPanel;

    /**
     * Sources panel.
     */
    export const sources: SourcesPanel;

    /**
     * The name of the color theme set in user's DevTools settings. Possible values: `default` (the default) and `dark`.
     *
     * @since Chrome 59
     */
    export const themeName: string;

    /**
     * Creates an extension panel.
     *
     * @param title Title that is displayed next to the extension icon in the Developer Tools toolbar.
     * @param iconPath Path of the panel's icon relative to the extension directory.
     * @param pagePath Path of the panel's HTML page relative to the extension directory.
     * @param callback A function that is called when the panel is created.
     */
    export function create(
      title: string,
      iconPath: string,
      pagePath: string,
      callback?: (
        /**
         * An ExtensionPanel object representing the created panel.
         */
        panel: ExtensionPanel,
      ) => void,
    ): void;

    /**
     * Specifies the function to be called when the user clicks a resource link in the Developer Tools window. To unset the handler, either call the method with no parameters or pass null as the parameter.
     *
     * @param callback A function that is called when the user clicks on a valid resource link in Developer Tools window. Note that if the user clicks an invalid URL or an XHR, this function is not called.
     */
    export function setOpenResourceHandler(
      callback?: (
        /**
         * A {@link devtools.inspectedWindow.Resource} object for the resource that was clicked.
         */
        resource: devtools.inspectedWindow.Resource,
      ) => void,
    ): void;

    /**
     * Requests DevTools to open a URL in a Developer Tools panel.
     *
     * @param url The URL of the resource to open.
     * @param lineNumber Specifies the line number to scroll to when the resource is loaded.
     * @param callback A function that is called when the resource has been successfully loaded.
     */
    export function openResource(
      url: string,
      lineNumber: number,
      callback?: () => void,
    ): void;

    /**
     * Represents the Elements panel.
     */
    export interface ElementsPanel {

      /**
       * Creates a pane within panel's sidebar.
       *
       * @param title Text that is displayed in sidebar caption.
       * @param callback A callback invoked when the sidebar is created.
       */
      createSidebarPane(
        title: string,
        callback?: (
          /**
           * An ExtensionSidebarPane object for created sidebar pane.
           */
          result: ExtensionSidebarPane,
        ) => void,
      ): void;

      /**
       * Fired when an object is selected in the panel.
       */
      onSelectionChanged: events.Event<() => void>;
    }

    /**
     * Represents the Sources panel.
     */
    export interface SourcesPanel {

      /**
       * Creates a pane within panel's sidebar.
       *
       * @param title Text that is displayed in sidebar caption.
       * @param callback A callback invoked when the sidebar is created.
       */
      createSidebarPane(
        title: string,
        callback?: (
          /**
           * An ExtensionSidebarPane object for created sidebar pane.
           */
          result: ExtensionSidebarPane,
        ) => void,
      ): void;

      /**
       * Fired when an object is selected in the panel.
       */
      onSelectionChanged: events.Event<() => void>;
    }

    /**
     * Represents a panel created by extension.
     */
    export interface ExtensionPanel {

      /**
       * Appends a button to the status bar of the panel.
       *
       * @param iconPath Path to the icon of the button. The file should contain a 64x24-pixel image composed of two 32x24 icons. The left icon is used when the button is inactive; the right icon is displayed when the button is pressed.
       * @param tooltipText Text shown as a tooltip when user hovers the mouse over the button.
       * @param disabled Whether the button is disabled.
       */
      createStatusBarButton(
        iconPath: string,
        tooltipText: string,
        disabled: boolean,
      ): Button;

      /**
       * Fired upon a search action (start of a new search, search result navigation, or search being canceled).
       */
      onSearch: events.Event<(
        /**
         * Type of search action being performed.
         */
        action: string,

        /**
         * Query string (only for 'performSearch').
         */
        queryString?: string,
      ) => void>;

      /**
       * Fired when the user switches to the panel.
       */
      onShown: events.Event<(
        /**
         * The JavaScript `window` object of panel's page.
         */
        window: Window,
      ) => void>;

      /**
       * Fired when the user switches away from the panel.
       */
      onHidden: events.Event<() => void>;
    }

    /**
     * A sidebar created by the extension.
     */
    export interface ExtensionSidebarPane {

      /**
       * Sets the height of the sidebar.
       *
       * @param height A CSS-like size specification, such as `'100px'` or `'12ex'`.
       */
      setHeight(
        height: string,
      ): void;

      /**
       * Sets an expression that is evaluated within the inspected page. The result is displayed in the sidebar pane.
       *
       * @param expression An expression to be evaluated in context of the inspected page. JavaScript objects and DOM nodes are displayed in an expandable tree similar to the console/watch.
       * @param rootTitle An optional title for the root of the expression tree.
       * @param callback A callback invoked after the sidebar pane is updated with the expression evaluation results.
       */
      setExpression(
        expression: string,
        rootTitle?: string,
        callback?: () => void,
      ): void;

      /**
       * Sets a JSON-compliant object to be displayed in the sidebar pane.
       *
       * @param jsonObject An object to be displayed in context of the inspected page. Evaluated in the context of the caller (API client).
       * @param rootTitle An optional title for the root of the expression tree.
       * @param callback A callback invoked after the sidebar is updated with the object.
       */
      setObject(
        jsonObject: string,
        rootTitle?: string,
        callback?: () => void,
      ): void;

      /**
       * Sets an HTML page to be displayed in the sidebar pane.
       *
       * @param path Relative path of an extension page to display within the sidebar.
       */
      setPage(
        path: string,
      ): void;

      /**
       * Fired when the sidebar pane becomes visible as a result of user switching to the panel that hosts it.
       */
      onShown: events.Event<(
        /**
         * The JavaScript `window` object of the sidebar page, if one was set with the `setPage()` method.
         */
        window: Window,
      ) => void>;

      /**
       * Fired when the sidebar pane becomes hidden as a result of the user switching away from the panel that hosts the sidebar pane.
       */
      onHidden: events.Event<() => void>;
    }

    /**
     * A button created by the extension.
     */
    export interface Button {

      /**
       * Updates the attributes of the button. If some of the arguments are omitted or `null`, the corresponding attributes are not updated.
       *
       * @param iconPath Path to the new icon of the button.
       * @param tooltipText Text shown as a tooltip when user hovers the mouse over the button.
       * @param disabled Whether the button is disabled.
       */
      update(
        iconPath?: string,
        tooltipText?: string,
        disabled?: boolean,
      ): void;

      /**
       * Fired when the button is clicked.
       */
      onClicked: events.Event<() => void>;
    }
  }

  /**
   * Use the `chrome.dns` API for dns resolution.
   *
   * @chrome-permission dns
   * @chrome-channel dev
   * @alpha
   */
  export namespace dns {

    /**
     * Resolves the given hostname or IP address literal.
     *
     * @param hostname The hostname to resolve.
     */
    export function resolve(
      hostname: string,
    ): Promise<{
      resolveInfo: ResolveCallbackResolveInfo,
    }>;

    /**
     * Resolves the given hostname or IP address literal.
     *
     * @param hostname The hostname to resolve.
     * @param callback Called when the resolution operation completes.
     */
    export function resolve(
      hostname: string,
      callback: (
        resolveInfo: ResolveCallbackResolveInfo,
      ) => void,
    ): void;

    export interface ResolveCallbackResolveInfo {

      /**
       * The result code. Zero indicates success.
       */
      resultCode: number;

      /**
       * A string representing the IP address literal. Supplied only if resultCode indicates success.
       */
      address?: string;
    }
  }

  /**
   * Use the `chrome.documentScan` API to discover and retrieve images from attached paper document scanners.
   *
   * @chrome-platform chromeos
   * @chrome-permission documentScan
   */
  export namespace documentScan {

    /**
     * Performs a document scan. On success, the PNG data will be sent to the callback.
     *
     * @param options Object containing scan parameters.
     * @param callback Called with the result and data from the scan.
     */
    export function scan(
      options: ScanOptions,
      callback: (
        result: ScanResults,
      ) => void,
    ): void;

    export interface ScanOptions {

      /**
       * The MIME types that are accepted by the caller.
       */
      mimeTypes?: string[];

      /**
       * The number of scanned images allowed (defaults to 1).
       */
      maxImages?: number;
    }

    export interface ScanResults {

      /**
       * The data image URLs in a form that can be passed as the "src" value to an image tag.
       */
      dataUrls: string[];

      /**
       * The MIME type of `dataUrls`.
       */
      mimeType: string;
    }
  }

  /**
   * Use the `chrome.dom` API to access special DOM APIs for Extensions
   *
   * @since Chrome 88
   */
  export namespace dom {

    /**
     * Gets the open shadow root or the closed shadow root hosted by the specified element. If the element doesn't attach the shadow root, it will return null.
     *
     * @param element
     * @returns See [https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot](https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot)
     */
    export function openOrClosedShadowRoot(
      element: HTMLElement,
    ): {[name: string]: any};
  }

  /**
   * Use the `chrome.downloads` API to programmatically initiate, monitor, manipulate, and search for downloads.
   *
   * @chrome-permission downloads
   */
  export namespace downloads {

    /**
     * Download a URL. If the URL uses the HTTP\[S\] protocol, then the request will include all cookies currently set for its hostname. If both `filename` and `saveAs` are specified, then the Save As dialog will be displayed, pre-populated with the specified `filename`. If the download started successfully, `callback` will be called with the new {@link DownloadItem}'s `downloadId`. If there was an error starting the download, then `callback` will be called with `downloadId=undefined` and {@link runtime.lastError} will contain a descriptive string. The error strings are not guaranteed to remain backwards compatible between releases. Extensions must not parse it.
     *
     * @param options What to download and how.
     * @param callback Called with the id of the new {@link DownloadItem}.
     */
    export function download(
      options: DownloadOptions,
      callback?: (
        downloadId: number,
      ) => void,
    ): void;

    /**
     * Find {@link DownloadItem}. Set `query` to the empty object to get all {@link DownloadItem}. To get a specific {@link DownloadItem}, set only the `id` field. To page through a large number of items, set `orderBy: ['-startTime']`, set `limit` to the number of items per page, and set `startedAfter` to the `startTime` of the last item from the last page.
     *
     * @param query
     * @param callback
     */
    export function search(
      query: DownloadQuery,
      callback: (
        results: DownloadItem[],
      ) => void,
    ): void;

    /**
     * Pause the download. If the request was successful the download is in a paused state. Otherwise {@link runtime.lastError} contains an error message. The request will fail if the download is not active.
     *
     * @param downloadId The id of the download to pause.
     * @param callback Called when the pause request is completed.
     */
    export function pause(
      downloadId: number,
      callback?: () => void,
    ): void;

    /**
     * Resume a paused download. If the request was successful the download is in progress and unpaused. Otherwise {@link runtime.lastError} contains an error message. The request will fail if the download is not active.
     *
     * @param downloadId The id of the download to resume.
     * @param callback Called when the resume request is completed.
     */
    export function resume(
      downloadId: number,
      callback?: () => void,
    ): void;

    /**
     * Cancel a download. When `callback` is run, the download is cancelled, completed, interrupted or doesn't exist anymore.
     *
     * @param downloadId The id of the download to cancel.
     * @param callback Called when the cancel request is completed.
     */
    export function cancel(
      downloadId: number,
      callback?: () => void,
    ): void;

    /**
     * Retrieve an icon for the specified download. For new downloads, file icons are available after the {@link onCreated} event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, {@link runtime.lastError} will contain an error message.
     *
     * @param downloadId The identifier for the download.
     * @param options
     * @param callback A URL to an image that represents the download.
     */
    export function getFileIcon(
      downloadId: number,
      options: GetFileIconOptions,
      callback: (
        iconURL?: string,
      ) => void,
    ): void;

    /**
     * Retrieve an icon for the specified download. For new downloads, file icons are available after the {@link onCreated} event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, {@link runtime.lastError} will contain an error message.
     *
     * @param downloadId The identifier for the download.
     * @param callback A URL to an image that represents the download.
     */
    export function getFileIcon(
      downloadId: number,
      callback: (
        iconURL?: string,
      ) => void,
    ): void;

    /**
     * Open the downloaded file now if the {@link DownloadItem} is complete; otherwise returns an error through {@link runtime.lastError}. Requires the `"downloads.open"` permission in addition to the `"downloads"` permission. An {@link onChanged} event will fire when the item is opened for the first time.
     *
     * @param downloadId The identifier for the downloaded file.
     */
    export function open(
      downloadId: number,
    ): void;

    /**
     * Show the downloaded file in its folder in a file manager.
     *
     * @param downloadId The identifier for the downloaded file.
     */
    export function show(
      downloadId: number,
    ): void;

    /**
     * Show the default Downloads folder in a file manager.
     */
    export function showDefaultFolder(): void;

    /**
     * Erase matching {@link DownloadItem} from history without deleting the downloaded file. An {@link onErased} event will fire for each {@link DownloadItem} that matches `query`, then `callback` will be called.
     *
     * @param query
     * @param callback
     */
    export function erase(
      query: DownloadQuery,
      callback?: (
        erasedIds: number[],
      ) => void,
    ): void;

    /**
     * Remove the downloaded file if it exists and the {@link DownloadItem} is complete; otherwise return an error through {@link runtime.lastError}.
     *
     * @param downloadId
     * @param callback
     */
    export function removeFile(
      downloadId: number,
      callback?: () => void,
    ): void;

    /**
     * Prompt the user to accept a dangerous download. Can only be called from a visible context (tab, window, or page/browser action popup). Does not automatically accept dangerous downloads. If the download is accepted, then an {@link onChanged} event will fire, otherwise nothing will happen. When all the data is fetched into a temporary file and either the download is not dangerous or the danger has been accepted, then the temporary file is renamed to the target filename, the `state` changes to 'complete', and {@link onChanged} fires.
     *
     * @param downloadId The identifier for the {@link DownloadItem}.
     * @param callback Called when the danger prompt dialog closes.
     */
    export function acceptDanger(
      downloadId: number,
      callback?: () => void,
    ): void;

    /**
     * Enable or disable the gray shelf at the bottom of every window associated with the current browser profile. The shelf will be disabled as long as at least one extension has disabled it. Enabling the shelf while at least one other extension has disabled it will return an error through {@link runtime.lastError}. Requires the `"downloads.shelf"` permission in addition to the `"downloads"` permission.
     *
     * @param enabled
     */
    export function setShelfEnabled(
      enabled: boolean,
    ): void;

    export interface HeaderNameValuePair {

      /**
       * Name of the HTTP header.
       */
      name: string;

      /**
       * Value of the HTTP header.
       */
      value: string;
    }

    /**
     * uniquify
     *
     * To avoid duplication, the `filename` is changed to include a counter before the filename extension.
     *
     * overwrite
     *
     * The existing file will be overwritten with the new file.
     *
     * prompt
     *
     * The user will be prompted with a file chooser dialog.
     */
    export type FilenameConflictAction = "uniquify" | "overwrite" | "prompt";

    export interface FilenameSuggestion {

      /**
       * The {@link DownloadItem}'s new target {@link DownloadItem.filename}, as a path relative to the user's default Downloads directory, possibly containing subdirectories. Absolute paths, empty paths, and paths containing back-references ".." will be ignored. `filename` is ignored if there are any {@link onDeterminingFilename} listeners registered by any extensions.
       */
      filename: string;

      /**
       * The action to take if `filename` already exists.
       */
      conflictAction?: FilenameConflictAction;
    }

    export type HttpMethod = "GET" | "POST";

    export type InterruptReason = "FILE_FAILED" | "FILE_ACCESS_DENIED" | "FILE_NO_SPACE" | "FILE_NAME_TOO_LONG" | "FILE_TOO_LARGE" | "FILE_VIRUS_INFECTED" | "FILE_TRANSIENT_ERROR" | "FILE_BLOCKED" | "FILE_SECURITY_CHECK_FAILED" | "FILE_TOO_SHORT" | "FILE_HASH_MISMATCH" | "FILE_SAME_AS_SOURCE" | "NETWORK_FAILED" | "NETWORK_TIMEOUT" | "NETWORK_DISCONNECTED" | "NETWORK_SERVER_DOWN" | "NETWORK_INVALID_REQUEST" | "SERVER_FAILED" | "SERVER_NO_RANGE" | "SERVER_BAD_CONTENT" | "SERVER_UNAUTHORIZED" | "SERVER_CERT_PROBLEM" | "SERVER_FORBIDDEN" | "SERVER_UNREACHABLE" | "SERVER_CONTENT_LENGTH_MISMATCH" | "SERVER_CROSS_ORIGIN_REDIRECT" | "USER_CANCELED" | "USER_SHUTDOWN" | "CRASH";

    export interface DownloadOptions {

      /**
       * The URL to download.
       */
      url: string;

      /**
       * A file path relative to the Downloads directory to contain the downloaded file, possibly containing subdirectories. Absolute paths, empty paths, and paths containing back-references ".." will cause an error. {@link onDeterminingFilename} allows suggesting a filename after the file's MIME type and a tentative filename have been determined.
       */
      filename?: string;

      /**
       * The action to take if `filename` already exists.
       */
      conflictAction?: FilenameConflictAction;

      /**
       * Use a file-chooser to allow the user to select a filename regardless of whether `filename` is set or already exists.
       */
      saveAs?: boolean;

      /**
       * The HTTP method to use if the URL uses the HTTP\[S\] protocol.
       */
      method?: HttpMethod;

      /**
       * Extra HTTP headers to send with the request if the URL uses the HTTP\[s\] protocol. Each header is represented as a dictionary containing the keys `name` and either `value` or `binaryValue`, restricted to those allowed by XMLHttpRequest.
       */
      headers?: HeaderNameValuePair[];

      /**
       * Post body.
       */
      body?: string;
    }

    /**
     * file
     *
     * The download's filename is suspicious.
     *
     * url
     *
     * The download's URL is known to be malicious.
     *
     * content
     *
     * The downloaded file is known to be malicious.
     *
     * uncommon
     *
     * The download's URL is not commonly downloaded and could be dangerous.
     *
     * host
     *
     * The download came from a host known to distribute malicious binaries and is likely dangerous.
     *
     * unwanted
     *
     * The download is potentially unwanted or unsafe. E.g. it could make changes to browser or computer settings.
     *
     * safe
     *
     * The download presents no known danger to the user's computer.
     *
     * accepted
     *
     * The user has accepted the dangerous download.
     */
    export type DangerType = "file" | "url" | "content" | "uncommon" | "host" | "unwanted" | "safe" | "accepted";

    /**
     * in\_progress
     *
     * The download is currently receiving data from the server.
     *
     * interrupted
     *
     * An error broke the connection with the file host.
     *
     * complete
     *
     * The download completed successfully.
     */
    export type State = "in_progress" | "interrupted" | "complete";

    export interface DownloadItem {

      /**
       * An identifier that is persistent across browser sessions.
       */
      id: number;

      /**
       * The absolute URL that this download initiated from, before any redirects.
       */
      url: string;

      /**
       * The absolute URL that this download is being made from, after all redirects.
       *
       * @since Chrome 54
       */
      finalUrl: string;

      /**
       * Absolute URL.
       */
      referrer: string;

      /**
       * Absolute local path.
       */
      filename: string;

      /**
       * False if this download is recorded in the history, true if it is not recorded.
       */
      incognito: boolean;

      /**
       * Indication of whether this download is thought to be safe or known to be suspicious.
       */
      danger: DangerType;

      /**
       * The file's MIME type.
       */
      mime: string;

      /**
       * The time when the download began in ISO 8601 format. May be passed directly to the Date constructor: `chrome.downloads.search({}, function(items){items.forEach(function(item){console.log(new Date(item.startTime))})})`
       */
      startTime: string;

      /**
       * The time when the download ended in ISO 8601 format. May be passed directly to the Date constructor: `chrome.downloads.search({}, function(items){items.forEach(function(item){if (item.endTime) console.log(new Date(item.endTime))})})`
       */
      endTime?: string;

      /**
       * Estimated time when the download will complete in ISO 8601 format. May be passed directly to the Date constructor: `chrome.downloads.search({}, function(items){items.forEach(function(item){if (item.estimatedEndTime) console.log(new Date(item.estimatedEndTime))})})`
       */
      estimatedEndTime?: string;

      /**
       * Indicates whether the download is progressing, interrupted, or complete.
       */
      state: State;

      /**
       * True if the download has stopped reading data from the host, but kept the connection open.
       */
      paused: boolean;

      /**
       * True if the download is in progress and paused, or else if it is interrupted and can be resumed starting from where it was interrupted.
       */
      canResume: boolean;

      /**
       * Why the download was interrupted. Several kinds of HTTP errors may be grouped under one of the errors beginning with `SERVER_`. Errors relating to the network begin with `NETWORK_`, errors relating to the process of writing the file to the file system begin with `FILE_`, and interruptions initiated by the user begin with `USER_`.
       */
      error?: InterruptReason;

      /**
       * Number of bytes received so far from the host, without considering file compression.
       */
      bytesReceived: number;

      /**
       * Number of bytes in the whole file, without considering file compression, or -1 if unknown.
       */
      totalBytes: number;

      /**
       * Number of bytes in the whole file post-decompression, or -1 if unknown.
       */
      fileSize: number;

      /**
       * Whether the downloaded file still exists. This information may be out of date because Chrome does not automatically watch for file removal. Call {@link search}() in order to trigger the check for file existence. When the existence check completes, if the file has been deleted, then an {@link onChanged} event will fire. Note that {@link search}() does not wait for the existence check to finish before returning, so results from {@link search}() may not accurately reflect the file system. Also, {@link search}() may be called as often as necessary, but will not check for file existence any more frequently than once every 10 seconds.
       */
      exists: boolean;

      /**
       * The identifier for the extension that initiated this download if this download was initiated by an extension. Does not change once it is set.
       */
      byExtensionId?: string;

      /**
       * The localized name of the extension that initiated this download if this download was initiated by an extension. May change if the extension changes its name or if the user changes their locale.
       */
      byExtensionName?: string;
    }

    export interface DownloadQuery {

      /**
       * This array of search terms limits results to {@link DownloadItem} whose `filename` or `url` or `finalUrl` contain all of the search terms that do not begin with a dash '-' and none of the search terms that do begin with a dash.
       */
      query?: string[];

      /**
       * Limits results to {@link DownloadItem} that started before the given ms since the epoch.
       */
      startedBefore?: string;

      /**
       * Limits results to {@link DownloadItem} that started after the given ms since the epoch.
       */
      startedAfter?: string;

      /**
       * Limits results to {@link DownloadItem} that ended before the given ms since the epoch.
       */
      endedBefore?: string;

      /**
       * Limits results to {@link DownloadItem} that ended after the given ms since the epoch.
       */
      endedAfter?: string;

      /**
       * Limits results to {@link DownloadItem} whose `totalBytes` is greater than the given integer.
       */
      totalBytesGreater?: number;

      /**
       * Limits results to {@link DownloadItem} whose `totalBytes` is less than the given integer.
       */
      totalBytesLess?: number;

      /**
       * Limits results to {@link DownloadItem} whose `filename` matches the given regular expression.
       */
      filenameRegex?: string;

      /**
       * Limits results to {@link DownloadItem} whose `url` matches the given regular expression.
       */
      urlRegex?: string;

      /**
       * Limits results to {@link DownloadItem} whose `finalUrl` matches the given regular expression.
       *
       * @since Chrome 54
       */
      finalUrlRegex?: string;

      /**
       * The maximum number of matching {@link DownloadItem} returned. Defaults to 1000. Set to 0 in order to return all matching {@link DownloadItem}. See {@link search} for how to page through results.
       */
      limit?: number;

      /**
       * Set elements of this array to {@link DownloadItem} properties in order to sort search results. For example, setting `orderBy=['startTime']` sorts the {@link DownloadItem} by their start time in ascending order. To specify descending order, prefix with a hyphen: '-startTime'.
       */
      orderBy?: string[];

      /**
       * The `id` of the {@link DownloadItem} to query.
       */
      id?: number;

      /**
       * The absolute URL that this download initiated from, before any redirects.
       */
      url?: string;

      /**
       * The absolute URL that this download is being made from, after all redirects.
       *
       * @since Chrome 54
       */
      finalUrl?: string;

      /**
       * Absolute local path.
       */
      filename?: string;

      /**
       * Indication of whether this download is thought to be safe or known to be suspicious.
       */
      danger?: DangerType;

      /**
       * The file's MIME type.
       */
      mime?: string;

      /**
       * The time when the download began in ISO 8601 format.
       */
      startTime?: string;

      /**
       * The time when the download ended in ISO 8601 format.
       */
      endTime?: string;

      /**
       * Indicates whether the download is progressing, interrupted, or complete.
       */
      state?: State;

      /**
       * True if the download has stopped reading data from the host, but kept the connection open.
       */
      paused?: boolean;

      /**
       * Why a download was interrupted.
       */
      error?: InterruptReason;

      /**
       * Number of bytes received so far from the host, without considering file compression.
       */
      bytesReceived?: number;

      /**
       * Number of bytes in the whole file, without considering file compression, or -1 if unknown.
       */
      totalBytes?: number;

      /**
       * Number of bytes in the whole file post-decompression, or -1 if unknown.
       */
      fileSize?: number;

      /**
       * Whether the downloaded file exists;
       */
      exists?: boolean;
    }

    export interface StringDelta {

      previous?: string;

      current?: string;
    }

    export interface DoubleDelta {

      previous?: number;

      current?: number;
    }

    export interface BooleanDelta {

      previous?: boolean;

      current?: boolean;
    }

    export interface DownloadDelta {

      /**
       * The `id` of the {@link DownloadItem} that changed.
       */
      id: number;

      /**
       * The change in `url`, if any.
       */
      url?: StringDelta;

      /**
       * The change in `finalUrl`, if any.
       *
       * @since Chrome 54
       */
      finalUrl?: StringDelta;

      /**
       * The change in `filename`, if any.
       */
      filename?: StringDelta;

      /**
       * The change in `danger`, if any.
       */
      danger?: StringDelta;

      /**
       * The change in `mime`, if any.
       */
      mime?: StringDelta;

      /**
       * The change in `startTime`, if any.
       */
      startTime?: StringDelta;

      /**
       * The change in `endTime`, if any.
       */
      endTime?: StringDelta;

      /**
       * The change in `state`, if any.
       */
      state?: StringDelta;

      /**
       * The change in `canResume`, if any.
       */
      canResume?: BooleanDelta;

      /**
       * The change in `paused`, if any.
       */
      paused?: BooleanDelta;

      /**
       * The change in `error`, if any.
       */
      error?: StringDelta;

      /**
       * The change in `totalBytes`, if any.
       */
      totalBytes?: DoubleDelta;

      /**
       * The change in `fileSize`, if any.
       */
      fileSize?: DoubleDelta;

      /**
       * The change in `exists`, if any.
       */
      exists?: BooleanDelta;
    }

    export interface GetFileIconOptions {

      /**
       * The size of the returned icon. The icon will be square with dimensions size \* size pixels. The default and largest size for the icon is 32x32 pixels. The only supported sizes are 16 and 32. It is an error to specify any other size.
       */
      size?: 16 | 32;
    }

    /**
     * This event fires with the {@link DownloadItem} object when a download begins.
     */
    export const onCreated: events.Event<(
      downloadItem: DownloadItem,
    ) => void>;

    /**
     * Fires with the `downloadId` when a download is erased from history.
     */
    export const onErased: events.Event<(
      /**
       * The `id` of the {@link DownloadItem} that was erased.
       */
      downloadId: number,
    ) => void>;

    /**
     * When any of a {@link DownloadItem}'s properties except `bytesReceived` and `estimatedEndTime` changes, this event fires with the `downloadId` and an object containing the properties that changed.
     */
    export const onChanged: events.Event<(
      downloadDelta: DownloadDelta,
    ) => void>;

    /**
     * During the filename determination process, extensions will be given the opportunity to override the target {@link DownloadItem.filename}. Each extension may not register more than one listener for this event. Each listener must call `suggest` exactly once, either synchronously or asynchronously. If the listener calls `suggest` asynchronously, then it must return `true`. If the listener neither calls `suggest` synchronously nor returns `true`, then `suggest` will be called automatically. The {@link DownloadItem} will not complete until all listeners have called `suggest`. Listeners may call `suggest` without any arguments in order to allow the download to use `downloadItem.filename` for its filename, or pass a `suggestion` object to `suggest` in order to override the target filename. If more than one extension overrides the filename, then the last extension installed whose listener passes a `suggestion` object to `suggest` wins. In order to avoid confusion regarding which extension will win, users should not install extensions that may conflict. If the download is initiated by {@link download} and the target filename is known before the MIME type and tentative filename have been determined, pass `filename` to {@link download} instead.
     */
    export const onDeterminingFilename: events.Event<(
      downloadItem: DownloadItem,
      /**
       * @param suggestion
       */
      suggest: (
        suggestion?: FilenameSuggestion,
      ) => void,
    ) => void>;
  }

  /**
   * Use the `chrome.enterprise.deviceAttributes` API to read device attributes. Note: This API is only available to extensions force-installed by enterprise policy.
   *
   * @chrome-platform chromeos
   * @chrome-permission enterprise.deviceAttributes
   */
  export namespace enterprise.deviceAttributes {

    /**
     * Fetches the value of [the device identifier of the directory API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-chrome-devices), that is generated by the server and identifies the cloud record of the device for querying in the cloud directory API. If the current user is not affiliated, returns an empty string.
     *
     * @param callback Called with the device identifier of the directory API when received.
     */
    export function getDirectoryDeviceId(
      callback: (
        deviceId: string,
      ) => void,
    ): void;

    /**
     * Fetches the device's serial number. Please note the purpose of this API is to administrate the device (e.g. generating Certificate Sign Requests for device-wide certificates). This API may not be used for tracking devices without the consent of the device's administrator. If the current user is not affiliated, returns an empty string.
     *
     * @since Chrome 66
     * @param callback Called with the serial number of the device.
     */
    export function getDeviceSerialNumber(
      callback: (
        serialNumber: string,
      ) => void,
    ): void;

    /**
     * Fetches the administrator-annotated Asset Id. If the current user is not affiliated or no Asset Id has been set by the administrator, returns an empty string.
     *
     * @since Chrome 66
     * @param callback Called with the Asset ID of the device.
     */
    export function getDeviceAssetId(
      callback: (
        assetId: string,
      ) => void,
    ): void;

    /**
     * Fetches the administrator-annotated Location. If the current user is not affiliated or no Annotated Location has been set by the administrator, returns an empty string.
     *
     * @since Chrome 66
     * @param callback Called with the Annotated Location of the device.
     */
    export function getDeviceAnnotatedLocation(
      callback: (
        annotatedLocation: string,
      ) => void,
    ): void;

    /**
     * Fetches the device's hostname as set by DeviceHostnameTemplate policy. If the current user is not affiliated or no hostname has been set by the the enterprise policy, returns an empty string.
     *
     * @since Chrome 82
     * @param callback Called with hostname of the device.
     */
    export function getDeviceHostname(
      callback: (
        hostname: string,
      ) => void,
    ): void;
  }

  /**
   * Use the `chrome.enterprise.hardwarePlatform` API to get the manufacturer and model of the hardware platform where the browser runs. Note: This API is only available to extensions installed by enterprise policy.
   *
   * @chrome-permission enterprise.hardwarePlatform
   * @since Chrome 71
   */
  export namespace enterprise.hardwarePlatform {

    /**
     * Obtains the manufacturer and model for the hardware platform and, if the extension is authorized, returns it via `callback`.
     *
     * @param callback Called with the hardware platform info.
     */
    export function getHardwarePlatformInfo(
      callback: (
        info: HardwarePlatformInfo,
      ) => void,
    ): void;

    export interface HardwarePlatformInfo {

      model: string;

      manufacturer: string;
    }
  }

  /**
   * Use the `chrome.enterprise.networkingAttributes` API to read information about your current network. Note: This API is only available to extensions force-installed by enterprise policy.
   *
   * @chrome-platform chromeos
   * @chrome-permission enterprise.networkingAttributes
   * @since Chrome 85
   */
  export namespace enterprise.networkingAttributes {

    /**
     * Retrieves the network details of the device's default network. If the user is not affiliated or the device is not connected to a network, {@link runtime.lastError} will be set with a failure reason.
     *
     * @param callback Called with the device's default network's {@link NetworkDetails}.
     */
    export function getNetworkDetails(
      callback: (
        networkAddresses: NetworkDetails,
      ) => void,
    ): void;

    export interface NetworkDetails {

      /**
       * The device's MAC address.
       */
      macAddress: string;

      /**
       * The device's local IPv4 address (undefined if not configured).
       */
      ipv4?: string;

      /**
       * The device's local IPv6 address (undefined if not configured).
       */
      ipv6?: string;
    }
  }

  /**
   * Use the `chrome.enterprise.platformKeys` API to generate hardware-backed keys and to install certificates for these keys. The certificates will be managed by the platform and can be used for TLS authentication, network access or by other extension through {@link platformKeys chrome.platformKeys}.
   *
   * @chrome-platform chromeos
   * @chrome-permission enterprise.platformKeys
   * @chrome-disallow-service-workers
   */
  export namespace enterprise.platformKeys {

    /**
     * Returns the available Tokens. In a regular user's session the list will always contain the user's token with `id` `"user"`. If a system-wide TPM token is available, the returned list will also contain the system-wide token with `id` `"system"`. The system-wide token will be the same for all sessions on this device (device in the sense of e.g. a Chromebook).
     *
     * @param callback Invoked by `getTokens` with the list of available Tokens.
     */
    export function getTokens(
      callback: (
        /**
         * The list of available tokens.
         */
        tokens: Token[],
      ) => void,
    ): void;

    /**
     * Returns the list of all client certificates available from the given token. Can be used to check for the existence and expiration of client certificates that are usable for a certain authentication.
     *
     * @param tokenId The id of a Token returned by `getTokens`.
     * @param callback Called back with the list of the available certificates.
     */
    export function getCertificates(
      tokenId: string,
      callback: (
        /**
         * The list of certificates, each in DER encoding of a X.509 certificate.
         */
        certificates: ArrayBuffer[],
      ) => void,
    ): void;

    /**
     * Imports `certificate` to the given token if the certified key is already stored in this token. After a successful certification request, this function should be used to store the obtained certificate and to make it available to the operating system and browser for authentication.
     *
     * @param tokenId The id of a Token returned by `getTokens`.
     * @param certificate The DER encoding of a X.509 certificate.
     * @param callback Called back when this operation is finished.
     */
    export function importCertificate(
      tokenId: string,
      certificate: ArrayBuffer,
      callback?: () => void,
    ): void;

    /**
     * Removes `certificate` from the given token if present. Should be used to remove obsolete certificates so that they are not considered during authentication and do not clutter the certificate choice. Should be used to free storage in the certificate store.
     *
     * @param tokenId The id of a Token returned by `getTokens`.
     * @param certificate The DER encoding of a X.509 certificate.
     * @param callback Called back when this operation is finished.
     */
    export function removeCertificate(
      tokenId: string,
      certificate: ArrayBuffer,
      callback?: () => void,
    ): void;

    /**
     * Challenges a hardware-backed Enterprise Machine Key and emits the response as part of a remote attestation protocol. Only useful on Chrome OS and in conjunction with the Verified Access Web API which both issues challenges and verifies responses. A successful verification by the Verified Access Web API is a strong signal of all of the following: \* The current device is a legitimate Chrome OS device. \* The current device is managed by the domain specified during verification. \* The current signed-in user is managed by the domain specified during verification. \* The current device state complies with enterprise device policy. For example, a policy may specify that the device must not be in developer mode. \* Any device identity emitted by the verification is tightly bound to the hardware of the current device. This function is highly restricted and will fail if the current device is not managed, the current user is not managed, or if this operation has not explicitly been enabled for the caller by enterprise device policy. The Enterprise Machine Key does not reside in the `"system"` token and is not accessible by any other API.
     *
     * @param challenge A challenge as emitted by the Verified Access Web API.
     * @param registerKey If set, the current Enterprise Machine Key is registered with the `"system"` token and relinquishes the Enterprise Machine Key role. The key can then be associated with a certificate and used like any other signing key. This key is 2048-bit RSA. Subsequent calls to this function will then generate a new Enterprise Machine Key.
     * @param callback Called back with the challenge response.
     */
    export function challengeMachineKey(
      challenge: ArrayBuffer,
      registerKey: boolean,
      callback: (
        /**
         * The challenge response.
         */
        response: ArrayBuffer,
      ) => void,
    ): void;

    /**
     * Challenges a hardware-backed Enterprise Machine Key and emits the response as part of a remote attestation protocol. Only useful on Chrome OS and in conjunction with the Verified Access Web API which both issues challenges and verifies responses. A successful verification by the Verified Access Web API is a strong signal of all of the following: \* The current device is a legitimate Chrome OS device. \* The current device is managed by the domain specified during verification. \* The current signed-in user is managed by the domain specified during verification. \* The current device state complies with enterprise device policy. For example, a policy may specify that the device must not be in developer mode. \* Any device identity emitted by the verification is tightly bound to the hardware of the current device. This function is highly restricted and will fail if the current device is not managed, the current user is not managed, or if this operation has not explicitly been enabled for the caller by enterprise device policy. The Enterprise Machine Key does not reside in the `"system"` token and is not accessible by any other API.
     *
     * @param challenge A challenge as emitted by the Verified Access Web API.
     * @param callback Called back with the challenge response.
     */
    export function challengeMachineKey(
      challenge: ArrayBuffer,
      callback: (
        /**
         * The challenge response.
         */
        response: ArrayBuffer,
      ) => void,
    ): void;

    /**
     * Challenges a hardware-backed Enterprise User Key and emits the response as part of a remote attestation protocol. Only useful on Chrome OS and in conjunction with the Verified Access Web API which both issues challenges and verifies responses. A successful verification by the Verified Access Web API is a strong signal of all of the following: \* The current device is a legitimate Chrome OS device. \* The current device is managed by the domain specified during verification. \* The current signed-in user is managed by the domain specified during verification. \* The current device state complies with enterprise user policy. For example, a policy may specify that the device must not be in developer mode. \* The public key emitted by the verification is tightly bound to the hardware of the current device and to the current signed-in user. This function is highly restricted and will fail if the current device is not managed, the current user is not managed, or if this operation has not explicitly been enabled for the caller by enterprise user policy. The Enterprise User Key does not reside in the `"user"` token and is not accessible by any other API.
     *
     * @param challenge A challenge as emitted by the Verified Access Web API.
     * @param registerKey If set, the current Enterprise User Key is registered with the `"user"` token and relinquishes the Enterprise User Key role. The key can then be associated with a certificate and used like any other signing key. This key is 2048-bit RSA. Subsequent calls to this function will then generate a new Enterprise User Key.
     * @param callback Called back with the challenge response.
     */
    export function challengeUserKey(
      challenge: ArrayBuffer,
      registerKey: boolean,
      callback: (
        /**
         * The challenge response.
         */
        response: ArrayBuffer,
      ) => void,
    ): void;

    export interface Token {

      /**
       * Uniquely identifies this `Token`.
       *
       * Static IDs are `"user"` and `"system"`, referring to the platform's user-specific and the system-wide hardware token, respectively. Any other tokens (with other identifiers) might be returned by {@link enterprise.platformKeys.getTokens}.
       */
      id: string;

      /**
       * Implements the WebCrypto's [SubtleCrypto](https://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface) interface. The cryptographic operations, including key generation, are hardware-backed.
       *
       * Only non-extractable RSASSA-PKCS1-V1\_5 keys with `modulusLength` up to 2048 and ECDSA with `namedCurve` P-256 can be generated. Each key can be used for signing data at most once.
       *
       * Keys generated on a specific `Token` cannot be used with any other Tokens, nor can they be used with `window.crypto.subtle`. Equally, `Key` objects created with `window.crypto.subtle` cannot be used with this interface.
       */
      subtleCrypto: SubtleCrypto;
    }
  }

  /**
   * The `chrome.events` namespace contains common types used by APIs dispatching events to notify you when something interesting happens.
   */
  export namespace events {

    /**
     * Description of a declarative rule for handling events.
     */
    export interface Rule<C = any, A = any> {

      /**
       * Optional identifier that allows referencing this rule.
       */
      id?: string;

      /**
       * Tags can be used to annotate rules and perform operations on sets of rules.
       */
      tags?: string[];

      /**
       * List of conditions that can trigger the actions.
       */
      conditions: C[];

      /**
       * List of actions that are triggered if one of the conditions is fulfilled.
       */
      actions: A[];

      /**
       * Optional priority of this rule. Defaults to 100.
       */
      priority?: number;
    }

    /**
     * An object which allows the addition and removal of listeners for a Chrome event.
     */
    export interface Event<H, C = void, A = void> {

      /**
       * Registers an event listener _callback_ to an event.
       *
       * @param callback Called when an event occurs. The parameters of this function depend on the type of event.
       */
      addListener(
        callback: H,
      ): void;

      /**
       * Deregisters an event listener _callback_ from an event.
       *
       * @param callback Listener that shall be unregistered.
       */
      removeListener(
        callback: H,
      ): void;

      /**
       * @param callback Listener whose registration status shall be tested.
       * @returns True if _callback_ is registered to the event.
       */
      hasListener(
        callback: H,
      ): boolean;

      /**
       * @returns True if any event listeners are registered to the event.
       */
      hasListeners(): boolean;

      /**
       * Registers rules to handle events.
       *
       * @param rules Rules to be registered. These do not replace previously registered rules.
       * @param callback Called with registered rules.
       */
      addRules(
        rules: Rule<C, A>[],
        callback?: (
          /**
           * Rules that were registered, the optional parameters are filled with values.
           */
          rules: Rule<C, A>[],
        ) => void,
      ): void;

      /**
       * Returns currently registered rules.
       *
       * @param ruleIdentifiers If an array is passed, only rules with identifiers contained in this array are returned.
       * @param callback Called with registered rules.
       */
      getRules(
        ruleIdentifiers: string[],
        callback: (
          /**
           * Rules that were registered, the optional parameters are filled with values.
           */
          rules: Rule<C, A>[],
        ) => void,
      ): void;

      /**
       * Returns currently registered rules.
       *
       * @param callback Called with registered rules.
       */
      getRules(
        callback: (
          /**
           * Rules that were registered, the optional parameters are filled with values.
           */
          rules: Rule<C, A>[],
        ) => void,
      ): void;

      /**
       * Unregisters currently registered rules.
       *
       * @param ruleIdentifiers If an array is passed, only rules with identifiers contained in this array are unregistered.
       * @param callback Called when rules were unregistered.
       */
      removeRules(
        ruleIdentifiers?: string[],
        callback?: () => void,
      ): void;
    }

    /**
     * Filters URLs for various criteria. See [event filtering](https://developer.chrome.com/docs/extensions/reference/events/#filtered). All criteria are case sensitive.
     */
    export interface UrlFilter {

      /**
       * Matches if the host name of the URL contains a specified string. To test whether a host name component has a prefix 'foo', use hostContains: '.foo'. This matches 'www.foobar.com' and 'foo.com', because an implicit dot is added at the beginning of the host name. Similarly, hostContains can be used to match against component suffix ('foo.') and to exactly match against components ('.foo.'). Suffix- and exact-matching for the last components need to be done separately using hostSuffix, because no implicit dot is added at the end of the host name.
       */
      hostContains?: string;

      /**
       * Matches if the host name of the URL is equal to a specified string.
       */
      hostEquals?: string;

      /**
       * Matches if the host name of the URL starts with a specified string.
       */
      hostPrefix?: string;

      /**
       * Matches if the host name of the URL ends with a specified string.
       */
      hostSuffix?: string;

      /**
       * Matches if the path segment of the URL contains a specified string.
       */
      pathContains?: string;

      /**
       * Matches if the path segment of the URL is equal to a specified string.
       */
      pathEquals?: string;

      /**
       * Matches if the path segment of the URL starts with a specified string.
       */
      pathPrefix?: string;

      /**
       * Matches if the path segment of the URL ends with a specified string.
       */
      pathSuffix?: string;

      /**
       * Matches if the query segment of the URL contains a specified string.
       */
      queryContains?: string;

      /**
       * Matches if the query segment of the URL is equal to a specified string.
       */
      queryEquals?: string;

      /**
       * Matches if the query segment of the URL starts with a specified string.
       */
      queryPrefix?: string;

      /**
       * Matches if the query segment of the URL ends with a specified string.
       */
      querySuffix?: string;

      /**
       * Matches if the URL (without fragment identifier) contains a specified string. Port numbers are stripped from the URL if they match the default port number.
       */
      urlContains?: string;

      /**
       * Matches if the URL (without fragment identifier) is equal to a specified string. Port numbers are stripped from the URL if they match the default port number.
       */
      urlEquals?: string;

      /**
       * Matches if the URL (without fragment identifier) matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt).
       */
      urlMatches?: string;

      /**
       * Matches if the URL without query segment and fragment identifier matches a specified regular expression. Port numbers are stripped from the URL if they match the default port number. The regular expressions use the [RE2 syntax](https://github.com/google/re2/blob/master/doc/syntax.txt).
       */
      originAndPathMatches?: string;

      /**
       * Matches if the URL (without fragment identifier) starts with a specified string. Port numbers are stripped from the URL if they match the default port number.
       */
      urlPrefix?: string;

      /**
       * Matches if the URL (without fragment identifier) ends with a specified string. Port numbers are stripped from the URL if they match the default port number.
       */
      urlSuffix?: string;

      /**
       * Matches if the scheme of the URL is equal to any of the schemes specified in the array.
       */
      schemes?: string[];

      /**
       * Matches if the port of the URL is contained in any of the specified port lists. For example `[80, 443, [1000, 1200]]` matches all requests on port 80, 443 and in the range 1000-1200.
       */
      ports?: (number | number[])[];
    }
  }

  /**
   * The `chrome.extension` API has utilities that can be used by any extension page. It includes support for exchanging messages between an extension and its content scripts or between extensions, as described in detail in [Message Passing](https://developer.chrome.com/docs/extensions/messaging).
   */
  export namespace extension {

    /**
     * True for content scripts running inside incognito tabs, and for extension pages running inside an incognito process. The latter only applies to extensions with 'split' incognito\_behavior.
     */
    export let inIncognitoContext: boolean | undefined;

    /**
     * Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension.
     *
     * @chrome-disallow-service-workers
     * @param fetchProperties
     * @returns Array of global objects
     */
    export function getViews(
      fetchProperties?: {
        /**
         * The type of view to get. If omitted, returns all views (including background pages and tabs). Valid values: 'tab', 'notification', 'popup'.
         */
        type?: ViewType,

        /**
         * The window to restrict the search to. If omitted, returns all views.
         */
        windowId?: number,

        /**
         * Find a view according to a tab id. If this field is omitted, returns all views.
         *
         * @since Chrome 54
         */
        tabId?: number,
      },
    ): Window[];

    /**
     * Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page.
     *
     * @chrome-disallow-service-workers
     */
    export function getBackgroundPage(): Window;

    /**
     * Retrieves the state of the extension's access to Incognito-mode. This corresponds to the user-controlled per-extension 'Allowed in Incognito' setting accessible via the chrome://extensions page.
     *
     * @param callback
     */
    export function isAllowedIncognitoAccess(
      callback: (
        /**
         * True if the extension has access to Incognito mode, false otherwise.
         */
        isAllowedAccess: boolean,
      ) => void,
    ): void;

    /**
     * Retrieves the state of the extension's access to the 'file://' scheme. This corresponds to the user-controlled per-extension 'Allow access to File URLs' setting accessible via the chrome://extensions page.
     *
     * @param callback
     */
    export function isAllowedFileSchemeAccess(
      callback: (
        /**
         * True if the extension can access the 'file://' scheme, false otherwise.
         */
        isAllowedAccess: boolean,
      ) => void,
    ): void;

    /**
     * Sets the value of the ap CGI parameter used in the extension's update URL. This value is ignored for extensions that are hosted in the Chrome Extension Gallery.
     *
     * @param data
     */
    export function setUpdateUrlData(
      data: string,
    ): void;

    /**
     * The type of extension view.
     */
    export type ViewType = "tab" | "popup";
  }

  /**
   * Schemas for structured manifest entries
   */
  export namespace extensionsManifestTypes {

    /**
     * This API provides programmatic access to the user interface elements of Chrome. This includes everything in the web view, and optionally Chrome's full user interface.
     *
     * @since Chrome 67
     */
    export type automation = boolean | {
      /**
       * Whether to request permission to the whole ChromeOS desktop. If granted, this gives the extension access to every aspect of the desktop, and every site and app. If this permission is requested, all other permissions are implicitly included and do not need to be requested separately.
       */
      desktop?: boolean,

      /**
       * A list of URL patterns for which this extension may request an automation tree. If not specified, automation permission will be granted for the sites for which the extension has a [host permission](https://developer.chrome.com/docs/extensions/declare_permissions#host-permissions) or [activeTab permission](https://developer.chrome.com/docs/extensions/declare_permissions#activeTab)).
       */
      matches?: string[],

      /**
       * Whether the extension is allowed interactive access (true) or read-only access (false; default) to the automation tree.
       */
      interact?: boolean,
    };

    /**
     * The `content_capabilities` manifest entry allows an extension to grant certain additional capabilities to web contents whose locations match a given set of URL patterns.
     */
    export interface ContentCapabilities {

      /**
       * The set of URL patterns to match against. If any of the given patterns match a URL, its contents will be granted the specified capabilities.
       */
      matches: string[];

      /**
       * The set of capabilities to grant matched contents. This is currently limited to `clipboardRead`, `clipboardWrite`, and `unlimitedStorage`.
       */
      permissions: string[];
    }

    export interface ExternallyConnectable {

      /**
       * The IDs of extensions or apps that are allowed to connect. If left empty or unspecified, no extensions or apps can connect.
       *
       * The wildcard `"*"` will allow all extensions and apps to connect.
       */
      ids?: string[];

      /**
       * The URL patterns for _web pages_ that are allowed to connect. _This does not affect content scripts._ If left empty or unspecified, no web pages can connect.
       *
       * Patterns cannot include wildcard domains nor subdomains of [(effective) top level domains](https://publicsuffix.org/list/); `*://google.com/*` and `http://*.chromium.org/*` are valid, while `<all_urls>`, `http://*\/*`, `*://*.com/*`, and even `http://*.appspot.com/*` are not.
       */
      matches?: string[];

      /**
       * If `true`, messages sent via {@link runtime.connect} or {@link runtime.sendMessage} will set {@link runtime.MessageSender.tlsChannelId} if those methods request it to be. If `false`, {@link runtime.MessageSender.tlsChannelId} will never be set under any circumstance.
       */
      accepts_tls_channel_id?: boolean;
    }

    /**
     * The `options_ui` manifest property declares how the options page should be displayed.
     */
    export interface OptionsUI {

      /**
       * The path to your options page, relative to your extension's root.
       */
      page: string;

      /**
       * If `true`, a Chrome user agent stylesheet will be applied to your options page. The default value is `false`. We do not recommend you enable it as it no longer results in a consistent UI with Chrome. This option will be removed in Manifest V3.
       */
      chrome_style?: boolean;

      /**
       * If `true`, your extension's options page will be opened in a new tab rather than embedded in _chrome://extensions_. The default is `false`, and we recommend that you don't change it.
       *
       * **This is only useful to delay the inevitable deprecation of the old options UI!** It will be removed soon, so try not to use it. It will break.
       */
      open_in_tab?: boolean;
    }

    /**
     * A single string or a list of strings representing host:port patterns.
     */
    export type SocketHostPatterns = string | string[];

    /**
     * The `sockets` manifest property declares which sockets operations an app can issue.
     */
    export interface sockets {

      /**
       * The `udp` manifest property declares which sockets.udp operations an app can issue.
       */
      udp?: {
        /**
         * The host:port pattern for `bind` operations.
         */
        bind?: SocketHostPatterns,

        /**
         * The host:port pattern for `send` operations.
         */
        send?: SocketHostPatterns,

        /**
         * The host:port pattern for `joinGroup` operations.
         */
        multicastMembership?: SocketHostPatterns,
      };

      /**
       * The `tcp` manifest property declares which sockets.tcp operations an app can issue.
       */
      tcp?: {
        /**
         * The host:port pattern for `connect` operations.
         */
        connect?: SocketHostPatterns,
      };

      /**
       * The `tcpServer` manifest property declares which sockets.tcpServer operations an app can issue.
       */
      tcpServer?: {
        /**
         * The host:port pattern for `listen` operations.
         */
        listen?: SocketHostPatterns,
      };
    }

    /**
     * The `bluetooth` manifest property give permission to an app to use the {@link bluetooth} API. A list of UUIDs can be optionally specified to enable communication with devices.
     */
    export interface bluetooth {

      /**
       * The `uuids` manifest property declares the list of protocols, profiles and services that an app can communicate using.
       */
      uuids?: string[];

      /**
       * If `true`, gives permission to an app to use the {@link bluetoothSocket} API
       */
      socket?: boolean;

      /**
       * If `true`, gives permission to an app to use the {@link bluetoothLowEnergy} API
       */
      low_energy?: boolean;

      /**
       * If `true`, gives permission to an app to use the advertisement functions in the {@link bluetoothLowEnergy} API
       */
      peripheral?: boolean;
    }

    /**
     * The `usb_printers` manifest property lists the USB printers supported by an app implementing the {@link printerProvider} API.
     */
    export interface UsbPrinters {

      /**
       * A list of {@link usb.DeviceFilter USB device filters} matching supported devices. A device only needs to match one of the provided filters. A `vendorId` is required and only one of `productId` or `interfaceClass` may be provided.
       */
      filters: {
        /**
         * USB vendor ID of matching devices
         */
        vendorId: number,

        /**
         * USB product ID of matching devices
         */
        productId?: number,

        /**
         * USB interface class implemented by any interface of a matching device.
         */
        interfaceClass?: number,

        /**
         * USB interface sub-class implemented by the interface matching {@link interfaceClass}.
         */
        interfaceSubclass?: number,

        /**
         * USB interface protocol implemented by the interface matching {@link interfaceClass} and {@link interfaceSubclass}.
         */
        interfaceProtocol?: number,
      }[];
    }

    /**
     * The `kiosk_secondary_apps` manifest property lists the secondary kiosk apps to be deployed by the primary kiosk app.
     */
    export type KioskSecondaryApps = {
      /**
       * ID of secondary kiosk app
       */
      id: string,

      /**
       * Whether the secondary app should be enabled when kiosk app is launched. If true, the app will be enabled before the kiosk app launch; if false the app will be disabled before the kiosk app launch; if not set, the app's enabled state will not be changed during the kiosk app launch. The ${ref:management} API can be used to later change the secondary app state.
       *
       * @since Chrome 66
       */
      enabled_on_launch?: boolean,
    }[];
  }

  /**
   * The `chrome.extensionTypes` API contains type declarations for Chrome extensions.
   */
  export namespace extensionTypes {

    /**
     * The format of an image.
     */
    export type ImageFormat = "jpeg" | "png";

    /**
     * Details about the format and quality of an image.
     */
    export interface ImageDetails {

      /**
       * The format of the resulting image. Default is `"jpeg"`.
       */
      format?: ImageFormat;

      /**
       * When format is `"jpeg"`, controls the quality of the resulting image. This value is ignored for PNG images. As quality is decreased, the resulting image will have more visual artifacts, and the number of bytes needed to store it will decrease.
       */
      quality?: number;
    }

    /**
     * The soonest that the JavaScript or CSS will be injected into the tab.
     */
    export type RunAt = "document_start" | "document_end" | "document_idle";

    /**
     * The [origin](https://www.w3.org/TR/css3-cascade/#cascading-origins) of injected CSS.
     *
     * @since Chrome 66
     */
    export type CSSOrigin = "author" | "user";

    /**
     * Details of the script or CSS to inject. Either the code or the file property must be set, but both may not be set at the same time.
     */
    export interface InjectDetails {

      /**
       * JavaScript or CSS code to inject.
       *
       * **Warning:**
       * Be careful using the `code` parameter. Incorrect use of it may open your extension to [cross site scripting](https://en.wikipedia.org/wiki/Cross-site_scripting) attacks.
       */
      code?: string;

      /**
       * JavaScript or CSS file to inject.
       */
      file?: string;

      /**
       * If allFrames is `true`, implies that the JavaScript or CSS should be injected into all frames of current page. By default, it's `false` and is only injected into the top frame. If `true` and `frameId` is set, then the code is inserted in the selected frame and all of its child frames.
       */
      allFrames?: boolean;

      /**
       * The [frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) where the script or CSS should be injected. Defaults to 0 (the top-level frame).
       */
      frameId?: number;

      /**
       * If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is `false`.
       */
      matchAboutBlank?: boolean;

      /**
       * The soonest that the JavaScript or CSS will be injected into the tab. Defaults to "document\_idle".
       */
      runAt?: RunAt;

      /**
       * The [origin](https://www.w3.org/TR/css3-cascade/#cascading-origins) of the CSS to inject. This may only be specified for CSS, not JavaScript. Defaults to `"author"`.
       *
       * @since Chrome 66
       */
      cssOrigin?: CSSOrigin;
    }

    /**
     * Details of the CSS to remove. Either the code or the file property must be set, but both may not be set at the same time.
     *
     * @since Chrome 87
     */
    export interface DeleteInjectionDetails {

      /**
       * CSS code to remove.
       */
      code?: string;

      /**
       * CSS file to remove.
       */
      file?: string;

      /**
       * If allFrames is `true`, implies that the CSS should be removed from all frames of current page. By default, it's `false` and is only removed from the top frame. If `true` and `frameId` is set, then the code is removed from the selected frame and all of its child frames.
       */
      allFrames?: boolean;

      /**
       * The [frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) from where the CSS should be removed. Defaults to 0 (the top-level frame).
       */
      frameId?: number;

      /**
       * If matchAboutBlank is true, then the code is also removed from about:blank and about:srcdoc frames if your extension has access to its parent document. By default it is `false`.
       */
      matchAboutBlank?: boolean;

      /**
       * The [origin](https://www.w3.org/TR/css3-cascade/#cascading-origins) of the CSS to remove. Defaults to `"author"`.
       */
      cssOrigin?: CSSOrigin;
    }
  }

  /**
   * Use the `chrome.fileBrowserHandler` API to extend the Chrome OS file browser. For example, you can use this API to enable users to upload files to your website.
   *
   * @chrome-platform chromeos
   * @chrome-permission fileBrowserHandler
   * @chrome-disallow-service-workers
   */
  export namespace fileBrowserHandler {

    /**
     * Prompts user to select file path under which file should be saved. When the file is selected, file access permission required to use the file (read, write and create) are granted to the caller. The file will not actually get created during the function call, so function caller must ensure its existence before using it. The function has to be invoked with a user gesture.
     *
     * @param selectionParams Parameters that will be used while selecting the file.
     * @param callback Function called upon completion.
     */
    export function selectFile(
      selectionParams: {
        /**
         * Suggested name for the file.
         */
        suggestedName: string,

        /**
         * List of file extensions that the selected file can have. The list is also used to specify what files to be shown in the select file dialog. Files with the listed extensions are only shown in the dialog. Extensions should not include the leading '.'. Example: \['jpg', 'png'\]
         */
        allowedFileExtensions?: string[],
      },
      callback: (
        /**
         * Result of the method.
         */
        result: {
          /**
           * Whether the file has been selected.
           */
          success: boolean,

          /**
           * Selected file entry. It will be null if a file hasn't been selected.
           */
          entry?: {[name: string]: any},
        },
      ) => void,
    ): void;

    /**
     * Event details payload for fileBrowserHandler.onExecute event.
     */
    export interface FileHandlerExecuteEventDetails {

      /**
       * Array of Entry instances representing files that are targets of this action (selected in ChromeOS file browser).
       */
      entries: any[];

      /**
       * The ID of the tab that raised this event. Tab IDs are unique within a browser session.
       */
      tab_id?: number;
    }

    /**
     * Fired when file system action is executed from ChromeOS file browser.
     */
    export const onExecute: events.Event<(
      /**
       * File browser action id as specified in the listener component's manifest.
       */
      id: string,

      /**
       * File handler execute event details.
       */
      details: FileHandlerExecuteEventDetails,
    ) => void>;
  }

  /**
   * Use the `chrome.fileSystemProvider` API to create file systems, that can be accessible from the file manager on Chrome OS.
   *
   * @chrome-platform chromeos
   * @chrome-permission fileSystemProvider
   * @chrome-disallow-service-workers
   */
  export namespace fileSystemProvider {

    /**
     * Mounts a file system with the given `fileSystemId` and `displayName`. `displayName` will be shown in the left panel of the Files app. `displayName` can contain any characters including '/', but cannot be an empty string. `displayName` must be descriptive but doesn't have to be unique. The `fileSystemId` must not be an empty string.
     *
     * Depending on the type of the file system being mounted, the `source` option must be set appropriately.
     *
     * In case of an error, {@link runtime.lastError} will be set with a corresponding error code.
     *
     * @param options
     * @param callback A generic result callback to indicate success or failure.
     */
    export function mount(
      options: MountOptions,
      callback?: () => void,
    ): void;

    /**
     * Unmounts a file system with the given `fileSystemId`. It must be called after {@link onUnmountRequested} is invoked. Also, the providing extension can decide to perform unmounting if not requested (eg. in case of lost connection, or a file error).
     *
     * In case of an error, {@link runtime.lastError} will be set with a corresponding error code.
     *
     * @param options
     * @param callback A generic result callback to indicate success or failure.
     */
    export function unmount(
      options: UnmountOptions,
      callback?: () => void,
    ): void;

    /**
     * Returns all file systems mounted by the extension.
     *
     * @param callback Callback to receive the result of {@link getAll} function.
     */
    export function getAll(
      callback: (
        fileSystems: FileSystemInfo[],
      ) => void,
    ): void;

    /**
     * Returns information about a file system with the passed `fileSystemId`.
     *
     * @param fileSystemId
     * @param callback Callback to receive the result of {@link get} function.
     */
    export function get(
      fileSystemId: string,
      callback: (
        fileSystem: FileSystemInfo,
      ) => void,
    ): void;

    /**
     * Notifies about changes in the watched directory at `observedPath` in `recursive` mode. If the file system is mounted with `supportsNofityTag`, then `tag` must be provided, and all changes since the last notification always reported, even if the system was shutdown. The last tag can be obtained with {@link getAll}.
     *
     * To use, the `file_system_provider.notify` manifest option must be set to true.
     *
     * Value of `tag` can be any string which is unique per call, so it's possible to identify the last registered notification. Eg. if the providing extension starts after a reboot, and the last registered notification's tag is equal to "123", then it should call {@link notify} for all changes which happened since the change tagged as "123". It cannot be an empty string.
     *
     * Not all providers are able to provide a tag, but if the file system has a changelog, then the tag can be eg. a change number, or a revision number.
     *
     * Note that if a parent directory is removed, then all descendant entries are also removed, and if they are watched, then the API must be notified about the fact. Also, if a directory is renamed, then all descendant entries are in fact removed, as there is no entry under their original paths anymore.
     *
     * In case of an error, {@link runtime.lastError} will be set will a corresponding error code.
     *
     * @param options
     * @param callback A generic result callback to indicate success or failure.
     */
    export function notify(
      options: NotifyOptions,
      callback?: () => void,
    ): void;

    /**
     * Error codes used by providing extensions in response to requests as well as in case of errors when calling methods of the API. For success, `"OK"` must be used.
     */
    export type ProviderError = "OK" | "FAILED" | "IN_USE" | "EXISTS" | "NOT_FOUND" | "ACCESS_DENIED" | "TOO_MANY_OPENED" | "NO_MEMORY" | "NO_SPACE" | "NOT_A_DIRECTORY" | "INVALID_OPERATION" | "SECURITY" | "ABORT" | "NOT_A_FILE" | "NOT_EMPTY" | "INVALID_URL" | "IO";

    /**
     * Mode of opening a file. Used by {@link onOpenFileRequested}.
     */
    export type OpenFileMode = "READ" | "WRITE";

    /**
     * Type of a change detected on the observed directory.
     */
    export type ChangeType = "CHANGED" | "DELETED";

    /**
     * List of common actions. `"SHARE"` is for sharing files with others. `"SAVE_FOR_OFFLINE"` for pinning (saving for offline access). `"OFFLINE_NOT_NECESSARY"` for notifying that the file doesn't need to be stored for offline access anymore. Used by {@link onGetActionsRequested} and {@link onExecuteActionRequested}.
     */
    export type CommonActionId = "SAVE_FOR_OFFLINE" | "OFFLINE_NOT_NECESSARY" | "SHARE";

    export interface EntryMetadata {

      /**
       * True if it is a directory. Must be provided if requested in `options`.
       */
      isDirectory?: boolean;

      /**
       * Name of this entry (not full path name). Must not contain '/'. For root it must be empty. Must be provided if requested in `options`.
       */
      name?: string;

      /**
       * File size in bytes. Must be provided if requested in `options`.
       */
      size?: number;

      /**
       * The last modified time of this entry. Must be provided if requested in `options`.
       */
      modificationTime?: Date;

      /**
       * Mime type for the entry. Always optional, but should be provided if requested in `options`.
       */
      mimeType?: string;

      /**
       * Thumbnail image as a data URI in either PNG, JPEG or WEBP format, at most 32 KB in size. Optional, but can be provided only when explicitly requested by the {@link onGetMetadataRequested} event.
       */
      thumbnail?: string;
    }

    export interface Watcher {

      /**
       * The path of the entry being observed.
       */
      entryPath: string;

      /**
       * Whether watching should include all child entries recursively. It can be true for directories only.
       */
      recursive: boolean;

      /**
       * Tag used by the last notification for the watcher.
       */
      lastTag?: string;
    }

    export interface OpenedFile {

      /**
       * A request ID to be be used by consecutive read/write and close requests.
       */
      openRequestId: number;

      /**
       * The path of the opened file.
       */
      filePath: string;

      /**
       * Whether the file was opened for reading or writing.
       */
      mode: OpenFileMode;
    }

    export interface FileSystemInfo {

      /**
       * The identifier of the file system.
       */
      fileSystemId: string;

      /**
       * A human-readable name for the file system.
       */
      displayName: string;

      /**
       * Whether the file system supports operations which may change contents of the file system (such as creating, deleting or writing to files).
       */
      writable: boolean;

      /**
       * The maximum number of files that can be opened at once. If 0, then not limited.
       */
      openedFilesLimit: number;

      /**
       * List of currently opened files.
       */
      openedFiles: OpenedFile[];

      /**
       * Whether the file system supports the `tag` field for observing directories.
       */
      supportsNotifyTag?: boolean;

      /**
       * List of watchers.
       */
      watchers: Watcher[];
    }

    export interface MountOptions {

      /**
       * The string indentifier of the file system. Must be unique per each extension.
       */
      fileSystemId: string;

      /**
       * A human-readable name for the file system.
       */
      displayName: string;

      /**
       * Whether the file system supports operations which may change contents of the file system (such as creating, deleting or writing to files).
       */
      writable?: boolean;

      /**
       * The maximum number of files that can be opened at once. If not specified, or 0, then not limited.
       */
      openedFilesLimit?: number;

      /**
       * Whether the file system supports the `tag` field for observed directories.
       */
      supportsNotifyTag?: boolean;

      /**
       * Whether the framework should resume the file system at the next sign-in session. True by default.
       *
       * @since Chrome 64
       */
      persistent?: boolean;
    }

    export interface UnmountOptions {

      /**
       * The identifier of the file system to be unmounted.
       */
      fileSystemId: string;
    }

    export interface UnmountRequestedOptions {

      /**
       * The identifier of the file system to be unmounted.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;
    }

    export interface GetMetadataRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the entry to fetch metadata about.
       */
      entryPath: string;

      /**
       * Set to `true` if `is_directory` value is requested.
       */
      isDirectory: boolean;

      /**
       * Set to `true` if `name` value is requested.
       */
      name: boolean;

      /**
       * Set to `true` if `size` value is requested.
       */
      size: boolean;

      /**
       * Set to `true` if `modificationTime` value is requested.
       */
      modificationTime: boolean;

      /**
       * Set to `true` if `mimeType` value is requested.
       */
      mimeType: boolean;

      /**
       * Set to `true` if the thumbnail is requested.
       */
      thumbnail: boolean;
    }

    export interface GetActionsRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * List of paths of entries for the list of actions.
       */
      entryPaths: string[];
    }

    export interface ReadDirectoryRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the directory which contents are requested.
       */
      directoryPath: string;

      /**
       * Set to `true` if `is_directory` value is requested.
       */
      isDirectory: boolean;

      /**
       * Set to `true` if `name` value is requested.
       */
      name: boolean;

      /**
       * Set to `true` if `size` value is requested.
       */
      size: boolean;

      /**
       * Set to `true` if `modificationTime` value is requested.
       */
      modificationTime: boolean;

      /**
       * Set to `true` if `mimeType` value is requested.
       */
      mimeType: boolean;

      /**
       * Set to `true` if the thumbnail is requested.
       */
      thumbnail: boolean;
    }

    export interface OpenFileRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * A request ID which will be used by consecutive read/write and close requests.
       */
      requestId: number;

      /**
       * The path of the file to be opened.
       */
      filePath: string;

      /**
       * Whether the file will be used for reading or writing.
       */
      mode: OpenFileMode;
    }

    export interface CloseFileRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * A request ID used to open the file.
       */
      openRequestId: number;
    }

    export interface ReadFileRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * A request ID used to open the file.
       */
      openRequestId: number;

      /**
       * Position in the file (in bytes) to start reading from.
       */
      offset: number;

      /**
       * Number of bytes to be returned.
       */
      length: number;
    }

    export interface CreateDirectoryRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the directory to be created.
       */
      directoryPath: string;

      /**
       * Whether the operation is recursive (for directories only).
       */
      recursive: boolean;
    }

    export interface DeleteEntryRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the entry to be deleted.
       */
      entryPath: string;

      /**
       * Whether the operation is recursive (for directories only).
       */
      recursive: boolean;
    }

    export interface CreateFileRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the file to be created.
       */
      filePath: string;
    }

    export interface CopyEntryRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The source path of the entry to be copied.
       */
      sourcePath: string;

      /**
       * The destination path for the copy operation.
       */
      targetPath: string;
    }

    export interface MoveEntryRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The source path of the entry to be moved into a new place.
       */
      sourcePath: string;

      /**
       * The destination path for the copy operation.
       */
      targetPath: string;
    }

    export interface TruncateRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the file to be truncated.
       */
      filePath: string;

      /**
       * Number of bytes to be retained after the operation completes.
       */
      length: number;
    }

    export interface WriteFileRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * A request ID used to open the file.
       */
      openRequestId: number;

      /**
       * Position in the file (in bytes) to start writing the bytes from.
       */
      offset: number;

      /**
       * Buffer of bytes to be written to the file.
       */
      data: ArrayBuffer;
    }

    export interface AbortRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * An ID of the request to be aborted.
       */
      operationRequestId: number;
    }

    export interface AddWatcherRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the entry to be observed.
       */
      entryPath: string;

      /**
       * Whether observing should include all child entries recursively. It can be true for directories only.
       */
      recursive: boolean;
    }

    export interface RemoveWatcherRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The path of the watched entry.
       */
      entryPath: string;

      /**
       * Mode of the watcher.
       */
      recursive: boolean;
    }

    export interface Action {

      /**
       * The identifier of the action. Any string or {@link CommonActionId} for common actions.
       */
      id: string;

      /**
       * The title of the action. It may be ignored for common actions.
       */
      title?: string;
    }

    export interface ExecuteActionRequestedOptions {

      /**
       * The identifier of the file system related to this operation.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;

      /**
       * The set of paths of the entries to be used for the action.
       */
      entryPaths: string[];

      /**
       * The identifier of the action to be executed.
       */
      actionId: string;
    }

    export interface Change {

      /**
       * The path of the changed entry.
       */
      entryPath: string;

      /**
       * The type of the change which happened to the entry.
       */
      changeType: ChangeType;
    }

    export interface NotifyOptions {

      /**
       * The identifier of the file system related to this change.
       */
      fileSystemId: string;

      /**
       * The path of the observed entry.
       */
      observedPath: string;

      /**
       * Mode of the observed entry.
       */
      recursive: boolean;

      /**
       * The type of the change which happened to the observed entry. If it is DELETED, then the observed entry will be automatically removed from the list of observed entries.
       */
      changeType: ChangeType;

      /**
       * List of changes to entries within the observed directory (including the entry itself)
       */
      changes?: Change[];

      /**
       * Tag for the notification. Required if the file system was mounted with the `supportsNotifyTag` option. Note, that this flag is necessary to provide notifications about changes which changed even when the system was shutdown.
       */
      tag?: string;
    }

    export interface ConfigureRequestedOptions {

      /**
       * The identifier of the file system to be configured.
       */
      fileSystemId: string;

      /**
       * The unique identifier of this request.
       */
      requestId: number;
    }

    /**
     * Raised when unmounting for the file system with the `fileSystemId` identifier is requested. In the response, the {@link unmount} API method must be called together with `successCallback`. If unmounting is not possible (eg. due to a pending operation), then `errorCallback` must be called.
     */
    export const onUnmountRequested: events.Event<(
      options: UnmountRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when metadata of a file or a directory at `entryPath` is requested. The metadata must be returned with the `successCallback` call. In case of an error, `errorCallback` must be called.
     */
    export const onGetMetadataRequested: events.Event<(
      options: GetMetadataRequestedOptions,
      /**
       * Success callback for the {@link onGetMetadataRequested} event.
       *
       * @param metadata
       */
      successCallback: (
        metadata: EntryMetadata,
      ) => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when a list of actions for a set of files or directories at `entryPaths` is requested. All of the returned actions must be applicable to each entry. If there are no such actions, an empty array should be returned. The actions must be returned with the `successCallback` call. In case of an error, `errorCallback` must be called.
     */
    export const onGetActionsRequested: events.Event<(
      options: GetActionsRequestedOptions,
      /**
       * Success callback for the {@link onGetActionsRequested} event.
       *
       * @param actions
       */
      successCallback: (
        actions: Action[],
      ) => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when contents of a directory at `directoryPath` are requested. The results must be returned in chunks by calling the `successCallback` several times. In case of an error, `errorCallback` must be called.
     */
    export const onReadDirectoryRequested: events.Event<(
      options: ReadDirectoryRequestedOptions,
      /**
       * Success callback for the {@link onReadDirectoryRequested} event. If more entries will be returned, then `hasMore` must be true, and it has to be called again with additional entries. If no more entries are available, then `hasMore` must be set to false.
       *
       * @param entries
       * @param hasMore
       */
      successCallback: (
        entries: EntryMetadata[],
        hasMore: boolean,
      ) => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when opening a file at `filePath` is requested. If the file does not exist, then the operation must fail. Maximum number of files opened at once can be specified with `MountOptions`.
     */
    export const onOpenFileRequested: events.Event<(
      options: OpenFileRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when opening a file previously opened with `openRequestId` is requested to be closed.
     */
    export const onCloseFileRequested: events.Event<(
      options: CloseFileRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when reading contents of a file opened previously with `openRequestId` is requested. The results must be returned in chunks by calling `successCallback` several times. In case of an error, `errorCallback` must be called.
     */
    export const onReadFileRequested: events.Event<(
      options: ReadFileRequestedOptions,
      /**
       * Success callback for the {@link onReadFileRequested} event. If more data will be returned, then `hasMore` must be true, and it has to be called again with additional entries. If no more data is available, then `hasMore` must be set to false.
       *
       * @param data
       * @param hasMore
       */
      successCallback: (
        data: ArrayBuffer,
        hasMore: boolean,
      ) => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when creating a directory is requested. The operation must fail with the EXISTS error if the target directory already exists. If `recursive` is true, then all of the missing directories on the directory path must be created.
     */
    export const onCreateDirectoryRequested: events.Event<(
      options: CreateDirectoryRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when deleting an entry is requested. If `recursive` is true, and the entry is a directory, then all of the entries inside must be recursively deleted as well.
     */
    export const onDeleteEntryRequested: events.Event<(
      options: DeleteEntryRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when creating a file is requested. If the file already exists, then `errorCallback` must be called with the `"EXISTS"` error code.
     */
    export const onCreateFileRequested: events.Event<(
      options: CreateFileRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when copying an entry (recursively if a directory) is requested. If an error occurs, then `errorCallback` must be called.
     */
    export const onCopyEntryRequested: events.Event<(
      options: CopyEntryRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when moving an entry (recursively if a directory) is requested. If an error occurs, then `errorCallback` must be called.
     */
    export const onMoveEntryRequested: events.Event<(
      options: MoveEntryRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when truncating a file to a desired length is requested. If an error occurs, then `errorCallback` must be called.
     */
    export const onTruncateRequested: events.Event<(
      options: TruncateRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when writing contents to a file opened previously with `openRequestId` is requested.
     */
    export const onWriteFileRequested: events.Event<(
      options: WriteFileRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when aborting an operation with `operationRequestId` is requested. The operation executed with `operationRequestId` must be immediately stopped and `successCallback` of this abort request executed. If aborting fails, then `errorCallback` must be called. Note, that callbacks of the aborted operation must not be called, as they will be ignored. Despite calling `errorCallback`, the request may be forcibly aborted.
     */
    export const onAbortRequested: events.Event<(
      options: AbortRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when showing a configuration dialog for `fileSystemId` is requested. If it's handled, the `file_system_provider.configurable` manfiest option must be set to true.
     */
    export const onConfigureRequested: events.Event<(
      options: ConfigureRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when showing a dialog for mounting a new file system is requested. If the extension/app is a file handler, then this event shouldn't be handled. Instead `app.runtime.onLaunched` should be handled in order to mount new file systems when a file is opened. For multiple mounts, the `file_system_provider.multiple_mounts` manifest option must be set to true.
     */
    export const onMountRequested: events.Event<(
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when setting a new directory watcher is requested. If an error occurs, then `errorCallback` must be called.
     */
    export const onAddWatcherRequested: events.Event<(
      options: AddWatcherRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when the watcher should be removed. If an error occurs, then `errorCallback` must be called.
     */
    export const onRemoveWatcherRequested: events.Event<(
      options: RemoveWatcherRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;

    /**
     * Raised when executing an action for a set of files or directories is\\ requested. After the action is completed, `successCallback` must be called. On error, `errorCallback` must be called.
     */
    export const onExecuteActionRequested: events.Event<(
      options: ExecuteActionRequestedOptions,
      /**
       * Callback to be called by the providing extension in case of a success.
       */
      successCallback: () => void,

      /**
       * Callback to be called by the providing extension in case of an error. Any error code is allowed except `OK`.
       *
       * @param error
       */
      errorCallback: (
        error: ProviderError,
      ) => void,
    ) => void>;
  }

  /**
   * Use the `chrome.fontSettings` API to manage Chrome's font settings.
   *
   * @chrome-permission fontSettings
   */
  export namespace fontSettings {

    /**
     * Clears the font set by this extension, if any.
     *
     * @param details
     * @param callback
     */
    export function clearFont(
      details: {
        /**
         * The script for which the font should be cleared. If omitted, the global script font setting is cleared.
         */
        script?: ScriptCode,

        /**
         * The generic font family for which the font should be cleared.
         */
        genericFamily: GenericFamily,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets the font for a given script and generic font family.
     *
     * @param details
     * @param callback
     */
    export function getFont(
      details: {
        /**
         * The script for which the font should be retrieved. If omitted, the font setting for the global script (script code "Zyyy") is retrieved.
         */
        script?: ScriptCode,

        /**
         * The generic font family for which the font should be retrieved.
         */
        genericFamily: GenericFamily,
      },
      callback?: (
        details: {
          /**
           * The font ID. Rather than the literal font ID preference value, this may be the ID of the font that the system resolves the preference value to. So, fontId can differ from the font passed to `setFont`, if, for example, the font is not available on the system. The empty string signifies fallback to the global script font setting.
           */
          fontId: string,

          /**
           * The level of control this extension has over the setting.
           */
          levelOfControl: LevelOfControl,
        },
      ) => void,
    ): void;

    /**
     * Sets the font for a given script and generic font family.
     *
     * @param details
     * @param callback
     */
    export function setFont(
      details: {
        /**
         * The script code which the font should be set. If omitted, the font setting for the global script (script code "Zyyy") is set.
         */
        script?: ScriptCode,

        /**
         * The generic font family for which the font should be set.
         */
        genericFamily: GenericFamily,

        /**
         * The font ID. The empty string means to fallback to the global script font setting.
         */
        fontId: string,
      },
      callback?: () => void,
    ): void;

    /**
     * Gets a list of fonts on the system.
     *
     * @param callback
     */
    export function getFontList(
      callback: (
        results: FontName[],
      ) => void,
    ): void;

    /**
     * Clears the default font size set by this extension, if any.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function clearDefaultFontSize(
      details?: {},
      callback?: () => void,
    ): void;

    /**
     * Gets the default font size.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function getDefaultFontSize(
      details?: {},
      callback?: (
        details: {
          /**
           * The font size in pixels.
           */
          pixelSize: number,

          /**
           * The level of control this extension has over the setting.
           */
          levelOfControl: LevelOfControl,
        },
      ) => void,
    ): void;

    /**
     * Sets the default font size.
     *
     * @param details
     * @param callback
     */
    export function setDefaultFontSize(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Clears the default fixed font size set by this extension, if any.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function clearDefaultFixedFontSize(
      details?: {},
      callback?: () => void,
    ): void;

    /**
     * Gets the default size for fixed width fonts.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function getDefaultFixedFontSize(
      details?: {},
      callback?: (
        details: {
          /**
           * The font size in pixels.
           */
          pixelSize: number,

          /**
           * The level of control this extension has over the setting.
           */
          levelOfControl: LevelOfControl,
        },
      ) => void,
    ): void;

    /**
     * Sets the default size for fixed width fonts.
     *
     * @param details
     * @param callback
     */
    export function setDefaultFixedFontSize(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Clears the minimum font size set by this extension, if any.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function clearMinimumFontSize(
      details?: {},
      callback?: () => void,
    ): void;

    /**
     * Gets the minimum font size.
     *
     * @param details This parameter is currently unused.
     * @param callback
     */
    export function getMinimumFontSize(
      details?: {},
      callback?: (
        details: {
          /**
           * The font size in pixels.
           */
          pixelSize: number,

          /**
           * The level of control this extension has over the setting.
           */
          levelOfControl: LevelOfControl,
        },
      ) => void,
    ): void;

    /**
     * Sets the minimum font size.
     *
     * @param details
     * @param callback
     */
    export function setMinimumFontSize(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Represents a font name.
     */
    export interface FontName {

      /**
       * The font ID.
       */
      fontId: string;

      /**
       * The display name of the font.
       */
      displayName: string;
    }

    /**
     * An ISO 15924 script code. The default, or global, script is represented by script code "Zyyy".
     */
    export type ScriptCode = "Afak" | "Arab" | "Armi" | "Armn" | "Avst" | "Bali" | "Bamu" | "Bass" | "Batk" | "Beng" | "Blis" | "Bopo" | "Brah" | "Brai" | "Bugi" | "Buhd" | "Cakm" | "Cans" | "Cari" | "Cham" | "Cher" | "Cirt" | "Copt" | "Cprt" | "Cyrl" | "Cyrs" | "Deva" | "Dsrt" | "Dupl" | "Egyd" | "Egyh" | "Egyp" | "Elba" | "Ethi" | "Geor" | "Geok" | "Glag" | "Goth" | "Gran" | "Grek" | "Gujr" | "Guru" | "Hang" | "Hani" | "Hano" | "Hans" | "Hant" | "Hebr" | "Hluw" | "Hmng" | "Hung" | "Inds" | "Ital" | "Java" | "Jpan" | "Jurc" | "Kali" | "Khar" | "Khmr" | "Khoj" | "Knda" | "Kpel" | "Kthi" | "Lana" | "Laoo" | "Latf" | "Latg" | "Latn" | "Lepc" | "Limb" | "Lina" | "Linb" | "Lisu" | "Loma" | "Lyci" | "Lydi" | "Mand" | "Mani" | "Maya" | "Mend" | "Merc" | "Mero" | "Mlym" | "Moon" | "Mong" | "Mroo" | "Mtei" | "Mymr" | "Narb" | "Nbat" | "Nkgb" | "Nkoo" | "Nshu" | "Ogam" | "Olck" | "Orkh" | "Orya" | "Osma" | "Palm" | "Perm" | "Phag" | "Phli" | "Phlp" | "Phlv" | "Phnx" | "Plrd" | "Prti" | "Rjng" | "Roro" | "Runr" | "Samr" | "Sara" | "Sarb" | "Saur" | "Sgnw" | "Shaw" | "Shrd" | "Sind" | "Sinh" | "Sora" | "Sund" | "Sylo" | "Syrc" | "Syre" | "Syrj" | "Syrn" | "Tagb" | "Takr" | "Tale" | "Talu" | "Taml" | "Tang" | "Tavt" | "Telu" | "Teng" | "Tfng" | "Tglg" | "Thaa" | "Thai" | "Tibt" | "Tirh" | "Ugar" | "Vaii" | "Visp" | "Wara" | "Wole" | "Xpeo" | "Xsux" | "Yiii" | "Zmth" | "Zsym" | "Zyyy";

    /**
     * A CSS generic font family.
     */
    export type GenericFamily = "standard" | "sansserif" | "serif" | "fixed" | "cursive" | "fantasy";

    /**
     * One of
     * not\_controllable: cannot be controlled by any extension
     * controlled\_by\_other\_extensions: controlled by extensions with higher precedence
     * controllable\_by\_this\_extension: can be controlled by this extension
     * controlled\_by\_this\_extension: controlled by this extension
     */
    export type LevelOfControl = "not_controllable" | "controlled_by_other_extensions" | "controllable_by_this_extension" | "controlled_by_this_extension";

    /**
     * Fired when a font setting changes.
     */
    export const onFontChanged: events.Event<(
      details: {
        /**
         * The font ID. See the description in `getFont`.
         */
        fontId: string,

        /**
         * The script code for which the font setting has changed.
         */
        script?: ScriptCode,

        /**
         * The generic font family for which the font setting has changed.
         */
        genericFamily: GenericFamily,

        /**
         * The level of control this extension has over the setting.
         */
        levelOfControl: LevelOfControl,
      },
    ) => void>;

    /**
     * Fired when the default font size setting changes.
     */
    export const onDefaultFontSizeChanged: events.Event<(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,

        /**
         * The level of control this extension has over the setting.
         */
        levelOfControl: LevelOfControl,
      },
    ) => void>;

    /**
     * Fired when the default fixed font size setting changes.
     */
    export const onDefaultFixedFontSizeChanged: events.Event<(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,

        /**
         * The level of control this extension has over the setting.
         */
        levelOfControl: LevelOfControl,
      },
    ) => void>;

    /**
     * Fired when the minimum font size setting changes.
     */
    export const onMinimumFontSizeChanged: events.Event<(
      details: {
        /**
         * The font size in pixels.
         */
        pixelSize: number,

        /**
         * The level of control this extension has over the setting.
         */
        levelOfControl: LevelOfControl,
      },
    ) => void>;
  }

  /**
   * Use `chrome.gcm` to enable apps and extensions to send and receive messages through the [Google Cloud Messaging Service](https://developer.android.com/google/gcm/).
   *
   * @chrome-permission gcm
   */
  export namespace gcm {

    /**
     * The maximum size (in bytes) of all key/value pairs in a message.
     */
    export const MAX_MESSAGE_SIZE: 4096;

    /**
     * Registers the application with GCM. The registration ID will be returned by the `callback`. If `register` is called again with the same list of `senderIds`, the same registration ID will be returned.
     *
     * @param senderIds A list of server IDs that are allowed to send messages to the application. It should contain at least one and no more than 100 sender IDs.
     * @param callback Function called when registration completes. It should check {@link runtime.lastError} for error when `registrationId` is empty.
     */
    export function register(
      senderIds: [string] | [string, string] | [string, string, string] | [string, string, string, string] | [string, string, string, string, string] | [string, string, string, string, string, string] | [string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string] | [string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string],
      callback: (
        /**
         * A registration ID assigned to the application by the GCM.
         */
        registrationId: string,
      ) => void,
    ): void;

    /**
     * Unregisters the application from GCM.
     *
     * @param callback A function called after the unregistration completes. Unregistration was successful if {@link runtime.lastError} is not set.
     */
    export function unregister(
      callback: () => void,
    ): void;

    /**
     * Sends a message according to its contents.
     *
     * @param message A message to send to the other party via GCM.
     * @param callback A function called after the message is successfully queued for sending. {@link runtime.lastError} should be checked, to ensure a message was sent without problems.
     */
    export function send(
      message: {
        /**
         * The ID of the server to send the message to as assigned by [Google API Console](https://code.google.com/apis/console).
         */
        destinationId: string,

        /**
         * The ID of the message. It must be unique for each message in scope of the applications. See the [Cloud Messaging documentation](https://developer.chrome.com/docs/extensions/cloudMessaging#send_messages) for advice for picking and handling an ID.
         */
        messageId: string,

        /**
         * Time-to-live of the message in seconds. If it is not possible to send the message within that time, an onSendError event will be raised. A time-to-live of 0 indicates that the message should be sent immediately or fail if it's not possible. The maximum and a default value of time-to-live is 86400 seconds (1 day).
         */
        timeToLive?: number,

        /**
         * Message data to send to the server. Case-insensitive `goog.` and `google`, as well as case-sensitive `collapse_key` are disallowed as key prefixes. Sum of all key/value pairs should not exceed {@link gcm.MAX_MESSAGE_SIZE}.
         */
        data: {[name: string]: string},
      },
      callback: (
        /**
         * The ID of the message that the callback was issued for.
         */
        messageId: string,
      ) => void,
    ): void;

    /**
     * Fired when a message is received through GCM.
     */
    export const onMessage: events.Event<(
      /**
       * A message received from another party via GCM.
       */
      message: {
        /**
         * The message data.
         */
        data: {[name: string]: string},

        /**
         * The sender who issued the message.
         */
        from?: string,

        /**
         * The collapse key of a message. See [Collapsible Messages](https://developer.chrome.com/docs/extensions/cloudMessaging#collapsible_messages) section of Cloud Messaging documentation for details.
         */
        collapseKey?: string,
      },
    ) => void>;

    /**
     * Fired when a GCM server had to delete messages sent by an app server to the application. See [Messages deleted event](https://developer.chrome.com/docs/extensions/cloudMessaging#messages_deleted_event) section of Cloud Messaging documentation for details on handling this event.
     */
    export const onMessagesDeleted: events.Event<() => void>;

    /**
     * Fired when it was not possible to send a message to the GCM server.
     */
    export const onSendError: events.Event<(
      /**
       * An error that occured while trying to send the message either in Chrome or on the GCM server. Application can retry sending the message with a reasonable backoff and possibly longer time-to-live.
       */
      error: {
        /**
         * The error message describing the problem.
         */
        errorMessage: string,

        /**
         * The ID of the message with this error, if error is related to a specific message.
         */
        messageId?: string,

        /**
         * Additional details related to the error, when available.
         */
        details: {[name: string]: string},
      },
    ) => void>;
  }

  /**
   * Use the `chrome.history` API to interact with the browser's record of visited pages. You can add, remove, and query for URLs in the browser's history. To override the history page with your own version, see [Override Pages](https://developer.chrome.com/docs/extensions/override).
   *
   * @chrome-permission history
   */
  export namespace history {

    /**
     * Searches the history for the last visit time of each page matching the query.
     *
     * @param query
     * @param callback
     */
    export function search(
      query: {
        /**
         * A free-text query to the history service. Leave empty to retrieve all pages.
         */
        text: string,

        /**
         * Limit results to those visited after this date, represented in milliseconds since the epoch. If not specified, this defaults to 24 hours in the past.
         */
        startTime?: number,

        /**
         * Limit results to those visited before this date, represented in milliseconds since the epoch.
         */
        endTime?: number,

        /**
         * The maximum number of results to retrieve. Defaults to 100.
         */
        maxResults?: number,
      },
      callback: (
        results: HistoryItem[],
      ) => void,
    ): void;

    /**
     * Retrieves information about visits to a URL.
     *
     * @param details
     * @param callback
     */
    export function getVisits(
      details: UrlDetails,
      callback: (
        results: VisitItem[],
      ) => void,
    ): void;

    /**
     * Adds a URL to the history at the current time with a [transition type](https://developer.chrome.com/docs/extensions/reference/history/#transition_types) of "link".
     *
     * @param details
     * @param callback
     */
    export function addUrl(
      details: UrlDetails,
      callback?: () => void,
    ): void;

    /**
     * Removes all occurrences of the given URL from the history.
     *
     * @param details
     * @param callback
     */
    export function deleteUrl(
      details: UrlDetails,
      callback?: () => void,
    ): void;

    /**
     * Removes all items within the specified date range from the history. Pages will not be removed from the history unless all visits fall within the range.
     *
     * @param range
     * @param callback
     */
    export function deleteRange(
      range: {
        /**
         * Items added to history after this date, represented in milliseconds since the epoch.
         */
        startTime: number,

        /**
         * Items added to history before this date, represented in milliseconds since the epoch.
         */
        endTime: number,
      },
      callback: () => void,
    ): void;

    /**
     * Deletes all items from the history.
     *
     * @param callback
     */
    export function deleteAll(
      callback: () => void,
    ): void;

    /**
     * The [transition type](https://developer.chrome.com/docs/extensions/reference/history/#transition_types) for this visit from its referrer.
     */
    export type TransitionType = "link" | "typed" | "auto_bookmark" | "auto_subframe" | "manual_subframe" | "generated" | "auto_toplevel" | "form_submit" | "reload" | "keyword" | "keyword_generated";

    /**
     * An object encapsulating one result of a history query.
     */
    export interface HistoryItem {

      /**
       * The unique identifier for the item.
       */
      id: string;

      /**
       * The URL navigated to by a user.
       */
      url?: string;

      /**
       * The title of the page when it was last loaded.
       */
      title?: string;

      /**
       * When this page was last loaded, represented in milliseconds since the epoch.
       */
      lastVisitTime?: number;

      /**
       * The number of times the user has navigated to this page.
       */
      visitCount?: number;

      /**
       * The number of times the user has navigated to this page by typing in the address.
       */
      typedCount?: number;
    }

    /**
     * An object encapsulating one visit to a URL.
     */
    export interface VisitItem {

      /**
       * The unique identifier for the item.
       */
      id: string;

      /**
       * The unique identifier for this visit.
       */
      visitId: string;

      /**
       * When this visit occurred, represented in milliseconds since the epoch.
       */
      visitTime?: number;

      /**
       * The visit ID of the referrer.
       */
      referringVisitId: string;

      /**
       * The [transition type](https://developer.chrome.com/docs/extensions/reference/history/#transition_types) for this visit from its referrer.
       */
      transition: TransitionType;
    }

    /**
     * @since Chrome 88
     */
    export interface UrlDetails {

      /**
       * The URL for the operation. It must be in the format as returned from a call to history.search.
       */
      url: string;
    }

    /**
     * Fired when a URL is visited, providing the HistoryItem data for that URL. This event fires before the page has loaded.
     */
    export const onVisited: events.Event<(
      result: HistoryItem,
    ) => void>;

    /**
     * Fired when one or more URLs are removed from the history service. When all visits have been removed the URL is purged from history.
     */
    export const onVisitRemoved: events.Event<(
      removed: {
        /**
         * True if all history was removed. If true, then urls will be empty.
         */
        allHistory: boolean,

        urls?: string[],
      },
    ) => void>;
  }

  /**
   * Use the `chrome.i18n` infrastructure to implement internationalization across your whole app or extension.
   *
   * @chrome-disallow-service-workers
   */
  export namespace i18n {

    /**
     * Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use {@link i18n.getUILanguage}.
     *
     * @param callback
     */
    export function getAcceptLanguages(
      callback: (
        /**
         * Array of LanguageCode
         */
        languages: LanguageCode[],
      ) => void,
    ): void;

    /**
     * Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the `getMessage()` call is wrong — for example, _messageName_ is not a string or the _substitutions_ array has more than 9 elements — this method returns `undefined`.
     *
     * @param messageName The name of the message, as specified in the [`messages.json`](https://developer.chrome.com/extensions/i18n-messages) file.
     * @param substitutions Up to 9 substitution strings, if the message requires any.
     * @param options
     * @returns Message localized for current locale.
     */
    export function getMessage(
      messageName: string,
      substitutions?: any,
      options?: {
        /**
         * Escape `<` in translation to `&lt;`. This applies only to the message itself, not to the placeholders. Developers might want to use this if the translation is used in an HTML context. Closure Templates used with Closure Compiler generate this automatically.
         */
        escapeLt?: boolean,
      },
    ): string;

    /**
     * Gets the browser UI language of the browser. This is different from {@link i18n.getAcceptLanguages} which returns the preferred user languages.
     *
     * @returns The browser UI language code such as en-US or fr-FR.
     */
    export function getUILanguage(): string;

    /**
     * Detects the language of the provided text using CLD.
     *
     * @param text User input string to be translated.
     * @param callback
     */
    export function detectLanguage(
      text: string,
      callback: (
        /**
         * LanguageDetectionResult object that holds detected langugae reliability and array of DetectedLanguage
         */
        result: {
          /**
           * CLD detected language reliability
           */
          isReliable: boolean,

          /**
           * array of detectedLanguage
           */
          languages: {
            language: LanguageCode,

            /**
             * The percentage of the detected language
             */
            percentage: number,
          }[],
        },
      ) => void,
    ): void;

    /**
     * An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](https://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). For an unknown language, `und` will be returned, which means that \[percentage\] of the text is unknown to CLD
     */
    export type LanguageCode = string;
  }

  /**
   * Use the `chrome.identity` API to get OAuth2 access tokens.
   *
   * @chrome-permission identity
   */
  export namespace identity {

    /**
     * Retrieves a list of AccountInfo objects describing the accounts present on the profile.
     *
     * `getAccounts` is only supported on dev channel.
     *
     * @chrome-channel dev
     * @alpha
     * @param callback
     */
    export function getAccounts(
      callback: (
        accounts: AccountInfo[],
      ) => void,
    ): void;

    /**
     * Gets an OAuth2 access token using the client ID and scopes specified in the [`oauth2` section of manifest.json](https://developer.chrome.com/docs/extensions/app_identity#update_manifest).
     *
     * The Identity API caches access tokens in memory, so it's ok to call `getAuthToken` non-interactively any time a token is required. The token cache automatically handles expiration.
     *
     * For a good user experience it is important interactive token requests are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests, or Chrome sign in screens if they are not signed in, with with no context. In particular, do not use `getAuthToken` interactively when your app is first launched.
     *
     * @param details Token options.
     * @param callback Called with an OAuth2 access token as specified by the manifest, or undefined if there was an error. The `grantedScopes` parameter is populated since Chrome 87. When available, this parameter contains the list of granted scopes corresponding with the returned token.
     */
    export function getAuthToken(
      details?: TokenDetails,
      callback?: (
        token?: string,
        /**
         * @since Chrome 86
         */
        grantedScopes?: string[],
      ) => void,
    ): void;

    /**
     * Retrieves email address and obfuscated gaia id of the user signed into a profile.
     *
     * Requires the `identity.email` manifest permission. Otherwise, returns an empty result.
     *
     * This API is different from identity.getAccounts in two ways. The information returned is available offline, and it only applies to the primary account for the profile.
     *
     * @param details Profile options.
     * @param callback Called with the `ProfileUserInfo` of the primary Chrome account, of an empty `ProfileUserInfo` if the account with given `details` doesn't exist.
     */
    export function getProfileUserInfo(
      details: ProfileDetails,
      callback: (
        userInfo: ProfileUserInfo,
      ) => void,
    ): void;

    /**
     * Retrieves email address and obfuscated gaia id of the user signed into a profile.
     *
     * Requires the `identity.email` manifest permission. Otherwise, returns an empty result.
     *
     * This API is different from identity.getAccounts in two ways. The information returned is available offline, and it only applies to the primary account for the profile.
     *
     * @param callback Called with the `ProfileUserInfo` of the primary Chrome account, of an empty `ProfileUserInfo` if the account with given `details` doesn't exist.
     */
    export function getProfileUserInfo(
      callback: (
        userInfo: ProfileUserInfo,
      ) => void,
    ): void;

    /**
     * Removes an OAuth2 access token from the Identity API's token cache.
     *
     * If an access token is discovered to be invalid, it should be passed to removeCachedAuthToken to remove it from the cache. The app may then retrieve a fresh token with `getAuthToken`.
     *
     * @param details Token information.
     * @param callback Called when the token has been removed from the cache.
     */
    export function removeCachedAuthToken(
      details: InvalidTokenDetails,
      callback?: () => void,
    ): void;

    /**
     * Resets the state of the Identity API:
     *
     * *   Removes all OAuth2 access tokens from the token cache
     * *   Removes user's account preferences
     * *   De-authorizes the user from all auth flows
     *
     * @since Chrome 87
     * @param callback Called when the state has been cleared.
     */
    export function clearAllCachedAuthTokens(
      callback: () => void,
    ): void;

    /**
     * Starts an auth flow at the specified URL.
     *
     * This method enables auth flows with non-Google identity providers by launching a web view and navigating it to the first URL in the provider's auth flow. When the provider redirects to a URL matching the pattern `https://<app-id>.chromiumapp.org/*`, the window will close, and the final redirect URL will be passed to the callback function.
     *
     * For a good user experience it is important interactive auth flows are initiated by UI in your app explaining what the authorization is for. Failing to do this will cause your users to get authorization requests with no context. In particular, do not launch an interactive auth flow when your app is first launched.
     *
     * @param details WebAuth flow options.
     * @param callback Called with the URL redirected back to your application.
     */
    export function launchWebAuthFlow(
      details: WebAuthFlowDetails,
      callback: (
        responseUrl?: string,
      ) => void,
    ): void;

    /**
     * Generates a redirect URL to be used in `launchWebAuthFlow`.
     *
     * The generated URLs match the pattern `https://<app-id>.chromiumapp.org/*`.
     *
     * @param path The path appended to the end of the generated URL.
     */
    export function getRedirectURL(
      path?: string,
    ): string;

    export interface AccountInfo {

      /**
       * A unique identifier for the account. This ID will not change for the lifetime of the account.
       */
      id: string;
    }

    /**
     * @since Chrome 84
     */
    export type AccountStatus = "SYNC" | "ANY";

    /**
     * @since Chrome 84
     */
    export interface ProfileDetails {

      /**
       * A status of the primary account signed into a profile whose `ProfileUserInfo` should be returned. Defaults to `SYNC` account status.
       */
      accountStatus?: AccountStatus;
    }

    export interface ProfileUserInfo {

      /**
       * An email address for the user account signed into the current profile. Empty if the user is not signed in or the `identity.email` manifest permission is not specified.
       */
      email: string;

      /**
       * A unique identifier for the account. This ID will not change for the lifetime of the account. Empty if the user is not signed in or (in M41+) the `identity.email` manifest permission is not specified.
       */
      id: string;
    }

    export interface TokenDetails {

      /**
       * Fetching a token may require the user to sign-in to Chrome, or approve the application's requested scopes. If the interactive flag is `true`, `getAuthToken` will prompt the user as necessary. When the flag is `false` or omitted, `getAuthToken` will return failure any time a prompt would be required.
       */
      interactive?: boolean;

      /**
       * The account ID whose token should be returned. If not specified, the function will use an account from the Chrome profile: the Sync account if there is one, or otherwise the first Google web account.
       */
      account?: AccountInfo;

      /**
       * A list of OAuth2 scopes to request.
       *
       * When the `scopes` field is present, it overrides the list of scopes specified in manifest.json.
       */
      scopes?: string[];

      /**
       * The `enableGranularPermissions` flag allows extensions to opt-in early to the granular permissions consent screen, in which requested permissions are granted or denied individually.
       *
       * @since Chrome 87
       */
      enableGranularPermissions?: boolean;
    }

    export interface InvalidTokenDetails {

      /**
       * The specific token that should be removed from the cache.
       */
      token: string;
    }

    export interface WebAuthFlowDetails {

      /**
       * The URL that initiates the auth flow.
       */
      url: string;

      /**
       * Whether to launch auth flow in interactive mode.
       *
       * Since some auth flows may immediately redirect to a result URL, `launchWebAuthFlow` hides its web view until the first navigation either redirects to the final URL, or finishes loading a page meant to be displayed.
       *
       * If the interactive flag is `true`, the window will be displayed when a page load completes. If the flag is `false` or omitted, `launchWebAuthFlow` will return with an error if the initial navigation does not complete the flow.
       */
      interactive?: boolean;
    }

    /**
     * Fired when signin state changes for an account on the user's profile.
     */
    export const onSignInChanged: events.Event<(
      account: AccountInfo,
      signedIn: boolean,
    ) => void>;
  }

  /**
   * Use the `chrome.idle` API to detect when the machine's idle state changes.
   *
   * @chrome-permission idle
   */
  export namespace idle {

    /**
     * Returns "locked" if the system is locked, "idle" if the user has not generated any input for a specified number of seconds, or "active" otherwise.
     *
     * @param detectionIntervalInSeconds The system is considered idle if detectionIntervalInSeconds seconds have elapsed since the last user input detected.
     * @param callback
     */
    export function queryState(
      detectionIntervalInSeconds: number,
      callback: (
        newState: IdleState,
      ) => void,
    ): void;

    /**
     * Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds.
     *
     * @param intervalInSeconds Threshold, in seconds, used to determine when the system is in an idle state.
     */
    export function setDetectionInterval(
      intervalInSeconds: number,
    ): void;

    /**
     * Gets the time, in seconds, it takes until the screen is locked automatically while idle. Returns a zero duration if the screen is never locked automatically. Currently supported on Chrome OS only.
     *
     * @chrome-platform chromeos
     * @since Chrome 73
     * @param callback
     */
    export function getAutoLockDelay(
      callback: (
        /**
         * Time, in seconds, until the screen is locked automatically while idle. This is zero if the screen never locks automatically.
         */
        delay: number,
      ) => void,
    ): void;

    export type IdleState = "active" | "idle" | "locked";

    /**
     * Fired when the system changes to an active, idle or locked state. The event fires with "locked" if the screen is locked or the screensaver activates, "idle" if the system is unlocked and the user has not generated any input for a specified number of seconds, and "active" when the user generates input on an idle system.
     */
    export const onStateChanged: events.Event<(
      newState: IdleState,
    ) => void>;
  }

  /**
   * Dummy namepsace for the incognito manifest key.
   *
   * @since Chrome 87
   */
  export namespace incognito {

    export type IncognitoMode = "split" | "spanning" | "not_allowed";
  }

  /**
   * Use the `chrome.input.ime` API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window.
   *
   * @chrome-platform chromeos
   * @chrome-permission input
   */
  export namespace input.ime {

    /**
     * Set the current composition. If this extension does not own the active IME, this fails.
     *
     * @param parameters
     * @param callback Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set.
     */
    export function setComposition(
      parameters: {
        /**
         * ID of the context where the composition text will be set
         */
        contextID: number,

        /**
         * Text to set
         */
        text: string,

        /**
         * Position in the text that the selection starts at.
         */
        selectionStart?: number,

        /**
         * Position in the text that the selection ends at.
         */
        selectionEnd?: number,

        /**
         * Position in the text of the cursor.
         */
        cursor: number,

        /**
         * List of segments and their associated types.
         */
        segments?: {
          /**
           * Index of the character to start this segment at
           */
          start: number,

          /**
           * Index of the character to end this segment after.
           */
          end: number,

          /**
           * The type of the underline to modify this segment.
           */
          style: UnderlineStyle,
        }[],
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Clear the current composition. If this extension does not own the active IME, this fails.
     *
     * @param parameters
     * @param callback Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set.
     */
    export function clearComposition(
      parameters: {
        /**
         * ID of the context where the composition will be cleared
         */
        contextID: number,
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Commits the provided text to the current input.
     *
     * @param parameters
     * @param callback Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, {@link runtime.lastError} is set.
     */
    export function commitText(
      parameters: {
        /**
         * ID of the context where the text will be committed
         */
        contextID: number,

        /**
         * The text to commit
         */
        text: string,
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Sends the key events. This function is expected to be used by virtual keyboards. When key(s) on a virtual keyboard is pressed by a user, this function is used to propagate that event to the system.
     *
     * @param parameters
     * @param callback Called when the operation completes.
     */
    export function sendKeyEvents(
      parameters: {
        /**
         * ID of the context where the key events will be sent, or zero to send key events to non-input field.
         */
        contextID: number,

        /**
         * Data on the key event.
         */
        keyData: KeyboardEvent[],
      },
      callback?: () => void,
    ): void;

    /**
     * Hides the input view window, which is popped up automatically by system. If the input view window is already hidden, this function will do nothing.
     */
    export function hideInputView(): void;

    /**
     * Sets the properties of the candidate window. This fails if the extension doesn't own the active IME
     *
     * @param parameters
     * @param callback Called when the operation completes.
     */
    export function setCandidateWindowProperties(
      parameters: {
        /**
         * ID of the engine to set properties on.
         */
        engineID: string,

        properties: {
          /**
           * True to show the Candidate window, false to hide it.
           */
          visible?: boolean,

          /**
           * True to show the cursor, false to hide it.
           */
          cursorVisible?: boolean,

          /**
           * True if the candidate window should be rendered vertical, false to make it horizontal.
           */
          vertical?: boolean,

          /**
           * The number of candidates to display per page.
           */
          pageSize?: number,

          /**
           * Text that is shown at the bottom of the candidate window.
           */
          auxiliaryText?: string,

          /**
           * True to display the auxiliary text, false to hide it.
           */
          auxiliaryTextVisible?: boolean,

          /**
           * The total number of candidates for the candidate window.
           *
           * @since Chrome 84
           */
          totalCandidates?: number,

          /**
           * The index of the current chosen candidate out of total candidates.
           *
           * @since Chrome 84
           */
          currentCandidateIndex?: number,

          /**
           * Where to display the candidate window.
           */
          windowPosition?: WindowPosition,
        },
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Sets the current candidate list. This fails if this extension doesn't own the active IME
     *
     * @param parameters
     * @param callback Called when the operation completes.
     */
    export function setCandidates(
      parameters: {
        /**
         * ID of the context that owns the candidate window.
         */
        contextID: number,

        /**
         * List of candidates to show in the candidate window
         */
        candidates: {
          /**
           * The candidate
           */
          candidate: string,

          /**
           * The candidate's id
           */
          id: number,

          /**
           * The id to add these candidates under
           */
          parentId?: number,

          /**
           * Short string displayed to next to the candidate, often the shortcut key or index
           */
          label?: string,

          /**
           * Additional text describing the candidate
           */
          annotation?: string,

          /**
           * The usage or detail description of word.
           */
          usage?: {
            /**
             * The title string of details description.
             */
            title: string,

            /**
             * The body string of detail description.
             */
            body: string,
          },
        }[],
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Set the position of the cursor in the candidate window. This is a no-op if this extension does not own the active IME.
     *
     * @param parameters
     * @param callback Called when the operation completes
     */
    export function setCursorPosition(
      parameters: {
        /**
         * ID of the context that owns the candidate window.
         */
        contextID: number,

        /**
         * ID of the candidate to select.
         */
        candidateID: number,
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Shows/Hides an assistive window with the given properties.
     *
     * @since Chrome 85
     * @param parameters
     * @param callback Called when the operation completes.
     */
    export function setAssistiveWindowProperties(
      parameters: {
        /**
         * ID of the context owning the assistive window.
         */
        contextID: number,

        /**
         * Properties of the assistive window.
         */
        properties: AssistiveWindowProperties,
      },
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Highlights/Unhighlights a button in an assistive window.
     *
     * @since Chrome 86
     * @param parameters
     * @param callback Called when the operation completes. On failure, {@link runtime.lastError} is set.
     */
    export function setAssistiveWindowButtonHighlighted(
      parameters: {
        /**
         * ID of the context owning the assistive window.
         */
        contextID: number,

        /**
         * The ID of the button
         */
        buttonID: AssistiveWindowButton,

        /**
         * The window type the button belongs to.
         */
        windowType: AssistiveWindowType,

        /**
         * The text for the screenreader to announce.
         */
        announceString?: string,

        /**
         * Whether the button should be highlighted.
         */
        highlighted: boolean,
      },
      callback?: () => void,
    ): void;

    /**
     * Adds the provided menu items to the language menu when this IME is active.
     *
     * @param parameters
     * @param callback
     */
    export function setMenuItems(
      parameters: MenuParameters,
      callback?: () => void,
    ): void;

    /**
     * Updates the state of the MenuItems specified
     *
     * @param parameters
     * @param callback Called when the operation completes
     */
    export function updateMenuItems(
      parameters: MenuParameters,
      callback?: () => void,
    ): void;

    /**
     * Deletes the text around the caret.
     *
     * @param parameters
     * @param callback Called when the operation completes.
     */
    export function deleteSurroundingText(
      parameters: {
        /**
         * ID of the engine receiving the event.
         */
        engineID: string,

        /**
         * ID of the context where the surrounding text will be deleted.
         */
        contextID: number,

        /**
         * The offset from the caret position where deletion will start. This value can be negative.
         */
        offset: number,

        /**
         * The number of characters to be deleted
         */
        length: number,
      },
      callback?: () => void,
    ): void;

    /**
     * Indicates that the key event received by onKeyEvent is handled. This should only be called if the onKeyEvent listener is asynchronous.
     *
     * @param requestId Request id of the event that was handled. This should come from keyEvent.requestId
     * @param response True if the keystroke was handled, false if not
     */
    export function keyEventHandled(
      requestId: string,
      response: boolean,
    ): void;

    export type KeyboardEventType = "keyup" | "keydown";

    /**
     * See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent
     */
    export interface KeyboardEvent {

      /**
       * One of keyup or keydown.
       */
      type: KeyboardEventType;

      /**
       * (Deprecated) The ID of the request. Use the `requestId` param from the `onKeyEvent` event instead.
       */
      requestId?: string;

      /**
       * The extension ID of the sender of this keyevent.
       */
      extensionId?: string;

      /**
       * Value of the key being pressed
       */
      key: string;

      /**
       * Value of the physical key being pressed. The value is not affected by current keyboard layout or modifier state.
       */
      code: string;

      /**
       * The deprecated HTML keyCode, which is system- and implementation-dependent numerical code signifying the unmodified identifier associated with the key pressed.
       */
      keyCode?: number;

      /**
       * Whether or not the ALT key is pressed.
       */
      altKey?: boolean;

      /**
       * Whether or not the ALTGR key is pressed.
       *
       * @since Chrome 79
       */
      altgrKey?: boolean;

      /**
       * Whether or not the CTRL key is pressed.
       */
      ctrlKey?: boolean;

      /**
       * Whether or not the SHIFT key is pressed.
       */
      shiftKey?: boolean;

      /**
       * Whether or not the CAPS\_LOCK is enabled.
       */
      capsLock?: boolean;
    }

    /**
     * Type of value this text field edits, (Text, Number, URL, etc)
     */
    export type InputContextType = "text" | "search" | "tel" | "url" | "email" | "number" | "password" | "null";

    /**
     * The auto-capitalize type of the text field.
     *
     * @since Chrome 69
     */
    export type AutoCapitalizeType = "characters" | "words" | "sentences";

    /**
     * Describes an input Context
     */
    export interface InputContext {

      /**
       * This is used to specify targets of text field operations. This ID becomes invalid as soon as onBlur is called.
       */
      contextID: number;

      /**
       * Type of value this text field edits, (Text, Number, URL, etc)
       */
      type: InputContextType;

      /**
       * Whether the text field wants auto-correct.
       */
      autoCorrect: boolean;

      /**
       * Whether the text field wants auto-complete.
       */
      autoComplete: boolean;

      /**
       * The auto-capitalize type of the text field.
       *
       * @since Chrome 69
       */
      autoCapitalize: AutoCapitalizeType;

      /**
       * Whether the text field wants spell-check.
       */
      spellCheck: boolean;

      /**
       * Whether text entered into the text field should be used to improve typing suggestions for the user.
       *
       * @since Chrome 68
       */
      shouldDoLearning: boolean;
    }

    /**
     * The type of menu item. Radio buttons between separators are considered grouped.
     */
    export type MenuItemStyle = "check" | "radio" | "separator";

    /**
     * A menu item used by an input method to interact with the user from the language menu.
     */
    export interface MenuItem {

      /**
       * String that will be passed to callbacks referencing this MenuItem.
       */
      id: string;

      /**
       * Text displayed in the menu for this item.
       */
      label?: string;

      /**
       * The type of menu item.
       */
      style?: MenuItemStyle;

      /**
       * Indicates this item is visible.
       */
      visible?: boolean;

      /**
       * Indicates this item should be drawn with a check.
       */
      checked?: boolean;

      /**
       * Indicates this item is enabled.
       */
      enabled?: boolean;
    }

    /**
     * The type of the underline to modify this segment.
     */
    export type UnderlineStyle = "underline" | "doubleUnderline" | "noUnderline";

    /**
     * Where to display the candidate window. If set to 'cursor', the window follows the cursor. If set to 'composition', the window is locked to the beginning of the composition.
     */
    export type WindowPosition = "cursor" | "composition";

    /**
     * The screen type under which the IME is activated.
     */
    export type ScreenType = "normal" | "login" | "lock" | "secondary-login";

    /**
     * Which mouse buttons was clicked.
     */
    export type MouseButton = "left" | "middle" | "right";

    /**
     * Type of assistive window.
     *
     * @since Chrome 85
     */
    export type AssistiveWindowType = "undo";

    /**
     * Properties of the assistive window.
     *
     * @since Chrome 85
     */
    export interface AssistiveWindowProperties {

      type: AssistiveWindowType;

      /**
       * Sets true to show AssistiveWindow, sets false to hide.
       */
      visible: boolean;

      /**
       * Strings for ChromeVox to announce.
       */
      announceString?: string;
    }

    /**
     * ID of buttons in assistive window.
     *
     * @since Chrome 85
     */
    export type AssistiveWindowButton = "undo" | "addToDictionary";

    /**
     * @since Chrome 88
     */
    export interface MenuParameters {

      /**
       * ID of the engine to use.
       */
      engineID: string;

      /**
       * MenuItems to add or update. They will be added in the order they exist in the array.
       */
      items: MenuItem[];
    }

    /**
     * This event is sent when an IME is activated. It signals that the IME will be receiving onKeyPress events.
     */
    export const onActivate: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,

      /**
       * The screen type under which the IME is activated.
       */
      screen: ScreenType,
    ) => void>;

    /**
     * This event is sent when an IME is deactivated. It signals that the IME will no longer be receiving onKeyPress events.
     */
    export const onDeactivated: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,
    ) => void>;

    /**
     * This event is sent when focus enters a text box. It is sent to all extensions that are listening to this event, and enabled by the user.
     */
    export const onFocus: events.Event<(
      /**
       * Describes the text field that has acquired focus.
       */
      context: InputContext,
    ) => void>;

    /**
     * This event is sent when focus leaves a text box. It is sent to all extensions that are listening to this event, and enabled by the user.
     */
    export const onBlur: events.Event<(
      /**
       * The ID of the text field that has lost focus. The ID is invalid after this call
       */
      contextID: number,
    ) => void>;

    /**
     * This event is sent when the properties of the current InputContext change, such as the the type. It is sent to all extensions that are listening to this event, and enabled by the user.
     */
    export const onInputContextUpdate: events.Event<(
      /**
       * An InputContext object describing the text field that has changed.
       */
      context: InputContext,
    ) => void>;

    /**
     * Fired when a key event is sent from the operating system. The event will be sent to the extension if this extension owns the active IME. The listener function should return true if the event was handled false if it was not. If the event will be evaluated asynchronously, this function must return undefined and the IME must later call keyEventHandled() with the result.
     */
    export const onKeyEvent: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,

      /**
       * Data on the key event
       */
      keyData: KeyboardEvent,

      /**
       * ID of the request. If the event listener returns undefined, then `keyEventHandled` must be called later with this `requestId`.
       *
       * @since Chrome 79
       */
      requestId: string,
    ) => boolean>;

    /**
     * This event is sent if this extension owns the active IME.
     */
    export const onCandidateClicked: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,

      /**
       * ID of the candidate that was clicked.
       */
      candidateID: number,

      /**
       * Which mouse buttons was clicked.
       */
      button: MouseButton,
    ) => void>;

    /**
     * Called when the user selects a menu item
     */
    export const onMenuItemActivated: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,

      /**
       * Name of the MenuItem which was activated
       */
      name: string,
    ) => void>;

    /**
     * Called when the editable string around caret is changed or when the caret position is moved. The text length is limited to 100 characters for each back and forth direction.
     */
    export const onSurroundingTextChanged: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,

      /**
       * The surrounding information.
       */
      surroundingInfo: {
        /**
         * The text around the cursor. This is only a subset of all text in the input field.
         */
        text: string,

        /**
         * The ending position of the selection. This value indicates caret position if there is no selection.
         */
        focus: number,

        /**
         * The beginning position of the selection. This value indicates caret position if there is no selection.
         */
        anchor: number,

        /**
         * The offset position of `text`. Since `text` only includes a subset of text around the cursor, offset indicates the absolute position of the first character of `text`.
         */
        offset: number,
      },
    ) => void>;

    /**
     * This event is sent when chrome terminates ongoing text input session.
     */
    export const onReset: events.Event<(
      /**
       * ID of the engine receiving the event
       */
      engineID: string,
    ) => void>;

    /**
     * This event is sent when a button in an assistive window is clicked.
     *
     * @since Chrome 85
     */
    export const onAssistiveWindowButtonClicked: events.Event<(
      details: {
        /**
         * The ID of the button clicked.
         */
        buttonID: AssistiveWindowButton,

        /**
         * The type of the assistive window.
         */
        windowType: AssistiveWindowType,
      },
    ) => void>;
  }

  /**
   * Use `chrome.instanceID` to access the Instance ID service.
   *
   * @chrome-permission gcm
   */
  export namespace instanceID {

    /**
     * Retrieves an identifier for the app instance. The instance ID will be returned by the `callback`. The same ID will be returned as long as the application identity has not been revoked or expired.
     *
     * @param callback Function called when the retrieval completes. It should check {@link runtime.lastError} for error when instanceID is empty.
     */
    export function getID(
      callback: (
        /**
         * An Instance ID assigned to the app instance.
         */
        instanceID: string,
      ) => void,
    ): void;

    /**
     * Retrieves the time when the InstanceID has been generated. The creation time will be returned by the `callback`.
     *
     * @param callback Function called when the retrieval completes. It should check {@link runtime.lastError} for error when creationTime is zero.
     */
    export function getCreationTime(
      callback: (
        /**
         * The time when the Instance ID has been generated, represented in milliseconds since the epoch.
         */
        creationTime: number,
      ) => void,
    ): void;

    /**
     * Return a token that allows the authorized entity to access the service defined by scope.
     *
     * @param getTokenParams Parameters for getToken.
     * @param callback Function called when the retrieval completes. It should check {@link runtime.lastError} for error when token is empty.
     */
    export function getToken(
      getTokenParams: {
        /**
         * Identifies the entity that is authorized to access resources associated with this Instance ID. It can be a project ID from [Google developer console](https://code.google.com/apis/console).
         */
        authorizedEntity: string,

        /**
         * Identifies authorized actions that the authorized entity can take. E.g. for sending GCM messages, `GCM` scope should be used.
         */
        scope: string,

        /**
         * Allows including a small number of string key/value pairs that will be associated with the token and may be used in processing the request.
         *
         * @deprecated options are deprecated and will be ignored.
         * @deprecated-since Chrome 89
         */
        options?: {[name: string]: string},
      },
      callback: (
        /**
         * A token assigned by the requested service.
         */
        token: string,
      ) => void,
    ): void;

    /**
     * Revokes a granted token.
     *
     * @param deleteTokenParams Parameters for deleteToken.
     * @param callback Function called when the token deletion completes. The token was revoked successfully if {@link runtime.lastError} is not set.
     */
    export function deleteToken(
      deleteTokenParams: {
        /**
         * The authorized entity that is used to obtain the token.
         */
        authorizedEntity: string,

        /**
         * The scope that is used to obtain the token.
         */
        scope: string,
      },
      callback: () => void,
    ): void;

    /**
     * Resets the app instance identifier and revokes all tokens associated with it.
     *
     * @param callback Function called when the deletion completes. The instance identifier was revoked successfully if {@link runtime.lastError} is not set.
     */
    export function deleteID(
      callback: () => void,
    ): void;

    /**
     * Fired when all the granted tokens need to be refreshed.
     */
    export const onTokenRefresh: events.Event<() => void>;
  }

  /**
   * Use the `chrome.loginState` API to read and monitor the login state.
   *
   * @chrome-platform chromeos
   * @chrome-permission loginState
   * @since Chrome 78
   */
  export namespace loginState {

    /**
     * Gets the type of the profile the extension is in.
     *
     * @param callback
     */
    export function getProfileType(
      callback: (
        result: ProfileType,
      ) => void,
    ): void;

    /**
     * Gets the current session state.
     *
     * @param callback
     */
    export function getSessionState(
      callback: (
        result: SessionState,
      ) => void,
    ): void;

    export type ProfileType = "SIGNIN_PROFILE" | "USER_PROFILE";

    export type SessionState = "UNKNOWN" | "IN_OOBE_SCREEN" | "IN_LOGIN_SCREEN" | "IN_SESSION" | "IN_LOCK_SCREEN";

    /**
     * Dispatched when the session state changes. `sessionState` is the new session state.
     */
    export const onSessionStateChanged: events.Event<(
      sessionState: SessionState,
    ) => void>;
  }

  /**
   * The `chrome.management` API provides ways to manage the list of extensions/apps that are installed and running. It is particularly useful for extensions that [override](https://developer.chrome.com/docs/extensions/override) the built-in New Tab page.
   *
   * @chrome-permission management
   */
  export namespace management {

    /**
     * Returns a list of information about installed extensions and apps.
     */
    export function getAll(): Promise<{
      result: ExtensionInfo[],
    }>;

    /**
     * Returns a list of information about installed extensions and apps.
     *
     * @param callback
     */
    export function getAll(
      callback?: (
        result: ExtensionInfo[],
      ) => void,
    ): void;

    /**
     * Returns information about the installed extension, app, or theme that has the given ID.
     *
     * @param id The ID from an item of {@link management.ExtensionInfo}.
     */
    export function get(
      id: string,
    ): Promise<{
      result: ExtensionInfo,
    }>;

    /**
     * Returns information about the installed extension, app, or theme that has the given ID.
     *
     * @param id The ID from an item of {@link management.ExtensionInfo}.
     * @param callback
     */
    export function get(
      id: string,
      callback?: (
        result: ExtensionInfo,
      ) => void,
    ): void;

    /**
     * Returns information about the calling extension, app, or theme. Note: This function can be used without requesting the 'management' permission in the manifest.
     */
    export function getSelf(): Promise<{
      result: ExtensionInfo,
    }>;

    /**
     * Returns information about the calling extension, app, or theme. Note: This function can be used without requesting the 'management' permission in the manifest.
     *
     * @param callback
     */
    export function getSelf(
      callback?: (
        result: ExtensionInfo,
      ) => void,
    ): void;

    /**
     * Returns a list of [permission warnings](https://developer.chrome.com/docs/extensions/permission_warnings) for the given extension id.
     *
     * @param id The ID of an already installed extension.
     */
    export function getPermissionWarningsById(
      id: string,
    ): Promise<{
      permissionWarnings: string[],
    }>;

    /**
     * Returns a list of [permission warnings](https://developer.chrome.com/docs/extensions/permission_warnings) for the given extension id.
     *
     * @param id The ID of an already installed extension.
     * @param callback
     */
    export function getPermissionWarningsById(
      id: string,
      callback?: (
        permissionWarnings: string[],
      ) => void,
    ): void;

    /**
     * Returns a list of [permission warnings](https://developer.chrome.com/docs/extensions/permission_warnings) for the given extension manifest string. Note: This function can be used without requesting the 'management' permission in the manifest.
     *
     * @param manifestStr Extension manifest JSON string.
     */
    export function getPermissionWarningsByManifest(
      manifestStr: string,
    ): Promise<{
      permissionWarnings: string[],
    }>;

    /**
     * Returns a list of [permission warnings](https://developer.chrome.com/docs/extensions/permission_warnings) for the given extension manifest string. Note: This function can be used without requesting the 'management' permission in the manifest.
     *
     * @param manifestStr Extension manifest JSON string.
     * @param callback
     */
    export function getPermissionWarningsByManifest(
      manifestStr: string,
      callback?: (
        permissionWarnings: string[],
      ) => void,
    ): void;

    /**
     * Enables or disables an app or extension. In most cases this function must be called in the context of a user gesture (e.g. an onclick handler for a button), and may present the user with a native confirmation UI as a way of preventing abuse.
     *
     * @param id This should be the id from an item of {@link management.ExtensionInfo}.
     * @param enabled Whether this item should be enabled or disabled.
     */
    export function setEnabled(
      id: string,
      enabled: boolean,
    ): Promise<{}>;

    /**
     * Enables or disables an app or extension. In most cases this function must be called in the context of a user gesture (e.g. an onclick handler for a button), and may present the user with a native confirmation UI as a way of preventing abuse.
     *
     * @param id This should be the id from an item of {@link management.ExtensionInfo}.
     * @param enabled Whether this item should be enabled or disabled.
     * @param callback
     */
    export function setEnabled(
      id: string,
      enabled: boolean,
      callback?: () => void,
    ): void;

    /**
     * Uninstalls a currently installed app or extension. Note: This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app.
     *
     * @param id This should be the id from an item of {@link management.ExtensionInfo}.
     * @param options
     */
    export function uninstall(
      id: string,
      options?: UninstallOptions,
    ): Promise<{}>;

    /**
     * Uninstalls a currently installed app or extension. Note: This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app.
     *
     * @param id This should be the id from an item of {@link management.ExtensionInfo}.
     * @param options
     * @param callback
     */
    export function uninstall(
      id: string,
      options?: UninstallOptions,
      callback?: () => void,
    ): void;

    /**
     * Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest. This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app.
     *
     * @param options
     */
    export function uninstallSelf(
      options?: UninstallOptions,
    ): Promise<{}>;

    /**
     * Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest. This function does not work in managed environments when the user is not allowed to uninstall the specified extension/app.
     *
     * @param options
     * @param callback
     */
    export function uninstallSelf(
      options?: UninstallOptions,
      callback?: () => void,
    ): void;

    /**
     * Launches an application.
     *
     * @param id The extension id of the application.
     */
    export function launchApp(
      id: string,
    ): Promise<{}>;

    /**
     * Launches an application.
     *
     * @param id The extension id of the application.
     * @param callback
     */
    export function launchApp(
      id: string,
      callback?: () => void,
    ): void;

    /**
     * Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be created.
     *
     * @param id This should be the id from an app item of {@link management.ExtensionInfo}.
     */
    export function createAppShortcut(
      id: string,
    ): Promise<{}>;

    /**
     * Display options to create shortcuts for an app. On Mac, only packaged app shortcuts can be created.
     *
     * @param id This should be the id from an app item of {@link management.ExtensionInfo}.
     * @param callback
     */
    export function createAppShortcut(
      id: string,
      callback?: () => void,
    ): void;

    /**
     * Set the launch type of an app.
     *
     * @param id This should be the id from an app item of {@link management.ExtensionInfo}.
     * @param launchType The target launch type. Always check and make sure this launch type is in {@link ExtensionInfo.availableLaunchTypes}, because the available launch types vary on different platforms and configurations.
     */
    export function setLaunchType(
      id: string,
      launchType: LaunchType,
    ): Promise<{}>;

    /**
     * Set the launch type of an app.
     *
     * @param id This should be the id from an app item of {@link management.ExtensionInfo}.
     * @param launchType The target launch type. Always check and make sure this launch type is in {@link ExtensionInfo.availableLaunchTypes}, because the available launch types vary on different platforms and configurations.
     * @param callback
     */
    export function setLaunchType(
      id: string,
      launchType: LaunchType,
      callback?: () => void,
    ): void;

    /**
     * Generate an app for a URL. Returns the generated bookmark app.
     *
     * @param url The URL of a web page. The scheme of the URL can only be "http" or "https".
     * @param title The title of the generated app.
     */
    export function generateAppForLink(
      url: string,
      title: string,
    ): Promise<{
      result: ExtensionInfo,
    }>;

    /**
     * Generate an app for a URL. Returns the generated bookmark app.
     *
     * @param url The URL of a web page. The scheme of the URL can only be "http" or "https".
     * @param title The title of the generated app.
     * @param callback
     */
    export function generateAppForLink(
      url: string,
      title: string,
      callback?: (
        result: ExtensionInfo,
      ) => void,
    ): void;

    /**
     * Launches the replacement\_web\_app specified in the manifest. Prompts the user to install if not already installed.
     *
     * @since Chrome 77
     */
    export function installReplacementWebApp(): Promise<{}>;

    /**
     * Launches the replacement\_web\_app specified in the manifest. Prompts the user to install if not already installed.
     *
     * @since Chrome 77
     * @param callback
     */
    export function installReplacementWebApp(
      callback?: () => void,
    ): void;

    /**
     * Information about an icon belonging to an extension, app, or theme.
     */
    export interface IconInfo {

      /**
       * A number representing the width and height of the icon. Likely values include (but are not limited to) 128, 48, 24, and 16.
       */
      size: number;

      /**
       * The URL for this icon image. To display a grayscale version of the icon (to indicate that an extension is disabled, for example), append `?grayscale=true` to the URL.
       */
      url: string;
    }

    /**
     * These are all possible app launch types.
     */
    export type LaunchType = "OPEN_AS_REGULAR_TAB" | "OPEN_AS_PINNED_TAB" | "OPEN_AS_WINDOW" | "OPEN_FULL_SCREEN";

    /**
     * A reason the item is disabled.
     */
    export type ExtensionDisabledReason = "unknown" | "permissions_increase";

    /**
     * The type of this extension, app, or theme.
     */
    export type ExtensionType = "extension" | "hosted_app" | "packaged_app" | "legacy_packaged_app" | "theme" | "login_screen_extension";

    /**
     * How the extension was installed. One of
     * admin: The extension was installed because of an administrative policy,
     * development: The extension was loaded unpacked in developer mode,
     * normal: The extension was installed normally via a .crx file,
     * sideload: The extension was installed by other software on the machine,
     * other: The extension was installed by other means.
     */
    export type ExtensionInstallType = "admin" | "development" | "normal" | "sideload" | "other";

    /**
     * Information about an installed extension, app, or theme.
     */
    export interface ExtensionInfo {

      /**
       * The extension's unique identifier.
       */
      id: string;

      /**
       * The name of this extension, app, or theme.
       */
      name: string;

      /**
       * A short version of the name of this extension, app, or theme.
       */
      shortName: string;

      /**
       * The description of this extension, app, or theme.
       */
      description: string;

      /**
       * The [version](https://developer.chrome.com/docs/extensions/manifest/version) of this extension, app, or theme.
       */
      version: string;

      /**
       * The [version name](https://developer.chrome.com/docs/extensions/manifest/version#version_name) of this extension, app, or theme if the manifest specified one.
       */
      versionName?: string;

      /**
       * Whether this extension can be disabled or uninstalled by the user.
       */
      mayDisable: boolean;

      /**
       * Whether this extension can be enabled by the user. This is only returned for extensions which are not enabled.
       *
       * @since Chrome 62
       */
      mayEnable?: boolean;

      /**
       * Whether it is currently enabled or disabled.
       */
      enabled: boolean;

      /**
       * A reason the item is disabled.
       */
      disabledReason?: ExtensionDisabledReason;

      /**
       * True if this is an app.
       *
       * @deprecated Please use {@link management.ExtensionInfo.type}.
       */
      isApp: boolean;

      /**
       * The type of this extension, app, or theme.
       */
      type: ExtensionType;

      /**
       * The launch url (only present for apps).
       */
      appLaunchUrl?: string;

      /**
       * The URL of the homepage of this extension, app, or theme.
       */
      homepageUrl?: string;

      /**
       * The update URL of this extension, app, or theme.
       */
      updateUrl?: string;

      /**
       * Whether the extension, app, or theme declares that it supports offline.
       */
      offlineEnabled: boolean;

      /**
       * The url for the item's options page, if it has one.
       */
      optionsUrl: string;

      /**
       * A list of icon information. Note that this just reflects what was declared in the manifest, and the actual image at that url may be larger or smaller than what was declared, so you might consider using explicit width and height attributes on img tags referencing these images. See the [manifest documentation on icons](https://developer.chrome.com/docs/extensions/manifest/icons) for more details.
       */
      icons?: IconInfo[];

      /**
       * Returns a list of API based permissions.
       */
      permissions: string[];

      /**
       * Returns a list of host based permissions.
       */
      hostPermissions: string[];

      /**
       * How the extension was installed.
       */
      installType: ExtensionInstallType;

      /**
       * The app launch type (only present for apps).
       */
      launchType?: LaunchType;

      /**
       * The currently available launch types (only present for apps).
       */
      availableLaunchTypes?: LaunchType[];
    }

    /**
     * Information about an icon belonging to an extension, app, or theme.
     *
     * @since Chrome 88
     */
    export interface UninstallOptions {

      /**
       * Whether or not a confirm-uninstall dialog should prompt the user. Defaults to false for self uninstalls. If an extension uninstalls another extension, this parameter is ignored and the dialog is always shown.
       */
      showConfirmDialog?: boolean;
    }

    /**
     * Fired when an app or extension has been installed.
     */
    export const onInstalled: events.Event<(
      info: ExtensionInfo,
    ) => void>;

    /**
     * Fired when an app or extension has been uninstalled.
     */
    export const onUninstalled: events.Event<(
      /**
       * The id of the extension, app, or theme that was uninstalled.
       */
      id: string,
    ) => void>;

    /**
     * Fired when an app or extension has been enabled.
     */
    export const onEnabled: events.Event<(
      info: ExtensionInfo,
    ) => void>;

    /**
     * Fired when an app or extension has been disabled.
     */
    export const onDisabled: events.Event<(
      info: ExtensionInfo,
    ) => void>;
  }

  /**
   * Schemas for structured manifest entries
   */
  export namespace manifestTypes {

    /**
     * Chrome settings which can be overriden by an extension.
     */
    export interface ChromeSettingsOverrides {

      /**
       * New value for the homepage.
       */
      homepage?: string;

      /**
       * A search engine
       */
      search_provider?: {
        /**
         * Name of the search engine displayed to user. This may only be omitted if _prepopulated\_id_ is set.
         */
        name?: string,

        /**
         * Omnibox keyword for the search engine. This may only be omitted if _prepopulated\_id_ is set.
         */
        keyword?: string,

        /**
         * An icon URL for the search engine. This may only be omitted if _prepopulated\_id_ is set.
         */
        favicon_url?: string,

        /**
         * An search URL used by the search engine.
         */
        search_url: string,

        /**
         * Encoding of the search term. This may only be omitted if _prepopulated\_id_ is set.
         */
        encoding?: string,

        /**
         * If omitted, this engine does not support suggestions.
         */
        suggest_url?: string,

        /**
         * If omitted, this engine does not support image search.
         */
        image_url?: string,

        /**
         * The string of post parameters to search\_url
         */
        search_url_post_params?: string,

        /**
         * The string of post parameters to suggest\_url
         */
        suggest_url_post_params?: string,

        /**
         * The string of post parameters to image\_url
         */
        image_url_post_params?: string,

        /**
         * A list of URL patterns that can be used, in addition to `search_url`.
         */
        alternate_urls?: string[],

        /**
         * An ID of the built-in search engine in Chrome.
         */
        prepopulated_id?: number,

        /**
         * Specifies if the search provider should be default.
         */
        is_default: boolean,
      };

      /**
       * An array of length one containing a URL to be used as the startup page.
       */
      startup_pages?: string[];
    }

    /**
     * For `"file"` the source is a file passed via `onLaunched` event. For `"device"` contents are fetched from an external device (eg. plugged via USB), without using `file_handlers`. Finally, for `"network"` source, contents should be fetched via network.
     */
    export type FileSystemProviderSource = "file" | "device" | "network";

    /**
     * Represents capabilities of a providing extension.
     */
    export interface FileSystemProviderCapabilities {

      /**
       * Whether configuring via `onConfigureRequested` is supported. By default: `false`.
       */
      configurable?: boolean;

      /**
       * Whether multiple (more than one) mounted file systems are supported. By default: `false`.
       */
      multiple_mounts?: boolean;

      /**
       * Whether setting watchers and notifying about changes is supported. By default: `false`.
       */
      watchable?: boolean;

      /**
       * Source of data for mounted file systems.
       */
      source: FileSystemProviderSource;
    }
  }

  /**
   * Use the `chrome.notifications` API to create rich notifications using templates and show these notifications to users in the system tray.
   *
   * @chrome-permission notifications
   */
  export namespace notifications {

    /**
     * Creates and displays a notification.
     *
     * @param notificationId Identifier of the notification. If not set or empty, an ID will automatically be generated. If it matches an existing notification, this method first clears that notification before proceeding with the create operation. The identifier may not be longer than 500 characters.

    The `notificationId` parameter is required before Chrome 42.
     * @param options Contents of the notification.
     * @param callback Returns the notification id (either supplied or generated) that represents the created notification.

    The callback is required before Chrome 42.
     */
    export function create(
      notificationId: string,
      options: NotificationOptions,
      callback?: (
        notificationId: string,
      ) => void,
    ): void;

    /**
     * Creates and displays a notification.
     *
     * @param options Contents of the notification.
     * @param callback Returns the notification id (either supplied or generated) that represents the created notification.

    The callback is required before Chrome 42.
     */
    export function create(
      options: NotificationOptions,
      callback?: (
        notificationId: string,
      ) => void,
    ): void;

    /**
     * Updates an existing notification.
     *
     * @param notificationId The id of the notification to be updated. This is returned by {@link notifications.create} method.
     * @param options Contents of the notification to update to.
     * @param callback Called to indicate whether a matching notification existed.

    The callback is required before Chrome 42.
     */
    export function update(
      notificationId: string,
      options: NotificationOptions,
      callback?: (
        wasUpdated: boolean,
      ) => void,
    ): void;

    /**
     * Clears the specified notification.
     *
     * @param notificationId The id of the notification to be cleared. This is returned by {@link notifications.create} method.
     * @param callback Called to indicate whether a matching notification existed.

    The callback is required before Chrome 42.
     */
    export function clear(
      notificationId: string,
      callback?: (
        wasCleared: boolean,
      ) => void,
    ): void;

    /**
     * Retrieves all the notifications of this app or extension.
     *
     * @param callback Returns the set of notification\_ids currently in the system.
     */
    export function getAll(
      callback: (
        notifications: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * Retrieves whether the user has enabled notifications from this app or extension.
     *
     * @param callback Returns the current permission level.
     */
    export function getPermissionLevel(
      callback: (
        level: PermissionLevel,
      ) => void,
    ): void;

    export type TemplateType = "basic" | "image" | "list" | "progress";

    export type PermissionLevel = "granted" | "denied";

    export interface NotificationItem {

      /**
       * Title of one item of a list notification.
       */
      title: string;

      /**
       * Additional details about this item.
       */
      message: string;
    }

    export interface NotificationButton {

      title: string;

      /**
       * @deprecated Button icons not visible for Mac OS X users.
       * @deprecated-since Chrome 59
       */
      iconUrl?: string;
    }

    export interface NotificationOptions {

      /**
       * Which type of notification to display. _Required for {@link notifications.create}_ method.
       */
      type?: TemplateType;

      /**
       * A URL to the sender's avatar, app icon, or a thumbnail for image notifications.
       *
       * URLs can be a data URL, a blob URL, or a URL relative to a resource within this extension's .crx file _Required for {@link notifications.create}_ method.
       */
      iconUrl?: string;

      /**
       * A URL to the app icon mask. URLs have the same restrictions as {@link notifications.NotificationOptions.iconUrl iconUrl}.
       *
       * The app icon mask should be in alpha channel, as only the alpha channel of the image will be considered.
       *
       * @deprecated The app icon mask is not visible for Mac OS X users.
       * @deprecated-since Chrome 59
       */
      appIconMaskUrl?: string;

      /**
       * Title of the notification (e.g. sender name for email). _Required for {@link notifications.create}_ method.
       */
      title?: string;

      /**
       * Main notification content. _Required for {@link notifications.create}_ method.
       */
      message?: string;

      /**
       * Alternate notification content with a lower-weight font.
       */
      contextMessage?: string;

      /**
       * Priority ranges from -2 to 2. -2 is lowest priority. 2 is highest. Zero is default. On platforms that don't support a notification center (Windows, Linux & Mac), -2 and -1 result in an error as notifications with those priorities will not be shown at all.
       */
      priority?: number;

      /**
       * A timestamp associated with the notification, in milliseconds past the epoch (e.g. `Date.now() + n`).
       */
      eventTime?: number;

      /**
       * Text and icons for up to two notification action buttons.
       */
      buttons?: NotificationButton[];

      /**
       * A URL to the image thumbnail for image-type notifications. URLs have the same restrictions as {@link notifications.NotificationOptions.iconUrl iconUrl}.
       *
       * @deprecated The image is not visible for Mac OS X users.
       * @deprecated-since Chrome 59
       */
      imageUrl?: string;

      /**
       * Items for multi-item notifications. Users on Mac OS X only see the first item.
       */
      items?: NotificationItem[];

      /**
       * Current progress ranges from 0 to 100.
       */
      progress?: number;

      /**
       * @deprecated This UI hint is ignored as of Chrome 67
       * @deprecated-since Chrome 67
       */
      isClickable?: boolean;

      /**
       * Indicates that the notification should remain visible on screen until the user activates or dismisses the notification. This defaults to false.
       */
      requireInteraction?: boolean;

      /**
       * Indicates that no sounds or vibrations should be made when the notification is being shown. This defaults to false.
       *
       * @since Chrome 70
       */
      silent?: boolean;
    }

    /**
     * The notification closed, either by the system or by user action.
     */
    export const onClosed: events.Event<(
      notificationId: string,
      byUser: boolean,
    ) => void>;

    /**
     * The user clicked in a non-button area of the notification.
     */
    export const onClicked: events.Event<(
      notificationId: string,
    ) => void>;

    /**
     * The user pressed a button in the notification.
     */
    export const onButtonClicked: events.Event<(
      notificationId: string,
      buttonIndex: number,
    ) => void>;

    /**
     * The user changes the permission level. As of Chrome 47, only ChromeOS has UI that dispatches this event.
     */
    export const onPermissionLevelChanged: events.Event<(
      level: PermissionLevel,
    ) => void>;

    /**
     * The user clicked on a link for the app's notification settings. As of Chrome 47, only ChromeOS has UI that dispatches this event. As of Chrome 65, that UI has been removed from ChromeOS, too.
     *
     * @deprecated Custom notification settings button is no longer supported.
     * @deprecated-since Chrome 65
     */
    export const onShowSettings: events.Event<() => void>;
  }

  /**
   * Stub namespace for the "oauth2" manifest key.
   *
   * @chrome-unknown-version
   */
  export namespace oauth2 {

    export interface OAuth2Info {

      /**
       * Client ID of the corresponding extension/app.
       */
      client_id?: string;

      /**
       * Scopes the extension/app needs access to.
       */
      scopes: string[];
    }
  }

  /**
   * The omnibox API allows you to register a keyword with Google Chrome's address bar, which is also known as the omnibox.
   */
  export namespace omnibox {

    /**
     * Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar.
     *
     * @param suggestion A partial SuggestResult object, without the 'content' parameter.
     */
    export function setDefaultSuggestion(
      suggestion: DefaultSuggestResult,
    ): void;

    /**
     * The style type.
     */
    export type DescriptionStyleType = "url" | "match" | "dim";

    /**
     * The window disposition for the omnibox query. This is the recommended context to display results. For example, if the omnibox command is to navigate to a certain URL, a disposition of 'newForegroundTab' means the navigation should take place in a new selected tab.
     */
    export type OnInputEnteredDisposition = "currentTab" | "newForegroundTab" | "newBackgroundTab";

    /**
     * A suggest result.
     */
    export interface SuggestResult {

      /**
       * The text that is put into the URL bar, and that is sent to the extension when the user chooses this entry.
       */
      content: string;

      /**
       * The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match. You must escape the five predefined entities to display them as text: stackoverflow.com/a/1091953/89484
       */
      description: string;

      /**
       * Whether the suggest result can be deleted by the user.
       *
       * @since Chrome 63
       */
      deletable?: boolean;
    }

    /**
     * A suggest result.
     */
    export interface DefaultSuggestResult {

      /**
       * The text that is displayed in the URL dropdown. Can contain XML-style markup for styling. The supported tags are 'url' (for a literal URL), 'match' (for highlighting text that matched what the user's query), and 'dim' (for dim helper text). The styles can be nested, eg. dimmed match.
       */
      description: string;
    }

    /**
     * User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events.
     */
    export const onInputStarted: events.Event<() => void>;

    /**
     * User has changed what is typed into the omnibox.
     */
    export const onInputChanged: events.Event<(
      text: string,
      /**
       * A callback passed to the onInputChanged event used for sending suggestions back to the browser.
       *
       * @param suggestResults Array of suggest results
       */
      suggest: (
        /**
         * Array of suggest results
         */
        suggestResults: SuggestResult[],
      ) => void,
    ) => void>;

    /**
     * User has accepted what is typed into the omnibox.
     */
    export const onInputEntered: events.Event<(
      text: string,
      disposition: OnInputEnteredDisposition,
    ) => void>;

    /**
     * User has ended the keyword input session without accepting the input.
     */
    export const onInputCancelled: events.Event<() => void>;

    /**
     * User has deleted a suggested result.
     *
     * @since Chrome 63
     */
    export const onDeleteSuggestion: events.Event<(
      /**
       * Text of the deleted suggestion.
       */
      text: string,
    ) => void>;
  }

  /**
   * Use the `chrome.pageCapture` API to save a tab as MHTML.
   *
   * @chrome-permission pageCapture
   */
  export namespace pageCapture {

    /**
     * Saves the content of the tab with given id as MHTML.
     *
     * @param details
     * @param callback Called when the MHTML has been generated.
     */
    export function saveAsMHTML(
      details: {
        /**
         * The id of the tab to save as MHTML.
         */
        tabId: number,
      },
      callback: (
        /**
         * The MHTML data as a Blob.
         */
        mhtmlData?: ArrayBuffer,
      ) => void,
    ): void;
  }

  /**
   * Use the `chrome.permissions` API to request [declared optional permissions](https://developer.chrome.com/docs/extensions/reference/permissions/#manifest) at run time rather than install time, so users understand why the permissions are needed and grant only those that are necessary.
   */
  export namespace permissions {

    /**
     * Gets the extension's current set of permissions.
     *
     * @param callback
     */
    export function getAll(
      callback: (
        /**
         * The extension's active permissions. Note that the `origins` property will contain granted origins from those specified in the `permissions` and `optional_permissions` keys in the manifest and those associated with [Content Scripts](https://developer.chrome.com/docs/extensions/content_scripts).
         */
        permissions: Permissions,
      ) => void,
    ): void;

    /**
     * Checks if the extension has the specified permissions.
     *
     * @param permissions
     * @param callback
     */
    export function contains(
      permissions: Permissions,
      callback: (
        /**
         * True if the extension has the specified permissions. If an origin is specified as both an optional permission and a content script match pattern, this will return `false` unless both permissions are granted.
         */
        result: boolean,
      ) => void,
    ): void;

    /**
     * Requests access to the specified permissions, displaying a prompt to the user if necessary. These permissions must either be defined in the `optional_permissions` field of the manifest or be required permissions that were withheld by the user. Paths on origin patterns will be ignored. You can request subsets of optional origin permissions; for example, if you specify `*://*\/*` in the `optional_permissions` section of the manifest, you can request `http://example.com/`. If there are any problems requesting the permissions, {@link runtime.lastError} will be set.
     *
     * @param permissions
     * @param callback
     */
    export function request(
      permissions: Permissions,
      callback?: (
        /**
         * True if the user granted the specified permissions.
         */
        granted: boolean,
      ) => void,
    ): void;

    /**
     * Removes access to the specified permissions. If there are any problems removing the permissions, {@link runtime.lastError} will be set.
     *
     * @param permissions
     * @param callback
     */
    export function remove(
      permissions: Permissions,
      callback?: (
        /**
         * True if the permissions were removed.
         */
        removed: boolean,
      ) => void,
    ): void;

    export interface Permissions {

      /**
       * List of named permissions (does not include hosts or origins).
       */
      permissions?: string[];

      /**
       * The list of host permissions, including those specified in the `optional_permissions` or `permissions` keys in the manifest, and those associated with [Content Scripts](https://developer.chrome.com/docs/extensions/content_scripts).
       */
      origins?: string[];
    }

    /**
     * Fired when the extension acquires new permissions.
     */
    export const onAdded: events.Event<(
      /**
       * The newly acquired permissions.
       */
      permissions: Permissions,
    ) => void>;

    /**
     * Fired when access to permissions has been removed from the extension.
     */
    export const onRemoved: events.Event<(
      /**
       * The permissions that have been removed.
       */
      permissions: Permissions,
    ) => void>;
  }

  /**
   * Use the `chrome.platformKeys` API to access client certificates managed by the platform. If the user or policy grants the permission, an extension can use such a certficate in its custom authentication protocol. E.g. this allows usage of platform managed certificates in third party VPNs (see {@link vpnProvider chrome.vpnProvider}).
   *
   * @chrome-platform chromeos
   * @chrome-permission platformKeys
   * @chrome-disallow-service-workers
   */
  export namespace platformKeys {

    /**
     * This method filters from a list of client certificates the ones that are known to the platform, match `request` and for which the extension has permission to access the certificate and its private key. If `interactive` is true, the user is presented a dialog where they can select from matching certificates and grant the extension access to the certificate. The selected/filtered client certificates will be passed to `callback`.
     *
     * @param details
     * @param callback
     */
    export function selectClientCertificates(
      details: SelectDetails,
      callback: (
        /**
         * The list of certificates that match the request, that the extension has permission for and, if `interactive` is true, that were selected by the user.
         */
        matches: Match[],
      ) => void,
    ): void;

    /**
     * Passes the key pair of `certificate` for usage with {@link platformKeys.subtleCrypto} to `callback`.
     *
     * @param certificate The certificate of a {@link Match} returned by {@link selectClientCertificates}.
     * @param parameters Determines signature/hash algorithm parameters additionally to the parameters fixed by the key itself. The same parameters are accepted as by WebCrypto's [importKey](https://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-importKey) function, e.g. `RsaHashedImportParams` for a RSASSA-PKCS1-v1\_5 key and `EcKeyImportParams` for EC key. Additionally for RSASSA-PKCS1-v1\_5 keys, hashing algorithm name parameter can be specified with one of the following values: "none", "SHA-1", "SHA-256", "SHA-384", or "SHA-512", e.g. `{"hash": { "name": "none" } }`. The sign function will then apply PKCS#1 v1.5 padding but not hash the given data.

    Currently, this method only supports the "RSASSA-PKCS1-v1\_5" and "ECDSA" algorithms.
     * @param callback The public and private [CryptoKey](https://www.w3.org/TR/WebCryptoAPI/#dfn-CryptoKey) of a certificate which can only be used with {@link platformKeys.subtleCrypto}.
     */
    export function getKeyPair(
      certificate: ArrayBuffer,
      parameters: {[name: string]: any},
      callback: (
        publicKey: {[name: string]: any},
        /**
         * Might be `null` if this extension does not have access to it.
         */
        privateKey?: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * Passes the key pair identified by `publicKeySpkiDer` for usage with {@link platformKeys.subtleCrypto} to `callback`.
     *
     * @since Chrome 85
     * @param publicKeySpkiDer A DER-encoded X.509 SubjectPublicKeyInfo, obtained e.g. by calling WebCrypto's exportKey function with format="spki".
     * @param parameters Provides signature and hash algorithm parameters, in addition to those fixed by the key itself. The same parameters are accepted as by WebCrypto's [importKey](https://www.w3.org/TR/WebCryptoAPI/#SubtleCrypto-method-importKey) function, e.g. `RsaHashedImportParams` for a RSASSA-PKCS1-v1\_5 key. For RSASSA-PKCS1-v1\_5 keys, we need to also pass a "hash" parameter `{ "hash": { "name": string } }`. The "hash" parameter represents the name of the hashing algorithm to be used in the digest operation before a sign. It is possible to pass "none" as the hash name, in which case the sign function will apply PKCS#1 v1.5 padding and but not hash the given data.

    Currently, this method supports the "ECDSA" algorithm with named-curve P-256 and "RSASSA-PKCS1-v1\_5" algorithm with one of the hashing algorithms "none", "SHA-1", "SHA-256", "SHA-384", and "SHA-512".
     * @param callback The public and private [CryptoKey](https://www.w3.org/TR/WebCryptoAPI/#dfn-CryptoKey) of a certificate which can only be used with {@link platformKeys.subtleCrypto}.
     */
    export function getKeyPairBySpki(
      publicKeySpkiDer: ArrayBuffer,
      parameters: {[name: string]: any},
      callback: (
        publicKey: {[name: string]: any},
        /**
         * Might be `null` if this extension does not have access to it.
         */
        privateKey?: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * An implementation of WebCrypto's [SubtleCrypto](https://www.w3.org/TR/WebCryptoAPI/#subtlecrypto-interface) that allows crypto operations on keys of client certificates that are available to this extension.
     */
    export function subtleCrypto(): {[name: string]: any};

    /**
     * Checks whether `details.serverCertificateChain` can be trusted for `details.hostname` according to the trust settings of the platform. Note: The actual behavior of the trust verification is not fully specified and might change in the future. The API implementation verifies certificate expiration, validates the certification path and checks trust by a known CA. The implementation is supposed to respect the EKU serverAuth and to support subject alternative names.
     *
     * @param details
     * @param callback
     */
    export function verifyTLSServerCertificate(
      details: VerificationDetails,
      callback: (
        result: VerificationResult,
      ) => void,
    ): void;

    export interface Match {

      /**
       * The DER encoding of a X.509 certificate.
       */
      certificate: ArrayBuffer;

      /**
       * The [KeyAlgorithm](https://www.w3.org/TR/WebCryptoAPI/#key-algorithm-dictionary) of the certified key. This contains algorithm parameters that are inherent to the key of the certificate (e.g. the key length). Other parameters like the hash function used by the sign function are not included.
       */
      keyAlgorithm: {[name: string]: any};
    }

    export type ClientCertificateType = "rsaSign" | "ecdsaSign";

    export interface ClientCertificateRequest {

      /**
       * This field is a list of the types of certificates requested, sorted in order of the server's preference. Only certificates of a type contained in this list will be retrieved. If `certificateTypes` is the empty list, however, certificates of any type will be returned.
       */
      certificateTypes: ClientCertificateType[];

      /**
       * List of distinguished names of certificate authorities allowed by the server. Each entry must be a DER-encoded X.509 DistinguishedName.
       */
      certificateAuthorities: ArrayBuffer[];
    }

    export interface SelectDetails {

      /**
       * Only certificates that match this request will be returned.
       */
      request: ClientCertificateRequest;

      /**
       * If given, the `selectClientCertificates` operates on this list. Otherwise, obtains the list of all certificates from the platform's certificate stores that are available to this extensions. Entries that the extension doesn't have permission for or which doesn't match the request, are removed.
       */
      clientCerts?: ArrayBuffer[];

      /**
       * If true, the filtered list is presented to the user to manually select a certificate and thereby granting the extension access to the certificate(s) and key(s). Only the selected certificate(s) will be returned. If is false, the list is reduced to all certificates that the extension has been granted access to (automatically or manually).
       */
      interactive: boolean;
    }

    export interface VerificationDetails {

      /**
       * Each chain entry must be the DER encoding of a X.509 certificate, the first entry must be the server certificate and each entry must certify the entry preceding it.
       */
      serverCertificateChain: ArrayBuffer[];

      /**
       * The hostname of the server to verify the certificate for, e.g. the server that presented the `serverCertificateChain`.
       */
      hostname: string;
    }

    export interface VerificationResult {

      /**
       * The result of the trust verification: true if trust for the given verification details could be established and false if trust is rejected for any reason.
       */
      trusted: boolean;

      /**
       * If the trust verification failed, this array contains the errors reported by the underlying network layer. Otherwise, this array is empty.
       *
       * **Note:** This list is meant for debugging only and may not contain all relevant errors. The errors returned may change in future revisions of this API, and are not guaranteed to be forwards or backwards compatible.
       */
      debug_errors: string[];
    }
  }

  /**
   * Use the `chrome.power` API to override the system's power management features.
   *
   * @chrome-permission power
   */
  export namespace power {

    /**
     * Requests that power management be temporarily disabled. `level` describes the degree to which power management should be disabled. If a request previously made by the same app is still active, it will be replaced by the new request.
     *
     * @param level
     */
    export function requestKeepAwake(
      level: Level,
    ): void;

    /**
     * Releases a request previously made via requestKeepAwake().
     */
    export function releaseKeepAwake(): void;

    export type Level = "system" | "display";
  }

  /**
   * The `chrome.printerProvider` API exposes events used by print manager to query printers controlled by extensions, to query their capabilities and to submit print jobs to these printers.
   *
   * @chrome-permission printerProvider
   */
  export namespace printerProvider {

    /**
     * Error codes returned in response to {@link onPrintRequested} event.
     */
    export type PrintError = "OK" | "FAILED" | "INVALID_TICKET" | "INVALID_DATA";

    export interface PrinterInfo {

      /**
       * Unique printer ID.
       */
      id: string;

      /**
       * Printer's human readable name.
       */
      name: string;

      /**
       * Printer's human readable description.
       */
      description?: string;
    }

    export interface PrintJob {

      /**
       * ID of the printer which should handle the job.
       */
      printerId: string;

      /**
       * The print job title.
       */
      title: string;

      /**
       * Print ticket in [CJT format](https://developers.google.com/cloud-print/docs/cdd#cjt).
       */
      ticket: {[name: string]: any};

      /**
       * The document content type. Supported formats are `"application/pdf"` and `"image/pwg-raster"`.
       */
      contentType: string;

      /**
       * Blob containing the document data to print. Format must match `contentType`.
       */
      document: Blob;
    }

    /**
     * Event fired when print manager requests printers provided by extensions.
     */
    export const onGetPrintersRequested: events.Event<(
      /**
       * Callback to return printer list. Every listener must call callback exactly once.
       *
       * @param printerInfo
       */
      resultCallback: (
        printerInfo: PrinterInfo[],
      ) => void,
    ) => void>;

    /**
     * Event fired when print manager requests information about a USB device that may be a printer.
     *
     * _Note:_ An application should not rely on this event being fired more than once per device. If a connected device is supported it should be returned in the {@link onGetPrintersRequested} event.
     */
    export const onGetUsbPrinterInfoRequested: events.Event<(
      /**
       * The USB device.
       */
      device: usb.Device,

      /**
       * Callback to return printer info. The receiving listener must call callback exactly once. If the parameter to this callback is undefined that indicates that the application has determined that the device is not supported.
       *
       * @param printerInfo
       */
      resultCallback: (
        printerInfo?: PrinterInfo,
      ) => void,
    ) => void>;

    /**
     * Event fired when print manager requests printer capabilities.
     */
    export const onGetCapabilityRequested: events.Event<(
      /**
       * Unique ID of the printer whose capabilities are requested.
       */
      printerId: string,

      /**
       * Callback to return device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). The receiving listener must call callback exectly once.
       *
       * @param capabilities Device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd).
       */
      resultCallback: (
        /**
         * Device capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd).
         */
        capabilities: {[name: string]: any},
      ) => void,
    ) => void>;

    /**
     * Event fired when print manager requests printing.
     */
    export const onPrintRequested: events.Event<(
      /**
       * The printing request parameters.
       */
      printJob: PrintJob,

      /**
       * Callback that should be called when the printing request is completed.
       *
       * @param result
       */
      resultCallback: (
        result: PrintError,
      ) => void,
    ) => void>;
  }

  /**
   * Use the `chrome.printing` API to send print jobs to printers installed on Chromebook.
   *
   * @chrome-platform chromeos
   * @chrome-permission printing
   * @since Chrome 81
   */
  export namespace printing {

    /**
     * The maximum number of times that {@link submitJob} can be called per minute.
     */
    export const MAX_SUBMIT_JOB_CALLS_PER_MINUTE: 20;

    /**
     * The maximum number of times that {@link getPrinterInfo} can be called per minute.
     */
    export const MAX_GET_PRINTER_INFO_CALLS_PER_MINUTE: 20;

    /**
     * Submits the job for print. If the extension is not listed in PrintingAPIExtensionsAllowlist policy, the user will be prompted to accept the print job.
     *
     * @param request
     * @param callback
     */
    export function submitJob(
      request: SubmitJobRequest,
      callback: (
        response: SubmitJobResponse,
      ) => void,
    ): void;

    /**
     * Cancels previously submitted job.
     *
     * @param jobId The id of the print job to cancel. This should be the same id received in a {@link SubmitJobResponse}.
     * @param callback
     */
    export function cancelJob(
      jobId: string,
      callback: () => void,
    ): void;

    /**
     * Returns the list of available printers on the device. This includes manually added, enterprise and discovered printers.
     *
     * @param callback
     */
    export function getPrinters(
      callback: (
        printers: Printer[],
      ) => void,
    ): void;

    /**
     * Returns the status and capabilities of the printer in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). This call will fail with a runtime error if no printers with given id are installed.
     *
     * @param printerId
     * @param callback
     */
    export function getPrinterInfo(
      printerId: string,
      callback: (
        response: GetPrinterInfoResponse,
      ) => void,
    ): void;

    export interface SubmitJobRequest {

      /**
       * The print job to be submitted. The only supported content type is "application/pdf", and the CJT ticket shouldn't include FitToPageTicketItem, PageRangeTicketItem, ReverseOrderTicketItem and VendorTicketItem fields since they are irrelevant for native printing. All other fields must be present.
       */
      job: printerProvider.PrintJob;
    }

    /**
     * The status of {@link submitJob} request.
     */
    export type SubmitJobStatus = "OK" | "USER_REJECTED";

    export interface SubmitJobResponse {

      /**
       * The status of the request.
       */
      status: SubmitJobStatus;

      /**
       * The id of created print job. This is a unique identifier among all print jobs on the device. If status is not OK, jobId will be null.
       */
      jobId?: string;
    }

    /**
     * The source of the printer.
     */
    export type PrinterSource = "USER" | "POLICY";

    export interface Printer {

      /**
       * The printer's identifier; guaranteed to be unique among printers on the device.
       */
      id: string;

      /**
       * The name of the printer.
       */
      name: string;

      /**
       * The human-readable description of the printer.
       */
      description: string;

      /**
       * The printer URI. This can be used by extensions to choose the printer for the user.
       */
      uri: string;

      /**
       * The source of the printer (user or policy configured).
       */
      source: PrinterSource;

      /**
       * The flag which shows whether the printer fits [DefaultPrinterSelection](https://chromium.org/administrators/policy-list-3#DefaultPrinterSelection) rules. Note that several printers could be flagged.
       */
      isDefault: boolean;

      /**
       * The value showing how recent the printer was used for printing from Chrome. The lower the value is the more recent the printer was used. The minimum value is 0. Missing value indicates that the printer wasn't used recently. This value is guaranteed to be unique amongst printers.
       */
      recentlyUsedRank?: number;
    }

    /**
     * The status of the printer.
     */
    export type PrinterStatus = "DOOR_OPEN" | "TRAY_MISSING" | "OUT_OF_INK" | "OUT_OF_PAPER" | "OUTPUT_FULL" | "PAPER_JAM" | "GENERIC_ISSUE" | "STOPPED" | "UNREACHABLE" | "AVAILABLE";

    export interface GetPrinterInfoResponse {

      /**
       * Printer capabilities in [CDD format](https://developers.google.com/cloud-print/docs/cdd#cdd). The property may be missing.
       */
      capabilities?: {[name: string]: any};

      /**
       * The status of the printer.
       */
      status: PrinterStatus;
    }

    /**
     * Status of the print job.
     */
    export type JobStatus = "PENDING" | "IN_PROGRESS" | "FAILED" | "CANCELED" | "PRINTED";

    /**
     * Event fired when the status of the job is changed. This is only fired for the jobs created by this extension.
     */
    export const onJobStatusChanged: events.Event<(
      jobId: string,
      status: JobStatus,
    ) => void>;
  }

  /**
   * Use the `chrome.printingMetrics` API to fetch data about printing usage.
   *
   * @chrome-platform chromeos
   * @chrome-permission printingMetrics
   * @since Chrome 79
   */
  export namespace printingMetrics {

    /**
     * Returns the list of the finished print jobs.
     *
     * @param callback
     */
    export function getPrintJobs(
      callback: (
        jobs: PrintJobInfo[],
      ) => void,
    ): void;

    /**
     * The source of the print job.
     */
    export type PrintJobSource = "PRINT_PREVIEW" | "ANDROID_APP" | "EXTENSION";

    /**
     * The final status of the print job.
     */
    export type PrintJobStatus = "FAILED" | "CANCELED" | "PRINTED";

    /**
     * The source of the printer.
     */
    export type PrinterSource = "USER" | "POLICY";

    export type ColorMode = "BLACK_AND_WHITE" | "COLOR";

    export type DuplexMode = "ONE_SIDED" | "TWO_SIDED_LONG_EDGE" | "TWO_SIDED_SHORT_EDGE";

    export interface MediaSize {

      /**
       * Width (in micrometers) of the media used for printing.
       */
      width: number;

      /**
       * Height (in micrometers) of the media used for printing.
       */
      height: number;

      /**
       * Vendor-provided ID, e.g. "iso\_a3\_297x420mm" or "na\_index-3x5\_3x5in". Possible values are values of "media" IPP attribute and can be found on [IANA page](https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xhtml) .
       */
      vendorId: string;
    }

    export interface PrintSettings {

      /**
       * The requested color mode.
       */
      color: ColorMode;

      /**
       * The requested duplex mode.
       */
      duplex: DuplexMode;

      /**
       * The requested media size.
       */
      mediaSize: MediaSize;

      /**
       * The requested number of copies.
       */
      copies: number;
    }

    export interface Printer {

      /**
       * Displayed name of the printer.
       */
      name: string;

      /**
       * The full path for the printer. Contains protocol, hostname, port, and queue.
       */
      uri: string;

      /**
       * The source of the printer.
       */
      source: PrinterSource;
    }

    export interface PrintJobInfo {

      /**
       * The ID of the job.
       */
      id: string;

      /**
       * The title of the document which was printed.
       */
      title: string;

      /**
       * Source showing who initiated the print job.
       */
      source: PrintJobSource;

      /**
       * ID of source. Null if source is PRINT\_PREVIEW or ANDROID\_APP.
       */
      sourceId?: string;

      /**
       * The final status of the job.
       */
      status: PrintJobStatus;

      /**
       * The job creation time (in milliseconds past the Unix epoch).
       */
      creationTime: number;

      /**
       * The job completion time (in milliseconds past the Unix epoch).
       */
      completionTime: number;

      /**
       * The info about the printer which printed the document.
       */
      printer: Printer;

      /**
       * The settings of the print job.
       */
      settings: PrintSettings;

      /**
       * The number of pages in the document.
       */
      numberOfPages: number;

      /**
       * The status of the printer.
       *
       * @since Chrome 85
       */
      printer_status: printing.PrinterStatus;
    }

    /**
     * Event fired when the print job is finished. This includes any of termination statuses: FAILED, CANCELED and PRINTED.
     */
    export const onPrintJobFinished: events.Event<(
      jobInfo: PrintJobInfo,
    ) => void>;
  }

  /**
   * Use the `chrome.privacy` API to control usage of the features in Chrome that can affect a user's privacy. This API relies on the [ChromeSetting prototype of the type API](https://developer.chrome.com/docs/extensions/reference/types/#ChromeSetting) for getting and setting Chrome's configuration.
   *
   * @chrome-permission privacy
   */
  export namespace privacy {

    /**
     * Settings that influence Chrome's handling of network connections in general.
     */
    export const network: {
      /**
       * If enabled, Chrome attempts to speed up your web browsing experience by pre-resolving DNS entries and preemptively opening TCP and SSL connections to servers. This preference only affects actions taken by Chrome's internal prediction service. It does not affect webpage-initiated prefectches or preconnects. This preference's value is a boolean, defaulting to `true`.
       */
      networkPredictionEnabled: types.ChromeSetting<boolean>,

      /**
       * Allow users to specify the media performance/privacy tradeoffs which impacts how WebRTC traffic will be routed and how much local address information is exposed. This preference's value is of type IPHandlingPolicy, defaulting to `default`.
       */
      webRTCIPHandlingPolicy: types.ChromeSetting<IPHandlingPolicy>,
    };

    /**
     * Settings that enable or disable features that require third-party network services provided by Google and your default search provider.
     */
    export const services: {
      /**
       * If enabled, Chrome uses a web service to help resolve navigation errors. This preference's value is a boolean, defaulting to `true`.
       */
      alternateErrorPagesEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome offers to automatically fill in forms. This preference's value is a boolean, defaulting to `true`.
       *
       * @deprecated Please use privacy.services.autofillAddressEnabled and privacy.services.autofillCreditCardEnabled. This remains for backward compatibility in this release and will be removed in the future.
       * @deprecated-since Chrome 70
       */
      autofillEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome offers to automatically fill in addresses and other form data. This preference's value is a boolean, defaulting to `true`.
       *
       * @since Chrome 70
       */
      autofillAddressEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome offers to automatically fill in credit card forms. This preference's value is a boolean, defaulting to `true`.
       *
       * @since Chrome 70
       */
      autofillCreditCardEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, the password manager will ask if you want to save passwords. This preference's value is a boolean, defaulting to `true`.
       */
      passwordSavingEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome does its best to protect you from phishing and malware. This preference's value is a boolean, defaulting to `true`.
       */
      safeBrowsingEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome will send additional information to Google when SafeBrowsing blocks a page, such as the content of the blocked page. This preference's value is a boolean, defaulting to `false`.
       */
      safeBrowsingExtendedReportingEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome sends the text you type into the Omnibox to your default search engine, which provides predictions of websites and searches that are likely completions of what you've typed so far. This preference's value is a boolean, defaulting to `true`.
       */
      searchSuggestEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome uses a web service to help correct spelling errors. This preference's value is a boolean, defaulting to `false`.
       */
      spellingServiceEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome offers to translate pages that aren't in a language you read. This preference's value is a boolean, defaulting to `true`.
       */
      translationServiceEnabled: types.ChromeSetting<boolean>,
    };

    /**
     * Settings that determine what information Chrome makes available to websites.
     */
    export const websites: {
      /**
       * If disabled, Chrome blocks third-party sites from setting cookies. The value of this preference is of type boolean, and the default value is `true`.
       */
      thirdPartyCookiesAllowed: types.ChromeSetting<boolean>,

      /**
       * If enabled, the experimental [Privacy Sandbox](”https://www.chromium.org/Home/chromium-privacy/privacy-sandbox”) features are active. The value of this preference is of type boolean, and the default value is `true`. PLEASE NOTE: The schema of this API may change in the future as the Privacy Sandbox features crystallize. In that case, we will provide prior notice.
       *
       * @since Chrome 90
       */
      privacySandboxEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome sends auditing pings when requested by a website (`<a ping>`). The value of this preference is of type boolean, and the default value is `true`.
       */
      hyperlinkAuditingEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome sends `referer` headers with your requests. Yes, the name of this preference doesn't match the misspelled header. No, we're not going to change it. The value of this preference is of type boolean, and the default value is `true`.
       */
      referrersEnabled: types.ChromeSetting<boolean>,

      /**
       * If enabled, Chrome sends 'Do Not Track' (`DNT: 1`) header with your requests. The value of this preference is of type boolean, and the default value is `false`.
       *
       * @since Chrome 65
       */
      doNotTrackEnabled: types.ChromeSetting<boolean>,

      /**
       * **Available on Windows and ChromeOS only**: If enabled, Chrome provides a unique ID to plugins in order to run protected content. The value of this preference is of type boolean, and the default value is `true`.
       */
      protectedContentEnabled: types.ChromeSetting<boolean>,
    };

    /**
     * The IP handling policy of WebRTC.
     */
    export type IPHandlingPolicy = "default" | "default_public_and_private_interfaces" | "default_public_interface_only" | "disable_non_proxied_udp";
  }

  /**
   * Use the `chrome.processes` API to interact with the browser's processes.
   *
   * @chrome-permission processes
   * @chrome-channel dev
   * @alpha
   */
  export namespace processes {

    /**
     * Returns the ID of the renderer process for the specified tab.
     *
     * @param tabId The ID of the tab for which the renderer process ID is to be returned.
     * @param callback A callback to return the ID of the renderer process of a tab.
     */
    export function getProcessIdForTab(
      tabId: number,
      callback: (
        /**
         * Process ID of the tab's renderer process.
         */
        processId: number,
      ) => void,
    ): void;

    /**
     * Terminates the specified renderer process. Equivalent to visiting about:crash, but without changing the tab's URL.
     *
     * @param processId The ID of the process to be terminated.
     * @param callback A callback to report the status of the termination.
     */
    export function terminate(
      processId: number,
      callback?: (
        /**
         * True if terminating the process was successful, and false otherwise.
         */
        didTerminate: boolean,
      ) => void,
    ): void;

    /**
     * Retrieves the process information for each process ID specified.
     *
     * @param processIds The list of process IDs or single process ID for which to return the process information. An empty list indicates all processes are requested.
     * @param includeMemory True if detailed memory usage is required. Note, collecting memory usage information incurs extra CPU usage and should only be queried for when needed.
     * @param callback A callback called when the processes information is collected.
     */
    export function getProcessInfo(
      processIds: number | number[],
      includeMemory: boolean,
      callback: (
        /**
         * A dictionary of {@link Process} objects for each requested process that is a live child process of the current browser process, indexed by process ID. Metrics requiring aggregation over time will not be populated in each Process object.
         */
        processes: {[name: string]: any},
      ) => void,
    ): void;

    /**
     * The types of the browser processes.
     */
    export type ProcessType = "browser" | "renderer" | "extension" | "notification" | "plugin" | "worker" | "nacl" | "service_worker" | "utility" | "gpu" | "other";

    export interface TaskInfo {

      /**
       * The title of the task.
       */
      title: string;

      /**
       * Optional tab ID, if this task represents a tab running on a renderer process.
       */
      tabId?: number;
    }

    export interface Cache {

      /**
       * The size of the cache, in bytes.
       */
      size: number;

      /**
       * The part of the cache that is utilized, in bytes.
       */
      liveSize: number;
    }

    export interface Process {

      /**
       * Unique ID of the process provided by the browser.
       */
      id: number;

      /**
       * The ID of the process, as provided by the OS.
       */
      osProcessId: number;

      /**
       * The type of process.
       */
      type: ProcessType;

      /**
       * The profile which the process is associated with.
       */
      profile: string;

      /**
       * The debugging port for Native Client processes. Zero for other process types and for NaCl processes that do not have debugging enabled.
       */
      naclDebugPort: number;

      /**
       * Array of TaskInfos representing the tasks running on this process.
       */
      tasks: TaskInfo[];

      /**
       * The most recent measurement of the process’s CPU usage, expressed as the percentage of a single CPU core used in total, by all of the process’s threads. This gives a value from zero to CpuInfo.numOfProcessors\*100, which can exceed 100% in multi-threaded processes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      cpu?: number;

      /**
       * The most recent measurement of the process network usage, in bytes per second. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      network?: number;

      /**
       * The most recent measurement of the process private memory usage, in bytes. Only available when receiving the object as part of a callback from onUpdatedWithMemory or getProcessInfo with the includeMemory flag.
       */
      privateMemory?: number;

      /**
       * The most recent measurement of the process JavaScript allocated memory, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      jsMemoryAllocated?: number;

      /**
       * The most recent measurement of the process JavaScript memory used, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      jsMemoryUsed?: number;

      /**
       * The most recent measurement of the process’s SQLite memory usage, in bytes. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      sqliteMemory?: number;

      /**
       * The most recent information about the image cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      imageCache?: Cache;

      /**
       * The most recent information about the script cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      scriptCache?: Cache;

      /**
       * The most recent information about the CSS cache for the process. Only available when receiving the object as part of a callback from onUpdated or onUpdatedWithMemory.
       */
      cssCache?: Cache;
    }

    /**
     * Fired each time the Task Manager updates its process statistics, providing the dictionary of updated Process objects, indexed by process ID.
     */
    export const onUpdated: events.Event<(
      /**
       * A dictionary of updated {@link Process} objects for each live process in the browser, indexed by process ID. Metrics requiring aggregation over time will be populated in each Process object.
       */
      processes: {[name: string]: any},
    ) => void>;

    /**
     * Fired each time the Task Manager updates its process statistics, providing the dictionary of updated Process objects, indexed by process ID. Identical to onUpdate, with the addition of memory usage details included in each Process object. Note, collecting memory usage information incurs extra CPU usage and should only be listened for when needed.
     */
    export const onUpdatedWithMemory: events.Event<(
      /**
       * A dictionary of updated {@link Process} objects for each live process in the browser, indexed by process ID. Memory usage details will be included in each Process object.
       */
      processes: {[name: string]: any},
    ) => void>;

    /**
     * Fired each time a process is created, providing the corrseponding Process object.
     */
    export const onCreated: events.Event<(
      /**
       * Details of the process that was created. Metrics requiring aggregation over time will not be populated in the object.
       */
      process: Process,
    ) => void>;

    /**
     * Fired each time a process becomes unresponsive, providing the corrseponding Process object.
     */
    export const onUnresponsive: events.Event<(
      /**
       * Details of the unresponsive process. Metrics requiring aggregation over time will not be populated in the object. Only available for renderer processes.
       */
      process: Process,
    ) => void>;

    /**
     * Fired each time a process is terminated, providing the type of exit.
     */
    export const onExited: events.Event<(
      /**
       * The ID of the process that exited.
       */
      processId: number,

      /**
       * The type of exit that occurred for the process - normal, abnormal, killed, crashed. Only available for renderer processes.
       */
      exitType: number,

      /**
       * The exit code if the process exited abnormally. Only available for renderer processes.
       */
      exitCode: number,
    ) => void>;
  }

  /**
   * Use the `chrome.proxy` API to manage Chrome's proxy settings. This API relies on the [ChromeSetting prototype of the type API](https://developer.chrome.com/docs/extensions/reference/types/#ChromeSetting) for getting and setting the proxy configuration.
   *
   * @chrome-permission proxy
   */
  export namespace proxy {

    /**
     * Proxy settings to be used. The value of this setting is a ProxyConfig object.
     */
    export const settings: types.ChromeSetting<ProxyConfig>;

    /**
     * @since Chrome 54
     */
    export type Scheme = "http" | "https" | "quic" | "socks4" | "socks5";

    /**
     * @since Chrome 54
     */
    export type Mode = "direct" | "auto_detect" | "pac_script" | "fixed_servers" | "system";

    /**
     * An object encapsulating a single proxy server's specification.
     */
    export interface ProxyServer {

      /**
       * The scheme (protocol) of the proxy server itself. Defaults to 'http'.
       */
      scheme?: Scheme;

      /**
       * The hostname or IP address of the proxy server. Hostnames must be in ASCII (in Punycode format). IDNA is not supported, yet.
       */
      host: string;

      /**
       * The port of the proxy server. Defaults to a port that depends on the scheme.
       */
      port?: number;
    }

    /**
     * An object encapsulating the set of proxy rules for all protocols. Use either 'singleProxy' or (a subset of) 'proxyForHttp', 'proxyForHttps', 'proxyForFtp' and 'fallbackProxy'.
     */
    export interface ProxyRules {

      /**
       * The proxy server to be used for all per-URL requests (that is http, https, and ftp).
       */
      singleProxy?: ProxyServer;

      /**
       * The proxy server to be used for HTTP requests.
       */
      proxyForHttp?: ProxyServer;

      /**
       * The proxy server to be used for HTTPS requests.
       */
      proxyForHttps?: ProxyServer;

      /**
       * The proxy server to be used for FTP requests.
       */
      proxyForFtp?: ProxyServer;

      /**
       * The proxy server to be used for everthing else or if any of the specific proxyFor... is not specified.
       */
      fallbackProxy?: ProxyServer;

      /**
       * List of servers to connect to without a proxy server.
       */
      bypassList?: string[];
    }

    /**
     * An object holding proxy auto-config information. Exactly one of the fields should be non-empty.
     */
    export interface PacScript {

      /**
       * URL of the PAC file to be used.
       */
      url?: string;

      /**
       * A PAC script.
       */
      data?: string;

      /**
       * If true, an invalid PAC script will prevent the network stack from falling back to direct connections. Defaults to false.
       */
      mandatory?: boolean;
    }

    /**
     * An object encapsulating a complete proxy configuration.
     */
    export interface ProxyConfig {

      /**
       * The proxy rules describing this configuration. Use this for 'fixed\_servers' mode.
       */
      rules?: ProxyRules;

      /**
       * The proxy auto-config (PAC) script for this configuration. Use this for 'pac\_script' mode.
       */
      pacScript?: PacScript;

      /**
       * 'direct' = Never use a proxy
       * 'auto\_detect' = Auto detect proxy settings
       * 'pac\_script' = Use specified PAC script
       * 'fixed\_servers' = Manually specify proxy servers
       * 'system' = Use system proxy settings
       */
      mode: Mode;
    }

    /**
     * Notifies about proxy errors.
     */
    export const onProxyError: events.Event<(
      details: {
        /**
         * If true, the error was fatal and the network transaction was aborted. Otherwise, a direct connection is used instead.
         */
        fatal: boolean,

        /**
         * The error description.
         */
        error: string,

        /**
         * Additional details about the error such as a JavaScript runtime error.
         */
        details: string,
      },
    ) => void>;
  }

  /**
   * Stub namepsace for the 'requirements' manifest key.
   *
   * @since Chrome 92
   */
  export namespace requirements {

    export type _3DFeature = "webgl" | "css3d";
  }

  /**
   * Use the `chrome.runtime` API to retrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also use this API to convert the relative path of URLs to fully-qualified URLs.
   */
  export namespace runtime {

    /**
     * This will be defined during an API method callback if there was an error
     */
    export let lastError: {
      /**
       * Details about the error which occurred.
       */
      message?: string,
    } | undefined;

    /**
     * The ID of the extension/app.
     */
    export const id: string;

    /**
     * Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.
     *
     * @chrome-disallow-service-workers
     * @param callback
     */
    export function getBackgroundPage(
      callback: (
        /**
         * The JavaScript 'window' object for the background page.
         */
        backgroundPage?: Window,
      ) => void,
    ): void;

    /**
     * Open your Extension's options page, if possible.
     *
     * The precise behavior may depend on your manifest's `[options_ui](https://developer.chrome.com/docs/extensions/optionsV2)` or `[options_page](https://developer.chrome.com/docs/extensions/options)` key, or what Chrome happens to support at the time. For example, the page may be opened in a new tab, within chrome://extensions, within an App, or it may just focus an open options page. It will never cause the caller page to reload.
     *
     * If your Extension does not declare an options page, or Chrome failed to create one for some other reason, the callback will set {@link lastError}.
     *
     * @param callback
     */
    export function openOptionsPage(
      callback?: () => void,
    ): void;

    /**
     * Returns details about the app or extension from the manifest. The object returned is a serialization of the full [manifest file](https://developer.chrome.com/docs/extensions/manifest).
     *
     * @returns The manifest details.
     */
    export function getManifest(): {[name: string]: any};

    /**
     * Converts a relative path within an app/extension install directory to a fully-qualified URL.
     *
     * @param path A path to a resource within an app/extension expressed relative to its install directory.
     * @returns The fully-qualified URL to the resource.
     */
    export function getURL(
      path: string,
    ): string;

    /**
     * Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 255 characters.
     *
     * @param url URL to be opened after the extension is uninstalled. This URL must have an http: or https: scheme. Set an empty string to not open a new tab upon uninstallation.
     * @param callback Called when the uninstall URL is set. If the given URL is invalid, {@link runtime.lastError} will be set.
     */
    export function setUninstallURL(
      url: string,
      callback?: () => void,
    ): void;

    /**
     * Reloads the app or extension. This method is not supported in kiosk mode. For kiosk mode, use chrome.runtime.restart() method.
     */
    export function reload(): void;

    /**
     * Requests an immediate update check be done for this app/extension.
     *
     * **Important**: Most extensions/apps should **not** use this method, since Chrome already does automatic checks every few hours, and you can listen for the {@link runtime.onUpdateAvailable} event without needing to call requestUpdateCheck.
     *
     * This method is only appropriate to call in very limited circumstances, such as if your extension/app talks to a backend service, and the backend service has determined that the client extension/app version is very far out of date and you'd like to prompt a user to update. Most other uses of requestUpdateCheck, such as calling it unconditionally based on a repeating timer, probably only serve to waste client, network, and server resources.
     *
     * @param callback
     */
    export function requestUpdateCheck(
      callback: (
        /**
         * Result of the update check.
         */
        status: RequestUpdateCheckStatus,

        /**
         * If an update is available, this contains more information about the available update.
         */
        details?: {
          /**
           * The version of the available update.
           */
          version: string,
        },
      ) => void,
    ): void;

    /**
     * Restart the ChromeOS device when the app runs in kiosk mode. Otherwise, it's no-op.
     */
    export function restart(): void;

    /**
     * Restart the ChromeOS device when the app runs in kiosk mode after the given seconds. If called again before the time ends, the reboot will be delayed. If called with a value of -1, the reboot will be cancelled. It's a no-op in non-kiosk mode. It's only allowed to be called repeatedly by the first extension to invoke this API.
     *
     * @param seconds Time to wait in seconds before rebooting the device, or -1 to cancel a scheduled reboot.
     * @param callback A callback to be invoked when a restart request was successfully rescheduled.
     */
    export function restartAfterDelay(
      seconds: number,
      callback?: () => void,
    ): void;

    /**
     * Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and [web messaging](https://developer.chrome.com/docs/extensions/manifest/externally_connectable). Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via {@link tabs.connect}.
     *
     * @param extensionId The ID of the extension or app to connect to. If omitted, a connection will be attempted with your own extension. Required if sending messages from a web page for [web messaging](https://developer.chrome.com/docs/extensions/manifest/externally_connectable).
     * @param connectInfo
     * @returns Port through which messages can be sent and received. The port's {@link Port onDisconnect} event is fired if the extension/app does not exist.
     */
    export function connect(
      extensionId?: string,
      connectInfo?: {
        /**
         * Will be passed into onConnect for processes that are listening for the connection event.
         */
        name?: string,

        /**
         * Whether the TLS channel ID will be passed into onConnectExternal for processes that are listening for the connection event.
         */
        includeTlsChannelId?: boolean,
      },
    ): Port;

    /**
     * Connects to a native application in the host machine. See [Native Messaging](https://developer.chrome.com/docs/extensions/nativeMessaging) for more information.
     *
     * @chrome-permission nativeMessaging
     * @param application The name of the registered application to connect to.
     * @returns Port through which messages can be sent and received with the application
     */
    export function connectNative(
      application: string,
    ): Port;

    /**
     * Sends a single message to event listeners within your extension/app or a different extension/app. Similar to {@link runtime.connect} but only sends a single message, with an optional response. If sending to your extension, the {@link runtime.onMessage} event will be fired in every frame of your extension (except for the sender's frame), or {@link runtime.onMessageExternal}, if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use {@link tabs.sendMessage}.
     *
     * @param extensionId The ID of the extension/app to send the message to. If omitted, the message will be sent to your own extension/app. Required if sending messages from a web page for [web messaging](https://developer.chrome.com/docs/extensions/manifest/externally_connectable).
     * @param message The message to send. This message should be a JSON-ifiable object.
     * @param options
     * @param responseCallback
     */
    export function sendMessage(
      extensionId: string,
      message: any,
      options?: {
        /**
         * Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event.
         */
        includeTlsChannelId?: boolean,
      },
      responseCallback?: (
        /**
         * The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.
         */
        response: any,
      ) => void,
    ): void;

    /**
     * Sends a single message to event listeners within your extension/app or a different extension/app. Similar to {@link runtime.connect} but only sends a single message, with an optional response. If sending to your extension, the {@link runtime.onMessage} event will be fired in every frame of your extension (except for the sender's frame), or {@link runtime.onMessageExternal}, if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use {@link tabs.sendMessage}.
     *
     * @param message The message to send. This message should be a JSON-ifiable object.
     * @param options
     * @param responseCallback
     */
    export function sendMessage(
      message: any,
      options?: {
        /**
         * Whether the TLS channel ID will be passed into onMessageExternal for processes that are listening for the connection event.
         */
        includeTlsChannelId?: boolean,
      },
      responseCallback?: (
        /**
         * The JSON response object sent by the handler of the message. If an error occurs while connecting to the extension, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.
         */
        response: any,
      ) => void,
    ): void;

    /**
     * Send a single message to a native application.
     *
     * @chrome-permission nativeMessaging
     * @param application The name of the native messaging host.
     * @param message The message that will be passed to the native messaging host.
     * @param responseCallback
     */
    export function sendNativeMessage(
      application: string,
      message: {[name: string]: any},
      responseCallback?: (
        /**
         * The response message sent by the native messaging host. If an error occurs while connecting to the native messaging host, the callback will be called with no arguments and {@link runtime.lastError} will be set to the error message.
         */
        response: any,
      ) => void,
    ): void;

    /**
     * Returns information about the current platform.
     *
     * @param callback Called with results
     */
    export function getPlatformInfo(
      callback: (
        platformInfo: PlatformInfo,
      ) => void,
    ): void;

    /**
     * Returns a DirectoryEntry for the package directory.
     *
     * @chrome-disallow-service-workers
     * @param callback
     */
    export function getPackageDirectoryEntry(
      callback: (
        directoryEntry: DirectoryEntry,
      ) => void,
    ): void;

    /**
     * An object which allows two way communication with other pages. See [Long-lived connections](https://developer.chrome.com/docs/extensions/messaging#connect) for more information.
     */
    export interface Port {

      /**
       * The name of the port, as specified in the call to {@link runtime.connect}.
       */
      name: string;

      /**
       * Immediately disconnect the port. Calling `disconnect()` on an already-disconnected port has no effect. When a port is disconnected, no new events will be dispatched to this port.
       */
      disconnect(): void;

      /**
       * Send a message to the other end of the port. If the port is disconnected, an error is thrown.
       *
       * @param message The message to send. This object should be JSON-ifiable.
       */
      postMessage(
        message: any,
      ): void;

      /**
       * This property will **only** be present on ports passed to {@link runtime.onConnect onConnect} / {@link runtime.onConnectExternal onConnectExternal} / {@link runtime.onConnectExternal onConnectNative} listeners.
       */
      sender?: MessageSender;

      /**
       * Fired when the port is disconnected from the other end(s). {@link runtime.lastError} may be set if the port was disconnected by an error. If the port is closed via {@link Port.disconnect disconnect}, then this event is _only_ fired on the other end. This event is fired at most once (see also [Port lifetime](https://developer.chrome.com/docs/extensions/messaging#port-lifetime)).
       */
      onDisconnect: events.Event<(
        port: Port,
      ) => void>;

      /**
       * This event is fired when {@link Port.postMessage postMessage} is called by the other end of the port.
       */
      onMessage: events.Event<(
        message: any,
        port: Port,
      ) => void>;
    }

    /**
     * An object containing information about the script context that sent a message or request.
     */
    export interface MessageSender {

      /**
       * The {@link tabs.Tab} which opened the connection, if any. This property will **only** be present when the connection was opened from a tab (including content scripts), and **only** if the receiver is an extension, not an app.
       */
      tab?: tabs.Tab;

      /**
       * The [frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) that opened the connection. 0 for top-level frames, positive for child frames. This will only be set when `tab` is set.
       */
      frameId?: number;

      /**
       * The ID of the extension or app that opened the connection, if any.
       */
      id?: string;

      /**
       * The URL of the page or frame that opened the connection. If the sender is in an iframe, it will be iframe's URL not the URL of the page which hosts it.
       */
      url?: string;

      /**
       * The name of the native application that opened the connection, if any.
       *
       * @since Chrome 74
       */
      nativeApplication?: string;

      /**
       * The TLS channel ID of the page or frame that opened the connection, if requested by the extension or app, and if available.
       */
      tlsChannelId?: string;

      /**
       * The origin of the page or frame that opened the connection. It can vary from the url property (e.g., about:blank) or can be opaque (e.g., sandboxed iframes). This is useful for identifying if the origin can be trusted if we can't immediately tell from the URL.
       *
       * @since Chrome 80
       */
      origin?: string;
    }

    /**
     * The operating system Chrome is running on.
     */
    export type PlatformOs = "mac" | "win" | "android" | "cros" | "linux" | "openbsd";

    /**
     * The machine's processor architecture.
     */
    export type PlatformArch = "arm" | "arm64" | "x86-32" | "x86-64" | "mips" | "mips64";

    /**
     * The native client architecture. This may be different from arch on some platforms.
     */
    export type PlatformNaclArch = "arm" | "x86-32" | "x86-64" | "mips" | "mips64";

    /**
     * An object containing information about the current platform.
     */
    export interface PlatformInfo {

      /**
       * The operating system Chrome is running on.
       */
      os: PlatformOs;

      /**
       * The machine's processor architecture.
       */
      arch: PlatformArch;

      /**
       * The native client architecture. This may be different from arch on some platforms.
       */
      nacl_arch: PlatformNaclArch;
    }

    /**
     * Result of the update check.
     */
    export type RequestUpdateCheckStatus = "throttled" | "no_update" | "update_available";

    /**
     * The reason that this event is being dispatched.
     */
    export type OnInstalledReason = "install" | "update" | "chrome_update" | "shared_module_update";

    /**
     * The reason that the event is being dispatched. 'app\_update' is used when the restart is needed because the application is updated to a newer version. 'os\_update' is used when the restart is needed because the browser/OS is updated to a newer version. 'periodic' is used when the system runs for more than the permitted uptime set in the enterprise policy.
     */
    export type OnRestartRequiredReason = "app_update" | "os_update" | "periodic";

    /**
     * Fired when a profile that has this extension installed first starts up. This event is not fired when an incognito profile is started, even if this extension is operating in 'split' incognito mode.
     */
    export const onStartup: events.Event<() => void>;

    /**
     * Fired when the extension is first installed, when the extension is updated to a new version, and when Chrome is updated to a new version.
     */
    export const onInstalled: events.Event<(
      details: {
        /**
         * The reason that this event is being dispatched.
         */
        reason: OnInstalledReason,

        /**
         * Indicates the previous version of the extension, which has just been updated. This is present only if 'reason' is 'update'.
         */
        previousVersion?: string,

        /**
         * Indicates the ID of the imported shared module extension which updated. This is present only if 'reason' is 'shared\_module\_update'.
         */
        id?: string,
      },
    ) => void>;

    /**
     * Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded.
     */
    export const onSuspend: events.Event<() => void>;

    /**
     * Sent after onSuspend to indicate that the app won't be unloaded after all.
     */
    export const onSuspendCanceled: events.Event<() => void>;

    /**
     * Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call chrome.runtime.reload(). If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call chrome.runtime.reload() manually in response to this event the update will not get installed until the next time Chrome itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if chrome.runtime.reload() is called in response to this event.
     */
    export const onUpdateAvailable: events.Event<(
      /**
       * The manifest details of the available update.
       */
      details: {
        [name: string]: any,

        /**
         * The version number of the available update.
         */
        version: string,
      },
    ) => void>;

    /**
     * Fired when a Chrome update is available, but isn't installed immediately because a browser restart is required.
     *
     * @deprecated Please use {@link runtime.onRestartRequired}.
     */
    export const onBrowserUpdateAvailable: events.Event<() => void>;

    /**
     * Fired when a connection is made from either an extension process or a content script (by {@link runtime.connect}).
     */
    export const onConnect: events.Event<(
      port: Port,
    ) => void>;

    /**
     * Fired when a connection is made from another extension (by {@link runtime.connect}).
     */
    export const onConnectExternal: events.Event<(
      port: Port,
    ) => void>;

    /**
     * Fired when a connection is made from a native application. Currently only supported on Chrome OS.
     *
     * @chrome-permission nativeMessaging
     * @since Chrome 76
     */
    export const onConnectNative: events.Event<(
      port: Port,
    ) => void>;

    /**
     * Fired when a message is sent from either an extension process (by {@link runtime.sendMessage}) or a content script (by {@link tabs.sendMessage}).
     */
    export const onMessage: events.Event<(
      /**
       * The message sent by the calling script.
       */
      message: any,

      sender: MessageSender,

      /**
       * Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one `onMessage` listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, **unless you return true** from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until `sendResponse` is called).
       */
      sendResponse: () => void,
    ) => boolean>;

    /**
     * Fired when a message is sent from another extension/app (by {@link runtime.sendMessage}). Cannot be used in a content script.
     */
    export const onMessageExternal: events.Event<(
      /**
       * The message sent by the calling script.
       */
      message: any,

      sender: MessageSender,

      /**
       * Function to call (at most once) when you have a response. The argument should be any JSON-ifiable object. If you have more than one `onMessage` listener in the same document, then only one may send a response. This function becomes invalid when the event listener returns, **unless you return true** from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until `sendResponse` is called).
       */
      sendResponse: () => void,
    ) => boolean>;

    /**
     * Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.
     */
    export const onRestartRequired: events.Event<(
      /**
       * The reason that the event is being dispatched.
       */
      reason: OnRestartRequiredReason,
    ) => void>;
  }

  /**
   * Use the `chrome.scripting` API to execute script in different contexts.
   *
   * @chrome-permission scripting
   * @since Chrome 88
   */
  export namespace scripting {

    /**
     * Injects a script into a target context. The script will be run at `document_idle`.
     *
     * @param injection The details of the script which to inject.
     */
    export function executeScript(
      injection: ScriptInjection,
    ): Promise<{
      results: InjectionResult[],
    }>;

    /**
     * Injects a script into a target context. The script will be run at `document_idle`.
     *
     * @param injection The details of the script which to inject.
     * @param callback Invoked upon completion of the injection. The resulting array contains the result of execution for each frame where the injection succeeded.
     */
    export function executeScript(
      injection: ScriptInjection,
      callback?: (
        results: InjectionResult[],
      ) => void,
    ): void;

    /**
     * Inserts a CSS stylesheet into a target context. If multiple frames are specified, unsuccessful injections are ignored.
     *
     * @param injection The details of the styles to insert.
     */
    export function insertCSS(
      injection: CSSInjection,
    ): Promise<{}>;

    /**
     * Inserts a CSS stylesheet into a target context. If multiple frames are specified, unsuccessful injections are ignored.
     *
     * @param injection The details of the styles to insert.
     * @param callback Invoked upon completion of the insertion.
     */
    export function insertCSS(
      injection: CSSInjection,
      callback?: () => void,
    ): void;

    /**
     * Removes a CSS stylesheet that was previously inserted by this extension from a target context.
     *
     * @since Chrome 90
     * @param injection The details of the styles to remove. Note that the `css`, `files`, and `origin` properties must exactly match the stylesheet inserted through {@link insertCSS}. Attempting to remove a non-existent stylesheet is a no-op.
     */
    export function removeCSS(
      injection: CSSInjection,
    ): Promise<{}>;

    /**
     * Removes a CSS stylesheet that was previously inserted by this extension from a target context.
     *
     * @since Chrome 90
     * @param injection The details of the styles to remove. Note that the `css`, `files`, and `origin` properties must exactly match the stylesheet inserted through {@link insertCSS}. Attempting to remove a non-existent stylesheet is a no-op.
     * @param callback A callback to be invoked upon the completion of the removal.
     */
    export function removeCSS(
      injection: CSSInjection,
      callback?: () => void,
    ): void;

    /**
     * The origin for a style change. See [style origins](https://developer.mozilla.org/en-US/docs/Glossary/Style_origin) for more info.
     */
    export type StyleOrigin = "AUTHOR" | "USER";

    export interface InjectionTarget {

      /**
       * The ID of the tab into which to inject.
       */
      tabId: number;

      /**
       * The [IDs](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) of specific frames to inject into.
       */
      frameIds?: number[];

      /**
       * Whether the script should inject into all frames within the tab. Defaults to false. This must not be true if `frameIds` is specified.
       */
      allFrames?: boolean;
    }

    export interface ScriptInjection {

      /**
       * A JavaScript function to inject. This function will be serialized, and then deserialized for injection. This means that any bound parameters and execution context will be lost. Exactly one of `files` and `func` must be specified.
       *
       * @since Chrome 92
       */
      func(): void;

      /**
       * The arguments to curry into a provided function. This is only valid if the `func` parameter is specified. These arguments must be JSON-serializable.
       *
       * @since Chrome 92
       */
      args?: any[];

      /**
       * The path of the JS or CSS files to inject, relative to the extension's root directory. NOTE: Currently a maximum of one file is supported. Exactly one of `files` and `func` must be specified.
       */
      files?: string[];

      /**
       * Details specifying the target into which to inject the script.
       */
      target: InjectionTarget;
    }

    export interface CSSInjection {

      /**
       * Details specifying the target into which to insert the CSS.
       */
      target: InjectionTarget;

      /**
       * A string containing the CSS to inject. Exactly one of `files` and `css` must be specified.
       */
      css?: string;

      /**
       * The path of the CSS files to inject, relative to the extension's root directory. NOTE: Currently a maximum of one file is supported. Exactly one of `files` and `css` must be specified.
       */
      files?: string[];

      /**
       * The style origin for the injection. Defaults to `'AUTHOR'`.
       */
      origin?: StyleOrigin;
    }

    export interface InjectionResult {

      /**
       * The result of the script execution.
       */
      result?: any;

      /**
       * The frame associated with the injection.
       *
       * @since Chrome 90
       */
      frameId: number;
    }
  }

  /**
   * Use the `chrome.search` API to search via the default provider.
   *
   * @chrome-permission search
   * @since Chrome 87
   */
  export namespace search {

    /**
     * Used to query the default search provider. In case of an error, {@link runtime.lastError} will be set.
     *
     * @param queryInfo
     * @param callback
     */
    export function query(
      queryInfo: QueryInfo,
      callback?: () => void,
    ): void;

    export type Disposition = "CURRENT_TAB" | "NEW_TAB" | "NEW_WINDOW";

    export interface QueryInfo {

      /**
       * String to query with the default search provider.
       */
      text: string;

      /**
       * Location where search results should be displayed. `CURRENT_TAB` is the default.
       */
      disposition?: Disposition;

      /**
       * Location where search results should be displayed. ```tabId ``cannot be used with `disposition`.`` ```
       */
      tabId?: number;
    }
  }

  /**
   * Use the `chrome.sessions` API to query and restore tabs and windows from a browsing session.
   *
   * @chrome-permission sessions
   */
  export namespace sessions {

    /**
     * The maximum number of {@link sessions.Session} that will be included in a requested list.
     */
    export const MAX_SESSION_RESULTS: 25;

    /**
     * Gets the list of recently closed tabs and/or windows.
     *
     * @param filter
     * @param callback
     */
    export function getRecentlyClosed(
      filter: Filter,
      callback: (
        /**
         * The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index `0`). The entries may contain either tabs or windows.
         */
        sessions: Session[],
      ) => void,
    ): void;

    /**
     * Gets the list of recently closed tabs and/or windows.
     *
     * @param callback
     */
    export function getRecentlyClosed(
      callback: (
        /**
         * The list of closed entries in reverse order that they were closed (the most recently closed tab or window will be at index `0`). The entries may contain either tabs or windows.
         */
        sessions: Session[],
      ) => void,
    ): void;

    /**
     * Retrieves all devices with synced sessions.
     *
     * @param filter
     * @param callback
     */
    export function getDevices(
      filter: Filter,
      callback: (
        /**
         * The list of {@link sessions.Device} objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. {@link tabs.Tab} objects are sorted by recency in the {@link windows.Window} of the {@link sessions.Session} objects.
         */
        devices: Device[],
      ) => void,
    ): void;

    /**
     * Retrieves all devices with synced sessions.
     *
     * @param callback
     */
    export function getDevices(
      callback: (
        /**
         * The list of {@link sessions.Device} objects for each synced session, sorted in order from device with most recently modified session to device with least recently modified session. {@link tabs.Tab} objects are sorted by recency in the {@link windows.Window} of the {@link sessions.Session} objects.
         */
        devices: Device[],
      ) => void,
    ): void;

    /**
     * Reopens a {@link windows.Window} or {@link tabs.Tab}, with an optional callback to run when the entry has been restored.
     *
     * @param sessionId The {@link windows.Window.sessionId}, or {@link tabs.Tab.sessionId} to restore. If this parameter is not specified, the most recently closed session is restored.
     * @param callback
     */
    export function restore(
      sessionId?: string,
      callback?: (
        /**
         * A {@link sessions.Session} containing the restored {@link windows.Window} or {@link tabs.Tab} object.
         */
        restoredSession: Session,
      ) => void,
    ): void;

    export interface Filter {

      /**
       * The maximum number of entries to be fetched in the requested list. Omit this parameter to fetch the maximum number of entries ({@link sessions.MAX_SESSION_RESULTS}).
       */
      maxResults?: number;
    }

    export interface Session {

      /**
       * The time when the window or tab was closed or modified, represented in milliseconds since the epoch.
       */
      lastModified: number;

      /**
       * The {@link tabs.Tab}, if this entry describes a tab. Either this or {@link sessions.Session.window} will be set.
       */
      tab?: tabs.Tab;

      /**
       * The {@link windows.Window}, if this entry describes a window. Either this or {@link sessions.Session.tab} will be set.
       */
      window?: windows.Window;
    }

    export interface Device {

      /**
       * The name of the foreign device.
       */
      deviceName: string;

      /**
       * A list of open window sessions for the foreign device, sorted from most recently to least recently modified session.
       */
      sessions: Session[];
    }

    /**
     * Fired when recently closed tabs and/or windows are changed. This event does not monitor synced sessions changes.
     */
    export const onChanged: events.Event<() => void>;
  }

  /**
   * Stub namespace for the "import" and "export" manifest keys.
   *
   * @since Chrome 89
   */
  export namespace sharedModule {

    export interface Import {

      /**
       * Extension ID of the shared module this extension or app depends on.
       */
      id: string;

      /**
       * Minimum supported version of the shared module.
       */
      minimum_version?: string;
    }

    export interface Export {

      /**
       * Optional list of extension IDs explicitly allowed to import this Shared Module's resources. If no allowlist is given, all extensions are allowed to import it.
       */
      allowlist?: string[];
    }
  }

  /**
   * Use the `chrome.signedInDevices` API to get a list of devices signed into Chrome with the same account as the current profile.
   *
   * @chrome-permission signedInDevices
   * @chrome-channel dev
   * @alpha
   */
  export namespace signedInDevices {

    /**
     * Gets the array of signed in devices, signed into the same account as the current profile.
     *
     * @param isLocal If true only return the information for the local device. If false or omitted return the list of all devices including the local device.
     * @param callback The callback to be invoked with the array of DeviceInfo objects.
     */
    export function get(
      isLocal: boolean,
      callback: (
        devices: DeviceInfo[],
      ) => void,
    ): void;

    /**
     * Gets the array of signed in devices, signed into the same account as the current profile.
     *
     * @param callback The callback to be invoked with the array of DeviceInfo objects.
     */
    export function get(
      callback: (
        devices: DeviceInfo[],
      ) => void,
    ): void;

    export type OS = "win" | "mac" | "linux" | "chrome_os" | "android" | "ios" | "unknown";

    export type DeviceType = "desktop_or_laptop" | "phone" | "tablet" | "unknown";

    export interface DeviceInfo {

      /**
       * Name of the device. This name is usually set by the user when setting up a device.
       */
      name: string;

      /**
       * Unique Id for this device. Note: The id is meaningful only in the current device. This id cannot be used to refer to the same device from another device or extension.
       */
      id: string;

      /**
       * The OS of the device.
       */
      os: OS;

      /**
       * Device Type.
       */
      type: DeviceType;

      /**
       * Version of Chrome running on this device.
       */
      chromeVersion: string;
    }

    /**
     * Fired when the DeviceInfo object of any of the signed in devices changes, or when a device is added or removed.
     */
    export const onDeviceInfoChange: events.Event<(
      /**
       * The array of all signed in devices.
       */
      devices: DeviceInfo[],
    ) => void>;
  }

  /**
   * Use the `chrome.storage` API to store, retrieve, and track changes to user data.
   *
   * @chrome-permission storage
   */
  export namespace storage {

    /**
     * Items in the `sync` storage area are synced using Chrome Sync.
     */
    export const sync: StorageArea & {
      /**
       * The maximum total amount (in bytes) of data that can be stored in sync storage, as measured by the JSON stringification of every value plus every key's length. Updates that would cause this limit to be exceeded fail immediately and set {@link runtime.lastError}.
       */
      QUOTA_BYTES: 102400,

      /**
       * The maximum size (in bytes) of each individual item in sync storage, as measured by the JSON stringification of its value plus its key length. Updates containing items larger than this limit will fail immediately and set {@link runtime.lastError}.
       */
      QUOTA_BYTES_PER_ITEM: 8192,

      /**
       * The maximum number of items that can be stored in sync storage. Updates that would cause this limit to be exceeded will fail immediately and set {@link runtime.lastError}.
       */
      MAX_ITEMS: 512,

      /**
       * The maximum number of `set`, `remove`, or `clear` operations that can be performed each hour. This is 1 every 2 seconds, a lower ceiling than the short term higher writes-per-minute limit.
       *
       * Updates that would cause this limit to be exceeded fail immediately and set {@link runtime.lastError}.
       */
      MAX_WRITE_OPERATIONS_PER_HOUR: 1800,

      /**
       * The maximum number of `set`, `remove`, or `clear` operations that can be performed each minute. This is 2 per second, providing higher throughput than writes-per-hour over a shorter period of time.
       *
       * Updates that would cause this limit to be exceeded fail immediately and set {@link runtime.lastError}.
       */
      MAX_WRITE_OPERATIONS_PER_MINUTE: 120,

      /**
       * @deprecated The storage.sync API no longer has a sustained write operation quota.
       */
      MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE: 1000000,
    };

    /**
     * Items in the `local` storage area are local to each machine.
     */
    export const local: StorageArea & {
      /**
       * The maximum amount (in bytes) of data that can be stored in local storage, as measured by the JSON stringification of every value plus every key's length. This value will be ignored if the extension has the `unlimitedStorage` permission. Updates that would cause this limit to be exceeded fail immediately and set {@link runtime.lastError}.
       */
      QUOTA_BYTES: 5242880,
    };

    /**
     * Items in the `managed` storage area are set by the domain administrator, and are read-only for the extension; trying to modify this namespace results in an error.
     */
    export const managed: StorageArea;

    export interface StorageChange {

      /**
       * The old value of the item, if there was an old value.
       */
      oldValue?: any;

      /**
       * The new value of the item, if there is a new value.
       */
      newValue?: any;
    }

    export interface StorageArea {

      /**
       * Gets one or more items from storage.
       *
       * @param keys A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object). An empty list or object will return an empty result object. Pass in `null` to get the entire contents of storage.
       * @param callback Callback with storage items, or on failure (in which case {@link runtime.lastError} will be set).
       */
      get(
        keys: string | string[] | {[name: string]: any},
        callback: (
          /**
           * Object with items in their key-value mappings.
           */
          items: {[name: string]: any},
        ) => void,
      ): void;

      /**
       * Gets one or more items from storage.
       *
       * @param callback Callback with storage items, or on failure (in which case {@link runtime.lastError} will be set).
       */
      get(
        callback: (
          /**
           * Object with items in their key-value mappings.
           */
          items: {[name: string]: any},
        ) => void,
      ): void;

      /**
       * Gets the amount of space (in bytes) being used by one or more items.
       *
       * @param keys A single key or list of keys to get the total usage for. An empty list will return 0. Pass in `null` to get the total usage of all of storage.
       * @param callback Callback with the amount of space being used by storage, or on failure (in which case {@link runtime.lastError} will be set).
       */
      getBytesInUse(
        keys: string | string[],
        callback: (
          /**
           * Amount of space being used in storage, in bytes.
           */
          bytesInUse: number,
        ) => void,
      ): void;

      /**
       * Gets the amount of space (in bytes) being used by one or more items.
       *
       * @param callback Callback with the amount of space being used by storage, or on failure (in which case {@link runtime.lastError} will be set).
       */
      getBytesInUse(
        callback: (
          /**
           * Amount of space being used in storage, in bytes.
           */
          bytesInUse: number,
        ) => void,
      ): void;

      /**
       * Sets multiple items.
       *
       * @param items An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected.

      Primitive values such as numbers will serialize as expected. Values with a `typeof` `"object"` and `"function"` will typically serialize to `{}`, with the exception of `Array` (serializes as expected), `Date`, and `Regex` (serialize using their `String` representation).
       * @param callback Callback on success, or on failure (in which case {@link runtime.lastError} will be set).
       */
      set(
        items: {[name: string]: any},
        callback?: () => void,
      ): void;

      /**
       * Removes one or more items from storage.
       *
       * @param keys A single key or a list of keys for items to remove.
       * @param callback Callback on success, or on failure (in which case {@link runtime.lastError} will be set).
       */
      remove(
        keys: string | string[],
        callback?: () => void,
      ): void;

      /**
       * Removes all items from storage.
       *
       * @param callback Callback on success, or on failure (in which case {@link runtime.lastError} will be set).
       */
      clear(
        callback?: () => void,
      ): void;

      /**
       * Fired when one or more items change.
       *
       * @since Chrome 73
       */
      onChanged: events.Event<(
        /**
         * Object mapping each key that changed to its corresponding {@link storage.StorageChange} for that item.
         */
        changes: {[name: string]: StorageChange},
      ) => void>;
    }

    /**
     * Fired when one or more items change.
     */
    export const onChanged: events.Event<(
      /**
       * Object mapping each key that changed to its corresponding {@link storage.StorageChange} for that item.
       */
      changes: {[name: string]: StorageChange},

      /**
       * The name of the storage area (`"sync"`, `"local"` or `"managed"`) the changes are for.
       */
      areaName: string,
    ) => void>;
  }

  /**
   * Use the `system.cpu` API to query CPU metadata.
   *
   * @chrome-permission system.cpu
   */
  export namespace system.cpu {

    /**
     * Queries basic CPU information of the system.
     */
    export function getInfo(): Promise<{
      info: CpuInfo,
    }>;

    /**
     * Queries basic CPU information of the system.
     *
     * @param callback
     */
    export function getInfo(
      callback: (
        info: CpuInfo,
      ) => void,
    ): void;

    export interface CpuTime {

      /**
       * The cumulative time used by userspace programs on this processor.
       */
      user: number;

      /**
       * The cumulative time used by kernel programs on this processor.
       */
      kernel: number;

      /**
       * The cumulative time spent idle by this processor.
       */
      idle: number;

      /**
       * The total cumulative time for this processor. This value is equal to user + kernel + idle.
       */
      total: number;
    }

    export interface ProcessorInfo {

      /**
       * Cumulative usage info for this logical processor.
       */
      usage: CpuTime;
    }

    export interface CpuInfo {

      /**
       * The number of logical processors.
       */
      numOfProcessors: number;

      /**
       * The architecture name of the processors.
       */
      archName: string;

      /**
       * The model name of the processors.
       */
      modelName: string;

      /**
       * A set of feature codes indicating some of the processor's capabilities. The currently supported codes are "mmx", "sse", "sse2", "sse3", "ssse3", "sse4\_1", "sse4\_2", and "avx".
       */
      features: string[];

      /**
       * Information about each logical processor.
       */
      processors: ProcessorInfo[];

      /**
       * List of CPU temperature readings from each thermal zone of the CPU. Temperatures are in degrees Celsius.
       *
       * **Currently supported on Chrome OS only.**
       *
       * @since Chrome 60
       */
      temperatures: number[];
    }
  }

  /**
   * Use the `system.display` API to query display metadata.
   *
   * @chrome-permission system.display
   */
  export namespace system.display {

    /**
     * Requests the information for all attached display devices.
     *
     * @param flags Options affecting how the information is returned.
     */
    export function getInfo(
      flags?: GetInfoFlags,
    ): Promise<{
      displayInfo: DisplayUnitInfo[],
    }>;

    /**
     * Requests the information for all attached display devices.
     *
     * @param flags Options affecting how the information is returned.
     * @param callback The callback to invoke with the results.
     */
    export function getInfo(
      flags: GetInfoFlags,
      callback: (
        displayInfo: DisplayUnitInfo[],
      ) => void,
    ): void;

    /**
     * Requests the information for all attached display devices.
     *
     * @param callback The callback to invoke with the results.
     */
    export function getInfo(
      callback: (
        displayInfo: DisplayUnitInfo[],
      ) => void,
    ): void;

    /**
     * Requests the layout info for all displays. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     */
    export function getDisplayLayout(): Promise<{
      layouts: DisplayLayout[],
    }>;

    /**
     * Requests the layout info for all displays. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param callback The callback to invoke with the results.
     */
    export function getDisplayLayout(
      callback: (
        layouts: DisplayLayout[],
      ) => void,
    ): void;

    /**
     * Updates the properties for the display specified by `id`, according to the information provided in `info`. On failure, {@link runtime.lastError} will be set. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param id The display's unique identifier.
     * @param info The information about display properties that should be changed. A property will be changed only if a new value for it is specified in `info`.
     */
    export function setDisplayProperties(
      id: string,
      info: DisplayProperties,
    ): Promise<{}>;

    /**
     * Updates the properties for the display specified by `id`, according to the information provided in `info`. On failure, {@link runtime.lastError} will be set. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param id The display's unique identifier.
     * @param info The information about display properties that should be changed. A property will be changed only if a new value for it is specified in `info`.
     * @param callback Empty function called when the function finishes. To find out whether the function succeeded, {@link runtime.lastError} should be queried.
     */
    export function setDisplayProperties(
      id: string,
      info: DisplayProperties,
      callback?: () => void,
    ): void;

    /**
     * Set the layout for all displays. Any display not included will use the default layout. If a layout would overlap or be otherwise invalid it will be adjusted to a valid layout. After layout is resolved, an onDisplayChanged event will be triggered. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param layouts The layout information, required for all displays except the primary display.
     */
    export function setDisplayLayout(
      layouts: DisplayLayout[],
    ): Promise<{}>;

    /**
     * Set the layout for all displays. Any display not included will use the default layout. If a layout would overlap or be otherwise invalid it will be adjusted to a valid layout. After layout is resolved, an onDisplayChanged event will be triggered. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param layouts The layout information, required for all displays except the primary display.
     * @param callback Empty function called when the function finishes. To find out whether the function succeeded, {@link runtime.lastError} should be queried.
     */
    export function setDisplayLayout(
      layouts: DisplayLayout[],
      callback?: () => void,
    ): void;

    /**
     * Enables/disables the unified desktop feature. If enabled while mirroring is active, the desktop mode will not change until mirroring is turned off. Otherwise, the desktop mode will switch to unified immediately. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @param enabled True if unified desktop should be enabled.
     */
    export function enableUnifiedDesktop(
      enabled: boolean,
    ): void;

    /**
     * Starts overscan calibration for a display. This will show an overlay on the screen indicating the current overscan insets. If overscan calibration for display `id` is in progress this will reset calibration.
     *
     * @param id The display's unique identifier.
     */
    export function overscanCalibrationStart(
      id: string,
    ): void;

    /**
     * Adjusts the current overscan insets for a display. Typically this should either move the display along an axis (e.g. left+right have the same value) or scale it along an axis (e.g. top+bottom have opposite values). Each Adjust call is cumulative with previous calls since Start.
     *
     * @param id The display's unique identifier.
     * @param delta The amount to change the overscan insets.
     */
    export function overscanCalibrationAdjust(
      id: string,
      delta: Insets,
    ): void;

    /**
     * Resets the overscan insets for a display to the last saved value (i.e before Start was called).
     *
     * @param id The display's unique identifier.
     */
    export function overscanCalibrationReset(
      id: string,
    ): void;

    /**
     * Complete overscan adjustments for a display by saving the current values and hiding the overlay.
     *
     * @param id The display's unique identifier.
     */
    export function overscanCalibrationComplete(
      id: string,
    ): void;

    /**
     * Displays the native touch calibration UX for the display with `id` as display id. This will show an overlay on the screen with required instructions on how to proceed. The callback will be invoked in case of successful calibration only. If the calibration fails, this will throw an error.
     *
     * @since Chrome 57
     * @param id The display's unique identifier.
     */
    export function showNativeTouchCalibration(
      id: string,
    ): Promise<{
      success: boolean,
    }>;

    /**
     * Displays the native touch calibration UX for the display with `id` as display id. This will show an overlay on the screen with required instructions on how to proceed. The callback will be invoked in case of successful calibration only. If the calibration fails, this will throw an error.
     *
     * @since Chrome 57
     * @param id The display's unique identifier.
     * @param callback Optional callback to inform the caller that the touch calibration has ended. The argument of the callback informs if the calibration was a success or not.
     */
    export function showNativeTouchCalibration(
      id: string,
      callback?: (
        success: boolean,
      ) => void,
    ): void;

    /**
     * Starts custom touch calibration for a display. This should be called when using a custom UX for collecting calibration data. If another touch calibration is already in progress this will throw an error.
     *
     * @since Chrome 57
     * @param id The display's unique identifier.
     */
    export function startCustomTouchCalibration(
      id: string,
    ): void;

    /**
     * Sets the touch calibration pairs for a display. These `pairs` would be used to calibrate the touch screen for display with `id` called in startCustomTouchCalibration(). Always call `startCustomTouchCalibration` before calling this method. If another touch calibration is already in progress this will throw an error.
     *
     * @since Chrome 57
     * @param pairs The pairs of point used to calibrate the display.
     * @param bounds Bounds of the display when the touch calibration was performed. `bounds.left` and `bounds.top` values are ignored.
     */
    export function completeCustomTouchCalibration(
      pairs: TouchCalibrationPairQuad,
      bounds: Bounds,
    ): void;

    /**
     * Resets the touch calibration for the display and brings it back to its default state by clearing any touch calibration data associated with the display.
     *
     * @since Chrome 57
     * @param id The display's unique identifier.
     */
    export function clearTouchCalibration(
      id: string,
    ): void;

    /**
     * Sets the display mode to the specified mirror mode. Each call resets the state from previous calls. Calling setDisplayProperties() will fail for the mirroring destination displays. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @since Chrome 65
     * @param info The information of the mirror mode that should be applied to the display mode.
     */
    export function setMirrorMode(
      info: MirrorModeInfo,
    ): Promise<{}>;

    /**
     * Sets the display mode to the specified mirror mode. Each call resets the state from previous calls. Calling setDisplayProperties() will fail for the mirroring destination displays. NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
     *
     * @since Chrome 65
     * @param info The information of the mirror mode that should be applied to the display mode.
     * @param callback Empty function called when the function finishes. To find out whether the function succeeded, {@link runtime.lastError} should be queried.
     */
    export function setMirrorMode(
      info: MirrorModeInfo,
      callback?: () => void,
    ): void;

    export interface Bounds {

      /**
       * The x-coordinate of the upper-left corner.
       */
      left: number;

      /**
       * The y-coordinate of the upper-left corner.
       */
      top: number;

      /**
       * The width of the display in pixels.
       */
      width: number;

      /**
       * The height of the display in pixels.
       */
      height: number;
    }

    export interface Insets {

      /**
       * The x-axis distance from the left bound.
       */
      left: number;

      /**
       * The y-axis distance from the top bound.
       */
      top: number;

      /**
       * The x-axis distance from the right bound.
       */
      right: number;

      /**
       * The y-axis distance from the bottom bound.
       */
      bottom: number;
    }

    /**
     * @since Chrome 57
     */
    export interface Point {

      /**
       * The x-coordinate of the point.
       */
      x: number;

      /**
       * The y-coordinate of the point.
       */
      y: number;
    }

    /**
     * @since Chrome 57
     */
    export interface TouchCalibrationPair {

      /**
       * The coordinates of the display point.
       */
      displayPoint: Point;

      /**
       * The coordinates of the touch point corresponding to the display point.
       */
      touchPoint: Point;
    }

    /**
     * @since Chrome 57
     */
    export interface TouchCalibrationPairQuad {

      /**
       * First pair of touch and display point required for touch calibration.
       */
      pair1: TouchCalibrationPair;

      /**
       * Second pair of touch and display point required for touch calibration.
       */
      pair2: TouchCalibrationPair;

      /**
       * Third pair of touch and display point required for touch calibration.
       */
      pair3: TouchCalibrationPair;

      /**
       * Fourth pair of touch and display point required for touch calibration.
       */
      pair4: TouchCalibrationPair;
    }

    export interface DisplayMode {

      /**
       * The display mode width in device independent (user visible) pixels.
       */
      width: number;

      /**
       * The display mode height in device independent (user visible) pixels.
       */
      height: number;

      /**
       * The display mode width in native pixels.
       */
      widthInNativePixels: number;

      /**
       * The display mode height in native pixels.
       */
      heightInNativePixels: number;

      /**
       * The display mode UI scale factor.
       *
       * @deprecated Use {@link displayZoomFactor}
       * @deprecated-since Chrome 70
       */
      uiScale?: number;

      /**
       * The display mode device scale factor.
       */
      deviceScaleFactor: number;

      /**
       * The display mode refresh rate in hertz.
       *
       * @since Chrome 67
       */
      refreshRate: number;

      /**
       * True if the mode is the display's native mode.
       */
      isNative: boolean;

      /**
       * True if the display mode is currently selected.
       */
      isSelected: boolean;

      /**
       * True if this mode is interlaced, false if not provided.
       *
       * @since Chrome 74
       */
      isInterlaced?: boolean;
    }

    /**
     * Layout position, i.e. edge of parent that the display is attached to.
     */
    export type LayoutPosition = "top" | "right" | "bottom" | "left";

    export interface DisplayLayout {

      /**
       * The unique identifier of the display.
       */
      id: string;

      /**
       * The unique identifier of the parent display. Empty if this is the root.
       */
      parentId: string;

      /**
       * The layout position of this display relative to the parent. This will be ignored for the root.
       */
      position: LayoutPosition;

      /**
       * The offset of the display along the connected edge. 0 indicates that the topmost or leftmost corners are aligned.
       */
      offset: number;
    }

    /**
     * @since Chrome 67
     */
    export interface Edid {

      /**
       * 3 character manufacturer code. See Sec. 3.4.1 page 21. Required in v1.4.
       */
      manufacturerId: string;

      /**
       * 2 byte manufacturer-assigned code, Sec. 3.4.2 page 21. Required in v1.4.
       */
      productId: string;

      /**
       * Year of manufacturer, Sec. 3.4.4 page 22. Required in v1.4.
       */
      yearOfManufacture: number;
    }

    export interface DisplayUnitInfo {

      /**
       * The unique identifier of the display.
       */
      id: string;

      /**
       * The user-friendly name (e.g. "HP LCD monitor").
       */
      name: string;

      /**
       * NOTE: This is only available to Chrome OS Kiosk apps and Web UI.
       *
       * @since Chrome 67
       */
      edid?: Edid;

      /**
       * Chrome OS only. Identifier of the display that is being mirrored if mirroring is enabled, otherwise empty. This will be set for all displays (including the display being mirrored).
       */
      mirroringSourceId: string;

      /**
       * Chrome OS only. Identifiers of the displays to which the source display is being mirrored. Empty if no displays are being mirrored. This will be set to the same value for all displays. This must not include `mirroringSourceId`.
       *
       * @since Chrome 64
       */
      mirroringDestinationIds: string[];

      /**
       * True if this is the primary display.
       */
      isPrimary: boolean;

      /**
       * True if this is an internal display.
       */
      isInternal: boolean;

      /**
       * True if this display is enabled.
       */
      isEnabled: boolean;

      /**
       * True for all displays when in unified desktop mode. See documentation for {@link enableUnifiedDesktop}.
       *
       * @since Chrome 59
       */
      isUnified: boolean;

      /**
       * The number of pixels per inch along the x-axis.
       */
      dpiX: number;

      /**
       * The number of pixels per inch along the y-axis.
       */
      dpiY: number;

      /**
       * The display's clockwise rotation in degrees relative to the vertical position. Currently exposed only on ChromeOS. Will be set to 0 on other platforms. A value of -1 will be interpreted as auto-rotate when the device is in a physical tablet state.
       */
      rotation: number;

      /**
       * The display's logical bounds.
       */
      bounds: Bounds;

      /**
       * The display's insets within its screen's bounds. Currently exposed only on ChromeOS. Will be set to empty insets on other platforms.
       */
      overscan: Insets;

      /**
       * The usable work area of the display within the display bounds. The work area excludes areas of the display reserved for OS, for example taskbar and launcher.
       */
      workArea: Bounds;

      /**
       * The list of available display modes. The current mode will have isSelected=true. Only available on Chrome OS. Will be set to an empty array on other platforms.
       */
      modes: DisplayMode[];

      /**
       * True if this display has a touch input device associated with it.
       *
       * @since Chrome 57
       */
      hasTouchSupport: boolean;

      /**
       * A list of zoom factor values that can be set for the display.
       *
       * @since Chrome 67
       */
      availableDisplayZoomFactors: number[];

      /**
       * The ratio between the display's current and default zoom. For example, value 1 is equivalent to 100% zoom, and value 1.5 is equivalent to 150% zoom.
       *
       * @since Chrome 65
       */
      displayZoomFactor: number;
    }

    export interface DisplayProperties {

      /**
       * Chrome OS only. If set to true, changes the display mode to unified desktop (see {@link enableUnifiedDesktop} for details). If set to false, unified desktop mode will be disabled. This is only valid for the primary display. If provided, mirroringSourceId must not be provided and other properties will be ignored. This is has no effect if not provided.
       *
       * @since Chrome 59
       */
      isUnified?: boolean;

      /**
       * Chrome OS only. If set and not empty, enables mirroring for this display only. Otherwise disables mirroring for all displays. This value should indicate the id of the source display to mirror, which must not be the same as the id passed to setDisplayProperties. If set, no other property may be set.
       *
       * @deprecated Use {@link setMirrorMode}.
       * @deprecated-since Chrome 68
       */
      mirroringSourceId?: string;

      /**
       * If set to true, makes the display primary. No-op if set to false. Note: If set, the display is considered primary for all other properties (i.e. {@link isUnified} may be set and bounds origin may not).
       */
      isPrimary?: boolean;

      /**
       * If set, sets the display's overscan insets to the provided values. Note that overscan values may not be negative or larger than a half of the screen's size. Overscan cannot be changed on the internal monitor.
       */
      overscan?: Insets;

      /**
       * If set, updates the display's rotation. Legal values are \[0, 90, 180, 270\]. The rotation is set clockwise, relative to the display's vertical position.
       */
      rotation?: number;

      /**
       * If set, updates the display's logical bounds origin along the x-axis. Applied together with {@link boundsOriginY}. Defaults to the current value if not set and {@link boundsOriginY} is set. Note that when updating the display origin, some constraints will be applied, so the final bounds origin may be different than the one set. The final bounds can be retrieved using {@link getInfo}. The bounds origin cannot be changed on the primary display.
       */
      boundsOriginX?: number;

      /**
       * If set, updates the display's logical bounds origin along the y-axis. See documentation for {@link boundsOriginX} parameter.
       */
      boundsOriginY?: number;

      /**
       * If set, updates the display mode to the mode matching this value. If other parameters are invalid, this will not be applied. If the display mode is invalid, it will not be applied and an error will be set, but other properties will still be applied.
       */
      displayMode?: DisplayMode;

      /**
       * If set, updates the zoom associated with the display. This zoom performs re-layout and repaint thus resulting in a better quality zoom than just performing a pixel by pixel stretch enlargement.
       *
       * @since Chrome 65
       */
      displayZoomFactor?: number;
    }

    /**
     * @since Chrome 59
     */
    export interface GetInfoFlags {

      /**
       * If set to true, only a single {@link DisplayUnitInfo} will be returned by {@link getInfo} when in unified desktop mode (see {@link enableUnifiedDesktop}). Defaults to false.
       */
      singleUnified?: boolean;
    }

    /**
     * Mirror mode, i.e. different ways of how a display is mirrored to other displays.
     *
     * @since Chrome 65
     */
    export type MirrorMode = "off" | "normal" | "mixed";

    /**
     * @since Chrome 65
     */
    export interface MirrorModeInfo {

      /**
       * The mirror mode that should be set.
       */
      mode: MirrorMode;

      /**
       * The id of the mirroring source display. This is only valid for 'mixed'.
       */
      mirroringSourceId?: string;

      /**
       * The ids of the mirroring destination displays. This is only valid for 'mixed'.
       */
      mirroringDestinationIds?: string[];
    }

    /**
     * Fired when anything changes to the display configuration.
     */
    export const onDisplayChanged: events.Event<() => void>;
  }

  /**
   * The `chrome.system.memory` API.
   *
   * @chrome-permission system.memory
   */
  export namespace system.memory {

    /**
     * Get physical memory information.
     */
    export function getInfo(): Promise<{
      info: MemoryInfo,
    }>;

    /**
     * Get physical memory information.
     *
     * @param callback
     */
    export function getInfo(
      callback: (
        info: MemoryInfo,
      ) => void,
    ): void;

    export interface MemoryInfo {

      /**
       * The total amount of physical memory capacity, in bytes.
       */
      capacity: number;

      /**
       * The amount of available capacity, in bytes.
       */
      availableCapacity: number;
    }
  }

  /**
   * Use the `chrome.system.storage` API to query storage device information and be notified when a removable storage device is attached and detached.
   *
   * @chrome-permission system.storage
   */
  export namespace system.storage {

    /**
     * Get the storage information from the system. The argument passed to the callback is an array of StorageUnitInfo objects.
     */
    export function getInfo(): Promise<{
      info: StorageUnitInfo[],
    }>;

    /**
     * Get the storage information from the system. The argument passed to the callback is an array of StorageUnitInfo objects.
     *
     * @param callback
     */
    export function getInfo(
      callback: (
        info: StorageUnitInfo[],
      ) => void,
    ): void;

    /**
     * Ejects a removable storage device.
     *
     * @param id
     */
    export function ejectDevice(
      id: string,
    ): Promise<{
      result: EjectDeviceResultCode,
    }>;

    /**
     * Ejects a removable storage device.
     *
     * @param id
     * @param callback
     */
    export function ejectDevice(
      id: string,
      callback: (
        result: EjectDeviceResultCode,
      ) => void,
    ): void;

    /**
     * Get the available capacity of a specified `id` storage device. The `id` is the transient device ID from StorageUnitInfo.
     *
     * @chrome-channel dev
     * @alpha
     * @param id
     */
    export function getAvailableCapacity(
      id: string,
    ): Promise<{
      info: StorageAvailableCapacityInfo,
    }>;

    /**
     * Get the available capacity of a specified `id` storage device. The `id` is the transient device ID from StorageUnitInfo.
     *
     * @chrome-channel dev
     * @alpha
     * @param id
     * @param callback
     */
    export function getAvailableCapacity(
      id: string,
      callback: (
        info: StorageAvailableCapacityInfo,
      ) => void,
    ): void;

    export type StorageUnitType = "fixed" | "removable" | "unknown";

    export interface StorageUnitInfo {

      /**
       * The transient ID that uniquely identifies the storage device. This ID will be persistent within the same run of a single application. It will not be a persistent identifier between different runs of an application, or between different applications.
       */
      id: string;

      /**
       * The name of the storage unit.
       */
      name: string;

      /**
       * The media type of the storage unit.
       */
      type: StorageUnitType;

      /**
       * The total amount of the storage space, in bytes.
       */
      capacity: number;
    }

    export interface StorageAvailableCapacityInfo {

      /**
       * A copied `id` of getAvailableCapacity function parameter `id`.
       */
      id: string;

      /**
       * The available capacity of the storage device, in bytes.
       */
      availableCapacity: number;
    }

    export type EjectDeviceResultCode = "success" | "in_use" | "no_such_device" | "failure";

    /**
     * Fired when a new removable storage is attached to the system.
     */
    export const onAttached: events.Event<(
      info: StorageUnitInfo,
    ) => void>;

    /**
     * Fired when a removable storage is detached from the system.
     */
    export const onDetached: events.Event<(
      id: string,
    ) => void>;
  }

  /**
   * Manages an app's system indicator icon, an image displayed in the system's menubar, system tray, or other visible area provided by the OS. This is modelled after the other extension action APIs, such as chrome.browserAction and chrome.pageAction.
   *
   * @chrome-channel dev
   * @alpha
   */
  export namespace systemIndicator {

    /**
     * Set the image to be used as an indicator icon, using a set of ImageData objects. These objects should have multiple resolutions so that an appropriate size can be selected for the given icon size and DPI scaling settings. Only square ImageData objects are accepted.
     *
     * @param details
     * @param callback
     */
    export function setIcon(
      details: SetIconDetails,
      callback?: () => void,
    ): void;

    /**
     * Show the icon in the status tray.
     */
    export function enable(): void;

    /**
     * Hide the icon from the status tray.
     */
    export function disable(): void;

    export interface SetIconDetails {

      path?: any;

      imageData?: any;
    }

    /**
     * Fired only when a click on the icon does not result in a menu being shown.
     */
    export const onClicked: events.Event<() => void>;
  }

  /**
   * Use the `chrome.tabCapture` API to interact with tab media streams.
   *
   * @chrome-permission tabCapture
   * @chrome-disallow-service-workers
   */
  export namespace tabCapture {

    /**
     * Captures the visible area of the currently active tab. Capture can only be started on the currently active tab after the extension has been _invoked_, similar to the way that [activeTab](https://developer.chrome.com/docs/extensions/activeTab#invoking-activeTab) works. Capture is maintained across page navigations within the tab, and stops when the tab is closed, or the media stream is closed by the extension.
     *
     * @param options Configures the returned media stream.
     * @param callback Callback with either the tab capture MediaStream or `null`. `null` indicates an error has occurred and the client may query {@link runtime.lastError} to access the error details.
     */
    export function capture(
      options: CaptureOptions,
      callback: (
        stream: LocalMediaStream,
      ) => void,
    ): void;

    /**
     * Returns a list of tabs that have requested capture or are being captured, i.e. status != stopped and status != error. This allows extensions to inform the user that there is an existing tab capture that would prevent a new tab capture from succeeding (or to prevent redundant requests for the same tab).
     *
     * @param callback Callback invoked with CaptureInfo\[\] for captured tabs.
     */
    export function getCapturedTabs(
      callback: (
        result: CaptureInfo[],
      ) => void,
    ): void;

    /**
     * Creates a stream ID to capture the target tab. Similar to chrome.tabCapture.capture() method, but returns a media stream ID, instead of a media stream, to the consumer tab.
     *
     * @since Chrome 71
     * @param options
     * @param callback Callback to invoke with the result. If successful, the result is an opaque string that can be passed to the `getUserMedia()` API to generate a media stream that corresponds to the target tab. The created `streamId` can only be used once and expires after a few seconds if it is not used.
     */
    export function getMediaStreamId(
      options: GetMediaStreamOptions,
      callback: (
        streamId: string,
      ) => void,
    ): void;

    /**
     * Creates a stream ID to capture the target tab. Similar to chrome.tabCapture.capture() method, but returns a media stream ID, instead of a media stream, to the consumer tab.
     *
     * @since Chrome 71
     * @param callback Callback to invoke with the result. If successful, the result is an opaque string that can be passed to the `getUserMedia()` API to generate a media stream that corresponds to the target tab. The created `streamId` can only be used once and expires after a few seconds if it is not used.
     */
    export function getMediaStreamId(
      callback: (
        streamId: string,
      ) => void,
    ): void;

    export type TabCaptureState = "pending" | "active" | "stopped" | "error";

    export interface CaptureInfo {

      /**
       * The id of the tab whose status changed.
       */
      tabId: number;

      /**
       * The new capture status of the tab.
       */
      status: TabCaptureState;

      /**
       * Whether an element in the tab being captured is in fullscreen mode.
       */
      fullscreen: boolean;
    }

    export interface MediaStreamConstraint {

      mandatory: {[name: string]: any};

      optional?: {[name: string]: any};
    }

    export interface CaptureOptions {

      audio?: boolean;

      video?: boolean;

      audioConstraints?: MediaStreamConstraint;

      videoConstraints?: MediaStreamConstraint;
    }

    /**
     * @since Chrome 71
     */
    export interface GetMediaStreamOptions {

      /**
       * Optional tab id of the tab which will later invoke `getUserMedia()` to consume the stream. If not specified then the resulting stream can be used only by the calling extension. The stream can only be used by frames in the given tab whose security origin matches the consumber tab's origin. The tab's origin must be a secure origin, e.g. HTTPS.
       */
      consumerTabId?: number;

      /**
       * Optional tab id of the tab which will be captured. If not specified then the current active tab will be selected. Only tabs for which the extension has been granted the `activeTab` permission can be used as the target tab.
       */
      targetTabId?: number;
    }

    /**
     * Event fired when the capture status of a tab changes. This allows extension authors to keep track of the capture status of tabs to keep UI elements like page actions in sync.
     */
    export const onStatusChanged: events.Event<(
      /**
       * CaptureInfo with new capture status for the tab.
       */
      info: CaptureInfo,
    ) => void>;
  }

  /**
   * Use the `chrome.tabGroups` API to interact with the browser's tab grouping system. You can use this API to modify and rearrange tab groups in the browser. To group and ungroup tabs, or to query what tabs are in groups, use the `chrome.tabs` API.
   *
   * @chrome-permission tabGroups
   * @since Chrome 89
   */
  export namespace tabGroups {

    /**
     * An ID that represents the absence of a group.
     */
    export const TAB_GROUP_ID_NONE: -1;

    /**
     * Retrieves details about the specified group.
     *
     * @param groupId
     */
    export function get(
      groupId: number,
    ): Promise<{
      group: TabGroup,
    }>;

    /**
     * Retrieves details about the specified group.
     *
     * @param groupId
     * @param callback
     */
    export function get(
      groupId: number,
      callback: (
        group: TabGroup,
      ) => void,
    ): void;

    /**
     * Gets all groups that have the specified properties, or all groups if no properties are specified.
     *
     * @param queryInfo
     */
    export function query(
      queryInfo: {
        /**
         * Whether the groups are collapsed.
         */
        collapsed?: boolean,

        /**
         * The color of the groups.
         */
        color?: Color,

        /**
         * Match group titles against a pattern.
         */
        title?: string,

        /**
         * The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,
      },
    ): Promise<{
      result: TabGroup[],
    }>;

    /**
     * Gets all groups that have the specified properties, or all groups if no properties are specified.
     *
     * @param queryInfo
     * @param callback
     */
    export function query(
      queryInfo: {
        /**
         * Whether the groups are collapsed.
         */
        collapsed?: boolean,

        /**
         * The color of the groups.
         */
        color?: Color,

        /**
         * Match group titles against a pattern.
         */
        title?: string,

        /**
         * The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,
      },
      callback: (
        result: TabGroup[],
      ) => void,
    ): void;

    /**
     * Modifies the properties of a group. Properties that are not specified in updateProperties are not modified.
     *
     * @param groupId The ID of the group to modify.
     * @param updateProperties
     */
    export function update(
      groupId: number,
      updateProperties: {
        /**
         * Whether the group should be collapsed.
         */
        collapsed?: boolean,

        /**
         * The color of the group.
         */
        color?: Color,

        /**
         * The title of the group.
         */
        title?: string,
      },
    ): Promise<{
      /**
       * Details about the updated group.
       */
      group?: TabGroup,
    }>;

    /**
     * Modifies the properties of a group. Properties that are not specified in updateProperties are not modified.
     *
     * @param groupId The ID of the group to modify.
     * @param updateProperties
     * @param callback
     */
    export function update(
      groupId: number,
      updateProperties: {
        /**
         * Whether the group should be collapsed.
         */
        collapsed?: boolean,

        /**
         * The color of the group.
         */
        color?: Color,

        /**
         * The title of the group.
         */
        title?: string,
      },
      callback?: (
        /**
         * Details about the updated group.
         */
        group?: TabGroup,
      ) => void,
    ): void;

    /**
     * Moves the group and all its tabs within its window, or to a new window.
     *
     * @param groupId The ID of the group to move.
     * @param moveProperties
     */
    export function move(
      groupId: number,
      moveProperties: {
        /**
         * The window to move the group to. Defaults to the window the group is currently in. Note that groups can only be moved to and from windows with {@link windows.WindowType} type `"normal"`.
         */
        windowId?: number,

        /**
         * The position to move the group to. Use `-1` to place the group at the end of the window.
         */
        index: number,
      },
    ): Promise<{
      /**
       * Details about the moved group.
       */
      group?: TabGroup,
    }>;

    /**
     * Moves the group and all its tabs within its window, or to a new window.
     *
     * @param groupId The ID of the group to move.
     * @param moveProperties
     * @param callback
     */
    export function move(
      groupId: number,
      moveProperties: {
        /**
         * The window to move the group to. Defaults to the window the group is currently in. Note that groups can only be moved to and from windows with {@link windows.WindowType} type `"normal"`.
         */
        windowId?: number,

        /**
         * The position to move the group to. Use `-1` to place the group at the end of the window.
         */
        index: number,
      },
      callback?: (
        /**
         * Details about the moved group.
         */
        group?: TabGroup,
      ) => void,
    ): void;

    /**
     * The group's color.
     */
    export type Color = "grey" | "blue" | "red" | "yellow" | "green" | "pink" | "purple" | "cyan";

    export interface TabGroup {

      /**
       * The ID of the group. Group IDs are unique within a browser session.
       */
      id: number;

      /**
       * Whether the group is collapsed. A collapsed group is one whose tabs are hidden.
       */
      collapsed: boolean;

      /**
       * The group's color.
       */
      color: Color;

      /**
       * The title of the group.
       */
      title?: string;

      /**
       * The ID of the window that contains the group.
       */
      windowId: number;
    }

    /**
     * Fired when a group is created.
     */
    export const onCreated: events.Event<(
      /**
       * Details of the group that was created.
       */
      group: TabGroup,
    ) => void>;

    /**
     * Fired when a group is updated.
     */
    export const onUpdated: events.Event<(
      /**
       * Details of the group that was updated.
       */
      group: TabGroup,
    ) => void>;

    /**
     * Fired when a group is moved within a window. Move events are still fired for the individual tabs within the group, as well as for the group itself. This event is not fired when a group is moved between windows; instead, it will be removed from one window and created in another.
     */
    export const onMoved: events.Event<(
      /**
       * Details of the group that was moved.
       */
      group: TabGroup,
    ) => void>;

    /**
     * Fired when a group is closed, either directly by the user or automatically because it contained zero tabs.
     */
    export const onRemoved: events.Event<(
      /**
       * Details of the group that was removed.
       */
      group: TabGroup,
    ) => void>;
  }

  /**
   * Use the `chrome.tabs` API to interact with the browser's tab system. You can use this API to create, modify, and rearrange tabs in the browser.
   */
  export namespace tabs {

    /**
     * The maximum number of times that {@link captureVisibleTab} can be called per second. {@link captureVisibleTab} is expensive and should not be called too often.
     *
     * @since Chrome 92
     */
    export const MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND: 2;

    /**
     * An ID that represents the absence of a browser tab.
     */
    export const TAB_ID_NONE: -1;

    /**
     * Retrieves details about the specified tab.
     *
     * @param tabId
     */
    export function get(
      tabId: number,
    ): Promise<{
      tab: Tab,
    }>;

    /**
     * Retrieves details about the specified tab.
     *
     * @param tabId
     * @param callback
     */
    export function get(
      tabId: number,
      callback: (
        tab: Tab,
      ) => void,
    ): void;

    /**
     * Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example, a background page or popup view).
     */
    export function getCurrent(): Promise<{
      tab?: Tab,
    }>;

    /**
     * Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example, a background page or popup view).
     *
     * @param callback
     */
    export function getCurrent(
      callback: (
        tab?: Tab,
      ) => void,
    ): void;

    /**
     * Connects to the content script(s) in the specified tab. The {@link runtime.onConnect} event is fired in each content script running in the specified tab for the current extension. For more details, see [Content Script Messaging](https://developer.chrome.com/docs/extensions/messaging).
     *
     * @param tabId
     * @param connectInfo
     * @returns A port that can be used to communicate with the content scripts running in the specified tab. The port's {@link runtime.Port} event is fired if the tab closes or does not exist.
     */
    export function connect(
      tabId: number,
      connectInfo?: {
        /**
         * Is passed into onConnect for content scripts that are listening for the connection event.
         */
        name?: string,

        /**
         * Open a port to a specific [frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) identified by `frameId` instead of all frames in the tab.
         */
        frameId?: number,
      },
    ): runtime.Port;

    /**
     * Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back. The {@link runtime.onMessage} event is fired in each content script running in the specified tab for the current extension.
     *
     * @param tabId
     * @param message The message to send. This message should be a JSON-ifiable object.
     * @param options
     * @param responseCallback
     */
    export function sendMessage(
      tabId: number,
      message: any,
      options?: {
        /**
         * Send a message to a specific [frame](https://developer.chrome.com/docs/extensions/reference/webNavigation/#frame_ids) identified by `frameId` instead of all frames in the tab.
         */
        frameId?: number,
      },
      responseCallback?: (
        /**
         * The JSON response object sent by the handler of the message. If an error occurs while connecting to the specified tab, the callback is called with no arguments and {@link runtime.lastError} is set to the error message.
         */
        response: any,
      ) => void,
    ): void;

    /**
     * Creates a new tab.
     *
     * @param createProperties
     */
    export function create(
      createProperties: {
        /**
         * The window in which to create the new tab. Defaults to the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,

        /**
         * The position the tab should take in the window. The provided value is clamped to between zero and the number of tabs in the window.
         */
        index?: number,

        /**
         * The URL to initially navigate the tab to. Fully-qualified URLs must include a scheme (i.e., 'http://www.google.com', not 'www.google.com'). Relative URLs are relative to the current page within the extension. Defaults to the New Tab Page.
         */
        url?: string,

        /**
         * Whether the tab should become the active tab in the window. Does not affect whether the window is focused (see {@link windows.update}). Defaults to true.
         */
        active?: boolean,

        /**
         * Whether the tab should become the selected tab in the window. Defaults to true
         *
         * @deprecated Please use _active_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned. Defaults to false
         */
        pinned?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as the newly created tab.
         */
        openerTabId?: number,
      },
    ): Promise<{
      /**
       * The created tab.
       */
      tab: Tab,
    }>;

    /**
     * Creates a new tab.
     *
     * @param createProperties
     * @param callback
     */
    export function create(
      createProperties: {
        /**
         * The window in which to create the new tab. Defaults to the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,

        /**
         * The position the tab should take in the window. The provided value is clamped to between zero and the number of tabs in the window.
         */
        index?: number,

        /**
         * The URL to initially navigate the tab to. Fully-qualified URLs must include a scheme (i.e., 'http://www.google.com', not 'www.google.com'). Relative URLs are relative to the current page within the extension. Defaults to the New Tab Page.
         */
        url?: string,

        /**
         * Whether the tab should become the active tab in the window. Does not affect whether the window is focused (see {@link windows.update}). Defaults to true.
         */
        active?: boolean,

        /**
         * Whether the tab should become the selected tab in the window. Defaults to true
         *
         * @deprecated Please use _active_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned. Defaults to false
         */
        pinned?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as the newly created tab.
         */
        openerTabId?: number,
      },
      callback?: (
        /**
         * The created tab.
         */
        tab: Tab,
      ) => void,
    ): void;

    /**
     * Duplicates a tab.
     *
     * @param tabId The ID of the tab to duplicate.
     */
    export function duplicate(
      tabId: number,
    ): Promise<{
      /**
       * Details about the duplicated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
       */
      tab?: Tab,
    }>;

    /**
     * Duplicates a tab.
     *
     * @param tabId The ID of the tab to duplicate.
     * @param callback
     */
    export function duplicate(
      tabId: number,
      callback?: (
        /**
         * Details about the duplicated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
         */
        tab?: Tab,
      ) => void,
    ): void;

    /**
     * Gets all tabs that have the specified properties, or all tabs if no properties are specified.
     *
     * @param queryInfo
     */
    export function query(
      queryInfo: {
        /**
         * Whether the tabs are active in their windows.
         */
        active?: boolean,

        /**
         * Whether the tabs are pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tabs are audible.
         */
        audible?: boolean,

        /**
         * Whether the tabs are muted.
         */
        muted?: boolean,

        /**
         * Whether the tabs are highlighted.
         */
        highlighted?: boolean,

        /**
         * Whether the tabs are discarded. A discarded tab is one whose content has been unloaded from memory, but is still visible in the tab strip. Its content is reloaded the next time it is activated.
         *
         * @since Chrome 54
         */
        discarded?: boolean,

        /**
         * Whether the tabs can be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,

        /**
         * Whether the tabs are in the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        currentWindow?: boolean,

        /**
         * Whether the tabs are in the last focused window.
         */
        lastFocusedWindow?: boolean,

        /**
         * The tab loading status.
         */
        status?: TabStatus,

        /**
         * Match page titles against a pattern. This property is ignored if the extension does not have the `"tabs"` permission.
         */
        title?: string,

        /**
         * Match tabs against one or more [URL patterns](https://developer.chrome.com/docs/extensions/match_patterns). Fragment identifiers are not matched. This property is ignored if the extension does not have the `"tabs"` permission.
         */
        url?: string | string[],

        /**
         * The ID of the group that the tabs are in, or {@link tabGroups.TAB_GROUP_ID_NONE} for ungrouped tabs.
         *
         * @since Chrome 88
         */
        groupId?: number,

        /**
         * The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,

        /**
         * The type of window the tabs are in.
         */
        windowType?: WindowType,

        /**
         * The position of the tabs within their windows.
         */
        index?: number,
      },
    ): Promise<{
      result: Tab[],
    }>;

    /**
     * Gets all tabs that have the specified properties, or all tabs if no properties are specified.
     *
     * @param queryInfo
     * @param callback
     */
    export function query(
      queryInfo: {
        /**
         * Whether the tabs are active in their windows.
         */
        active?: boolean,

        /**
         * Whether the tabs are pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tabs are audible.
         */
        audible?: boolean,

        /**
         * Whether the tabs are muted.
         */
        muted?: boolean,

        /**
         * Whether the tabs are highlighted.
         */
        highlighted?: boolean,

        /**
         * Whether the tabs are discarded. A discarded tab is one whose content has been unloaded from memory, but is still visible in the tab strip. Its content is reloaded the next time it is activated.
         *
         * @since Chrome 54
         */
        discarded?: boolean,

        /**
         * Whether the tabs can be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,

        /**
         * Whether the tabs are in the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        currentWindow?: boolean,

        /**
         * Whether the tabs are in the last focused window.
         */
        lastFocusedWindow?: boolean,

        /**
         * The tab loading status.
         */
        status?: TabStatus,

        /**
         * Match page titles against a pattern. This property is ignored if the extension does not have the `"tabs"` permission.
         */
        title?: string,

        /**
         * Match tabs against one or more [URL patterns](https://developer.chrome.com/docs/extensions/match_patterns). Fragment identifiers are not matched. This property is ignored if the extension does not have the `"tabs"` permission.
         */
        url?: string | string[],

        /**
         * The ID of the group that the tabs are in, or {@link tabGroups.TAB_GROUP_ID_NONE} for ungrouped tabs.
         *
         * @since Chrome 88
         */
        groupId?: number,

        /**
         * The ID of the parent window, or {@link windows.WINDOW_ID_CURRENT} for the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
         */
        windowId?: number,

        /**
         * The type of window the tabs are in.
         */
        windowType?: WindowType,

        /**
         * The position of the tabs within their windows.
         */
        index?: number,
      },
      callback: (
        result: Tab[],
      ) => void,
    ): void;

    /**
     * Highlights the given tabs and focuses on the first of group. Will appear to do nothing if the specified tab is currently active.
     *
     * @param highlightInfo
     */
    export function highlight(
      highlightInfo: {
        /**
         * The window that contains the tabs.
         */
        windowId?: number,

        /**
         * One or more tab indices to highlight.
         */
        tabs: number[] | number,
      },
    ): Promise<{
      /**
       * Contains details about the window whose tabs were highlighted.
       */
      window: windows.Window,
    }>;

    /**
     * Highlights the given tabs and focuses on the first of group. Will appear to do nothing if the specified tab is currently active.
     *
     * @param highlightInfo
     * @param callback
     */
    export function highlight(
      highlightInfo: {
        /**
         * The window that contains the tabs.
         */
        windowId?: number,

        /**
         * One or more tab indices to highlight.
         */
        tabs: number[] | number,
      },
      callback?: (
        /**
         * Contains details about the window whose tabs were highlighted.
         */
        window: windows.Window,
      ) => void,
    ): void;

    /**
     * Modifies the properties of a tab. Properties that are not specified in updateProperties are not modified.
     *
     * @param tabId Defaults to the selected tab of the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param updateProperties
     */
    export function update(
      tabId: number,
      updateProperties: {
        /**
         * A URL to navigate the tab to. JavaScript URLs are not supported; use {@link scripting.executeScript} instead.
         */
        url?: string,

        /**
         * Whether the tab should be active. Does not affect whether the window is focused (see {@link windows.update}).
         */
        active?: boolean,

        /**
         * Adds or removes the tab from the current selection.
         */
        highlighted?: boolean,

        /**
         * Whether the tab should be selected.
         *
         * @deprecated Please use _highlighted_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tab should be muted.
         */
        muted?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab.
         */
        openerTabId?: number,

        /**
         * Whether the tab should be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,
      },
    ): Promise<{
      /**
       * Details about the updated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
       */
      tab?: Tab,
    }>;

    /**
     * Modifies the properties of a tab. Properties that are not specified in updateProperties are not modified.
     *
     * @param updateProperties
     */
    export function update(
      updateProperties: {
        /**
         * A URL to navigate the tab to. JavaScript URLs are not supported; use {@link scripting.executeScript} instead.
         */
        url?: string,

        /**
         * Whether the tab should be active. Does not affect whether the window is focused (see {@link windows.update}).
         */
        active?: boolean,

        /**
         * Adds or removes the tab from the current selection.
         */
        highlighted?: boolean,

        /**
         * Whether the tab should be selected.
         *
         * @deprecated Please use _highlighted_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tab should be muted.
         */
        muted?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab.
         */
        openerTabId?: number,

        /**
         * Whether the tab should be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,
      },
    ): Promise<{
      /**
       * Details about the updated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
       */
      tab?: Tab,
    }>;

    /**
     * Modifies the properties of a tab. Properties that are not specified in updateProperties are not modified.
     *
     * @param tabId Defaults to the selected tab of the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param updateProperties
     * @param callback
     */
    export function update(
      tabId: number,
      updateProperties: {
        /**
         * A URL to navigate the tab to. JavaScript URLs are not supported; use {@link scripting.executeScript} instead.
         */
        url?: string,

        /**
         * Whether the tab should be active. Does not affect whether the window is focused (see {@link windows.update}).
         */
        active?: boolean,

        /**
         * Adds or removes the tab from the current selection.
         */
        highlighted?: boolean,

        /**
         * Whether the tab should be selected.
         *
         * @deprecated Please use _highlighted_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tab should be muted.
         */
        muted?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab.
         */
        openerTabId?: number,

        /**
         * Whether the tab should be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,
      },
      callback?: (
        /**
         * Details about the updated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
         */
        tab?: Tab,
      ) => void,
    ): void;

    /**
     * Modifies the properties of a tab. Properties that are not specified in updateProperties are not modified.
     *
     * @param updateProperties
     * @param callback
     */
    export function update(
      updateProperties: {
        /**
         * A URL to navigate the tab to. JavaScript URLs are not supported; use {@link scripting.executeScript} instead.
         */
        url?: string,

        /**
         * Whether the tab should be active. Does not affect whether the window is focused (see {@link windows.update}).
         */
        active?: boolean,

        /**
         * Adds or removes the tab from the current selection.
         */
        highlighted?: boolean,

        /**
         * Whether the tab should be selected.
         *
         * @deprecated Please use _highlighted_.
         */
        selected?: boolean,

        /**
         * Whether the tab should be pinned.
         */
        pinned?: boolean,

        /**
         * Whether the tab should be muted.
         */
        muted?: boolean,

        /**
         * The ID of the tab that opened this tab. If specified, the opener tab must be in the same window as this tab.
         */
        openerTabId?: number,

        /**
         * Whether the tab should be discarded automatically by the browser when resources are low.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,
      },
      callback?: (
        /**
         * Details about the updated tab. The {@link tabs.Tab} object does not contain `url`, `pendingUrl`, `title`, and `favIconUrl` if the `"tabs"` permission has not been requested.
         */
        tab?: Tab,
      ) => void,
    ): void;

    /**
     * Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === "normal") windows.
     *
     * @param tabIds The tab ID or list of tab IDs to move.
     * @param moveProperties
     */
    export function move(
      tabIds: number | number[],
      moveProperties: {
        /**
         * Defaults to the window the tab is currently in.
         */
        windowId?: number,

        /**
         * The position to move the window to. Use `-1` to place the tab at the end of the window.
         */
        index: number,
      },
    ): Promise<{
      /**
       * Details about the moved tabs.
       */
      tabs: Tab | Tab[],
    }>;

    /**
     * Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === "normal") windows.
     *
     * @param tabIds The tab ID or list of tab IDs to move.
     * @param moveProperties
     * @param callback
     */
    export function move(
      tabIds: number | number[],
      moveProperties: {
        /**
         * Defaults to the window the tab is currently in.
         */
        windowId?: number,

        /**
         * The position to move the window to. Use `-1` to place the tab at the end of the window.
         */
        index: number,
      },
      callback?: (
        /**
         * Details about the moved tabs.
         */
        tabs: Tab | Tab[],
      ) => void,
    ): void;

    /**
     * Reload a tab.
     *
     * @param tabId The ID of the tab to reload; defaults to the selected tab of the current window.
     * @param reloadProperties
     */
    export function reload(
      tabId?: number,
      reloadProperties?: {
        /**
         * Whether to bypass local caching. Defaults to `false`.
         */
        bypassCache?: boolean,
      },
    ): Promise<{}>;

    /**
     * Reload a tab.
     *
     * @param tabId The ID of the tab to reload; defaults to the selected tab of the current window.
     * @param reloadProperties
     * @param callback
     */
    export function reload(
      tabId?: number,
      reloadProperties?: {
        /**
         * Whether to bypass local caching. Defaults to `false`.
         */
        bypassCache?: boolean,
      },
      callback?: () => void,
    ): void;

    /**
     * Closes one or more tabs.
     *
     * @param tabIds The tab ID or list of tab IDs to close.
     */
    export function remove(
      tabIds: number | number[],
    ): Promise<{}>;

    /**
     * Closes one or more tabs.
     *
     * @param tabIds The tab ID or list of tab IDs to close.
     * @param callback
     */
    export function remove(
      tabIds: number | number[],
      callback?: () => void,
    ): void;

    /**
     * Adds one or more tabs to a specified group, or if no group is specified, adds the given tabs to a newly created group.
     *
     * @since Chrome 88
     * @param options
     */
    export function group(
      options: {
        /**
         * The tab ID or list of tab IDs to add to the specified group.
         */
        tabIds: number | ([number, ...number[]]),

        /**
         * The ID of the group to add the tabs to. If not specified, a new group will be created.
         */
        groupId?: number,

        /**
         * Configurations for creating a group. Cannot be used if groupId is already specified.
         */
        createProperties?: {
          /**
           * The window of the new group. Defaults to the current window.
           */
          windowId?: number,
        },
      },
    ): Promise<{
      /**
       * The ID of the group that the tabs were added to.
       */
      groupId: number,
    }>;

    /**
     * Adds one or more tabs to a specified group, or if no group is specified, adds the given tabs to a newly created group.
     *
     * @since Chrome 88
     * @param options
     * @param callback
     */
    export function group(
      options: {
        /**
         * The tab ID or list of tab IDs to add to the specified group.
         */
        tabIds: number | ([number, ...number[]]),

        /**
         * The ID of the group to add the tabs to. If not specified, a new group will be created.
         */
        groupId?: number,

        /**
         * Configurations for creating a group. Cannot be used if groupId is already specified.
         */
        createProperties?: {
          /**
           * The window of the new group. Defaults to the current window.
           */
          windowId?: number,
        },
      },
      callback?: (
        /**
         * The ID of the group that the tabs were added to.
         */
        groupId: number,
      ) => void,
    ): void;

    /**
     * Removes one or more tabs from their respective groups. If any groups become empty, they are deleted.
     *
     * @since Chrome 88
     * @param tabIds The tab ID or list of tab IDs to remove from their respective groups.
     */
    export function ungroup(
      tabIds: number | ([number, ...number[]]),
    ): Promise<{}>;

    /**
     * Removes one or more tabs from their respective groups. If any groups become empty, they are deleted.
     *
     * @since Chrome 88
     * @param tabIds The tab ID or list of tab IDs to remove from their respective groups.
     * @param callback
     */
    export function ungroup(
      tabIds: number | ([number, ...number[]]),
      callback?: () => void,
    ): void;

    /**
     * Detects the primary language of the content in a tab.
     *
     * @param tabId Defaults to the active tab of the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     */
    export function detectLanguage(
      tabId?: number,
    ): Promise<{
      /**
       * An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](https://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). The second to fourth columns are checked and the first non-NULL value is returned, except for Simplified Chinese for which `zh-CN` is returned. For an unknown/undefined language, `und` is returned.
       */
      language: string,
    }>;

    /**
     * Detects the primary language of the content in a tab.
     *
     * @param tabId Defaults to the active tab of the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param callback
     */
    export function detectLanguage(
      tabId: number,
      callback: (
        /**
         * An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](https://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). The second to fourth columns are checked and the first non-NULL value is returned, except for Simplified Chinese for which `zh-CN` is returned. For an unknown/undefined language, `und` is returned.
         */
        language: string,
      ) => void,
    ): void;

    /**
     * Detects the primary language of the content in a tab.
     *
     * @param callback
     */
    export function detectLanguage(
      callback: (
        /**
         * An ISO language code such as `en` or `fr`. For a complete list of languages supported by this method, see [kLanguageInfoTable](https://src.chromium.org/viewvc/chrome/trunk/src/third_party/cld/languages/internal/languages.cc). The second to fourth columns are checked and the first non-NULL value is returned, except for Simplified Chinese for which `zh-CN` is returned. For an unknown/undefined language, `und` is returned.
         */
        language: string,
      ) => void,
    ): void;

    /**
     * Captures the visible area of the currently active tab in the specified window. In order to call this method, the extension must have either the [<all\_urls>](https://developer.chrome.com/docs/extensions/declare_permissions) permission or the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission. In addition to sites that extensions can normally access, this method allows extensions to capture sensitive sites that are otherwise restricted, including chrome:-scheme pages, other extensions' pages, and data: URLs. These sensitive sites can only be captured with the activeTab permission. File URLs may be captured only if the extension has been granted file access.
     *
     * @param windowId The target window. Defaults to the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param options
     */
    export function captureVisibleTab(
      windowId?: number,
      options?: extensionTypes.ImageDetails,
    ): Promise<{
      /**
       * A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML `img` element for display.
       */
      dataUrl: string,
    }>;

    /**
     * Captures the visible area of the currently active tab in the specified window. In order to call this method, the extension must have either the [<all\_urls>](https://developer.chrome.com/docs/extensions/declare_permissions) permission or the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission. In addition to sites that extensions can normally access, this method allows extensions to capture sensitive sites that are otherwise restricted, including chrome:-scheme pages, other extensions' pages, and data: URLs. These sensitive sites can only be captured with the activeTab permission. File URLs may be captured only if the extension has been granted file access.
     *
     * @param windowId The target window. Defaults to the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param options
     * @param callback
     */
    export function captureVisibleTab(
      windowId: number,
      options: extensionTypes.ImageDetails,
      callback: (
        /**
         * A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML `img` element for display.
         */
        dataUrl: string,
      ) => void,
    ): void;

    /**
     * Captures the visible area of the currently active tab in the specified window. In order to call this method, the extension must have either the [<all\_urls>](https://developer.chrome.com/docs/extensions/declare_permissions) permission or the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission. In addition to sites that extensions can normally access, this method allows extensions to capture sensitive sites that are otherwise restricted, including chrome:-scheme pages, other extensions' pages, and data: URLs. These sensitive sites can only be captured with the activeTab permission. File URLs may be captured only if the extension has been granted file access.
     *
     * @param options
     * @param callback
     */
    export function captureVisibleTab(
      options: extensionTypes.ImageDetails,
      callback: (
        /**
         * A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML `img` element for display.
         */
        dataUrl: string,
      ) => void,
    ): void;

    /**
     * Captures the visible area of the currently active tab in the specified window. In order to call this method, the extension must have either the [<all\_urls>](https://developer.chrome.com/docs/extensions/declare_permissions) permission or the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission. In addition to sites that extensions can normally access, this method allows extensions to capture sensitive sites that are otherwise restricted, including chrome:-scheme pages, other extensions' pages, and data: URLs. These sensitive sites can only be captured with the activeTab permission. File URLs may be captured only if the extension has been granted file access.
     *
     * @param windowId The target window. Defaults to the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     * @param callback
     */
    export function captureVisibleTab(
      windowId: number,
      callback: (
        /**
         * A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML `img` element for display.
         */
        dataUrl: string,
      ) => void,
    ): void;

    /**
     * Captures the visible area of the currently active tab in the specified window. In order to call this method, the extension must have either the [<all\_urls>](https://developer.chrome.com/docs/extensions/declare_permissions) permission or the [activeTab](https://developer.chrome.com/docs/extensions/activeTab) permission. In addition to sites that extensions can normally access, this method allows extensions to capture sensitive sites that are otherwise restricted, including chrome:-scheme pages, other extensions' pages, and data: URLs. These sensitive sites can only be captured with the activeTab permission. File URLs may be captured only if the extension has been granted file access.
     *
     * @param callback
     */
    export function captureVisibleTab(
      callback: (
        /**
         * A data URL that encodes an image of the visible area of the captured tab. May be assigned to the 'src' property of an HTML `img` element for display.
         */
        dataUrl: string,
      ) => void,
    ): void;

    /**
     * Zooms a specified tab.
     *
     * @param tabId The ID of the tab to zoom; defaults to the active tab of the current window.
     * @param zoomFactor The new zoom factor. A value of `0` sets the tab to its current default zoom factor. Values greater than `0` specify a (possibly non-default) zoom factor for the tab.
     */
    export function setZoom(
      tabId: number,
      zoomFactor: number,
    ): Promise<{}>;

    /**
     * Zooms a specified tab.
     *
     * @param zoomFactor The new zoom factor. A value of `0` sets the tab to its current default zoom factor. Values greater than `0` specify a (possibly non-default) zoom factor for the tab.
     */
    export function setZoom(
      zoomFactor: number,
    ): Promise<{}>;

    /**
     * Zooms a specified tab.
     *
     * @param tabId The ID of the tab to zoom; defaults to the active tab of the current window.
     * @param zoomFactor The new zoom factor. A value of `0` sets the tab to its current default zoom factor. Values greater than `0` specify a (possibly non-default) zoom factor for the tab.
     * @param callback Called after the zoom factor has been changed.
     */
    export function setZoom(
      tabId: number,
      zoomFactor: number,
      callback?: () => void,
    ): void;

    /**
     * Zooms a specified tab.
     *
     * @param zoomFactor The new zoom factor. A value of `0` sets the tab to its current default zoom factor. Values greater than `0` specify a (possibly non-default) zoom factor for the tab.
     * @param callback Called after the zoom factor has been changed.
     */
    export function setZoom(
      zoomFactor: number,
      callback?: () => void,
    ): void;

    /**
     * Gets the current zoom factor of a specified tab.
     *
     * @param tabId The ID of the tab to get the current zoom factor from; defaults to the active tab of the current window.
     */
    export function getZoom(
      tabId?: number,
    ): Promise<{
      /**
       * The tab's current zoom factor.
       */
      zoomFactor: number,
    }>;

    /**
     * Gets the current zoom factor of a specified tab.
     *
     * @param tabId The ID of the tab to get the current zoom factor from; defaults to the active tab of the current window.
     * @param callback Called with the tab's current zoom factor after it has been fetched.
     */
    export function getZoom(
      tabId: number,
      callback: (
        /**
         * The tab's current zoom factor.
         */
        zoomFactor: number,
      ) => void,
    ): void;

    /**
     * Gets the current zoom factor of a specified tab.
     *
     * @param callback Called with the tab's current zoom factor after it has been fetched.
     */
    export function getZoom(
      callback: (
        /**
         * The tab's current zoom factor.
         */
        zoomFactor: number,
      ) => void,
    ): void;

    /**
     * Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.
     *
     * @param tabId The ID of the tab to change the zoom settings for; defaults to the active tab of the current window.
     * @param zoomSettings Defines how zoom changes are handled and at what scope.
     */
    export function setZoomSettings(
      tabId: number,
      zoomSettings: ZoomSettings,
    ): Promise<{}>;

    /**
     * Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.
     *
     * @param zoomSettings Defines how zoom changes are handled and at what scope.
     */
    export function setZoomSettings(
      zoomSettings: ZoomSettings,
    ): Promise<{}>;

    /**
     * Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.
     *
     * @param tabId The ID of the tab to change the zoom settings for; defaults to the active tab of the current window.
     * @param zoomSettings Defines how zoom changes are handled and at what scope.
     * @param callback Called after the zoom settings are changed.
     */
    export function setZoomSettings(
      tabId: number,
      zoomSettings: ZoomSettings,
      callback?: () => void,
    ): void;

    /**
     * Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.
     *
     * @param zoomSettings Defines how zoom changes are handled and at what scope.
     * @param callback Called after the zoom settings are changed.
     */
    export function setZoomSettings(
      zoomSettings: ZoomSettings,
      callback?: () => void,
    ): void;

    /**
     * Gets the current zoom settings of a specified tab.
     *
     * @param tabId The ID of the tab to get the current zoom settings from; defaults to the active tab of the current window.
     */
    export function getZoomSettings(
      tabId?: number,
    ): Promise<{
      /**
       * The tab's current zoom settings.
       */
      zoomSettings: ZoomSettings,
    }>;

    /**
     * Gets the current zoom settings of a specified tab.
     *
     * @param tabId The ID of the tab to get the current zoom settings from; defaults to the active tab of the current window.
     * @param callback Called with the tab's current zoom settings.
     */
    export function getZoomSettings(
      tabId: number,
      callback: (
        /**
         * The tab's current zoom settings.
         */
        zoomSettings: ZoomSettings,
      ) => void,
    ): void;

    /**
     * Gets the current zoom settings of a specified tab.
     *
     * @param callback Called with the tab's current zoom settings.
     */
    export function getZoomSettings(
      callback: (
        /**
         * The tab's current zoom settings.
         */
        zoomSettings: ZoomSettings,
      ) => void,
    ): void;

    /**
     * Discards a tab from memory. Discarded tabs are still visible on the tab strip and are reloaded when activated.
     *
     * @since Chrome 54
     * @param tabId The ID of the tab to be discarded. If specified, the tab is discarded unless it is active or already discarded. If omitted, the browser discards the least important tab. This can fail if no discardable tabs exist.
     */
    export function discard(
      tabId?: number,
    ): Promise<{
      /**
       * The discarded tab, if it was successfully discarded; undefined otherwise.
       */
      tab?: Tab,
    }>;

    /**
     * Discards a tab from memory. Discarded tabs are still visible on the tab strip and are reloaded when activated.
     *
     * @since Chrome 54
     * @param tabId The ID of the tab to be discarded. If specified, the tab is discarded unless it is active or already discarded. If omitted, the browser discards the least important tab. This can fail if no discardable tabs exist.
     * @param callback Called after the operation is completed.
     */
    export function discard(
      tabId?: number,
      callback?: (
        /**
         * The discarded tab, if it was successfully discarded; undefined otherwise.
         */
        tab?: Tab,
      ) => void,
    ): void;

    /**
     * Go foward to the next page, if one is available.
     *
     * @since Chrome 72
     * @param tabId The ID of the tab to navigate forward; defaults to the selected tab of the current window.
     */
    export function goForward(
      tabId?: number,
    ): Promise<{}>;

    /**
     * Go foward to the next page, if one is available.
     *
     * @since Chrome 72
     * @param tabId The ID of the tab to navigate forward; defaults to the selected tab of the current window.
     * @param callback
     */
    export function goForward(
      tabId?: number,
      callback?: () => void,
    ): void;

    /**
     * Go back to the previous page, if one is available.
     *
     * @since Chrome 72
     * @param tabId The ID of the tab to navigate back; defaults to the selected tab of the current window.
     */
    export function goBack(
      tabId?: number,
    ): Promise<{}>;

    /**
     * Go back to the previous page, if one is available.
     *
     * @since Chrome 72
     * @param tabId The ID of the tab to navigate back; defaults to the selected tab of the current window.
     * @param callback
     */
    export function goBack(
      tabId?: number,
      callback?: () => void,
    ): void;

    /**
     * The tab's loading status.
     */
    export type TabStatus = "unloaded" | "loading" | "complete";

    /**
     * An event that caused a muted state change.
     */
    export type MutedInfoReason = "user" | "capture" | "extension";

    /**
     * The tab's muted state and the reason for the last state change.
     */
    export interface MutedInfo {

      /**
       * Whether the tab is muted (prevented from playing sound). The tab may be muted even if it has not played or is not currently playing sound. Equivalent to whether the 'muted' audio indicator is showing.
       */
      muted: boolean;

      /**
       * The reason the tab was muted or unmuted. Not set if the tab's mute state has never been changed.
       */
      reason?: MutedInfoReason;

      /**
       * The ID of the extension that changed the muted state. Not set if an extension was not the reason the muted state last changed.
       */
      extensionId?: string;
    }

    export interface Tab {

      /**
       * The ID of the tab. Tab IDs are unique within a browser session. Under some circumstances a tab may not be assigned an ID; for example, when querying foreign tabs using the {@link sessions} API, in which case a session ID may be present. Tab ID can also be set to `chrome.tabs.TAB_ID_NONE` for apps and devtools windows.
       */
      id?: number;

      /**
       * The zero-based index of the tab within its window.
       */
      index: number;

      /**
       * The ID of the group that the tab belongs to.
       *
       * @since Chrome 88
       */
      groupId: number;

      /**
       * The ID of the window that contains the tab.
       */
      windowId: number;

      /**
       * The ID of the tab that opened this tab, if any. This property is only present if the opener tab still exists.
       */
      openerTabId?: number;

      /**
       * Whether the tab is selected.
       *
       * @deprecated Please use {@link tabs.Tab.highlighted}.
       */
      selected: boolean;

      /**
       * Whether the tab is highlighted.
       */
      highlighted: boolean;

      /**
       * Whether the tab is active in its window. Does not necessarily mean the window is focused.
       */
      active: boolean;

      /**
       * Whether the tab is pinned.
       */
      pinned: boolean;

      /**
       * Whether the tab has produced sound over the past couple of seconds (but it might not be heard if also muted). Equivalent to whether the 'speaker audio' indicator is showing.
       */
      audible?: boolean;

      /**
       * Whether the tab is discarded. A discarded tab is one whose content has been unloaded from memory, but is still visible in the tab strip. Its content is reloaded the next time it is activated.
       *
       * @since Chrome 54
       */
      discarded: boolean;

      /**
       * Whether the tab can be discarded automatically by the browser when resources are low.
       *
       * @since Chrome 54
       */
      autoDiscardable: boolean;

      /**
       * The tab's muted state and the reason for the last state change.
       */
      mutedInfo?: MutedInfo;

      /**
       * The last committed URL of the main frame of the tab. This property is only present if the extension's manifest includes the `"tabs"` permission and may be an empty string if the tab has not yet committed. See also {@link Tab.pendingUrl}.
       */
      url?: string;

      /**
       * The URL the tab is navigating to, before it has committed. This property is only present if the extension's manifest includes the `"tabs"` permission and there is a pending navigation.
       *
       * @since Chrome 79
       */
      pendingUrl?: string;

      /**
       * The title of the tab. This property is only present if the extension's manifest includes the `"tabs"` permission.
       */
      title?: string;

      /**
       * The URL of the tab's favicon. This property is only present if the extension's manifest includes the `"tabs"` permission. It may also be an empty string if the tab is loading.
       */
      favIconUrl?: string;

      /**
       * The tab's loading status.
       */
      status?: TabStatus;

      /**
       * Whether the tab is in an incognito window.
       */
      incognito: boolean;

      /**
       * The width of the tab in pixels.
       */
      width?: number;

      /**
       * The height of the tab in pixels.
       */
      height?: number;

      /**
       * The session ID used to uniquely identify a tab obtained from the {@link sessions} API.
       */
      sessionId?: string;
    }

    /**
     * Defines how zoom changes are handled, i.e., which entity is responsible for the actual scaling of the page; defaults to `automatic`.
     */
    export type ZoomSettingsMode = "automatic" | "manual" | "disabled";

    /**
     * Defines whether zoom changes persist for the page's origin, or only take effect in this tab; defaults to `per-origin` when in `automatic` mode, and `per-tab` otherwise.
     */
    export type ZoomSettingsScope = "per-origin" | "per-tab";

    /**
     * Defines how zoom changes in a tab are handled and at what scope.
     */
    export interface ZoomSettings {

      /**
       * Defines how zoom changes are handled, i.e., which entity is responsible for the actual scaling of the page; defaults to `automatic`.
       */
      mode?: ZoomSettingsMode;

      /**
       * Defines whether zoom changes persist for the page's origin, or only take effect in this tab; defaults to `per-origin` when in `automatic` mode, and `per-tab` otherwise.
       */
      scope?: ZoomSettingsScope;

      /**
       * Used to return the default zoom level for the current tab in calls to tabs.getZoomSettings.
       */
      defaultZoomFactor?: number;
    }

    /**
     * The type of window.
     */
    export type WindowType = "normal" | "popup" | "panel" | "app" | "devtools";

    /**
     * Fired when a tab is created. Note that the tab's URL and tab group membership may not be set at the time this event is fired, but you can listen to onUpdated events so as to be notified when a URL is set or the tab is added to a tab group.
     */
    export const onCreated: events.Event<(
      /**
       * Details of the tab that was created.
       */
      tab: Tab,
    ) => void>;

    /**
     * Fired when a tab is updated.
     */
    export const onUpdated: events.Event<(
      tabId: number,
      /**
       * Lists the changes to the state of the tab that was updated.
       */
      changeInfo: {
        /**
         * The tab's loading status.
         */
        status?: TabStatus,

        /**
         * The tab's URL if it has changed.
         */
        url?: string,

        /**
         * The tab's new group.
         *
         * @since Chrome 88
         */
        groupId?: number,

        /**
         * The tab's new pinned state.
         */
        pinned?: boolean,

        /**
         * The tab's new audible state.
         */
        audible?: boolean,

        /**
         * The tab's new discarded state.
         *
         * @since Chrome 54
         */
        discarded?: boolean,

        /**
         * The tab's new auto-discardable state.
         *
         * @since Chrome 54
         */
        autoDiscardable?: boolean,

        /**
         * The tab's new muted state and the reason for the change.
         */
        mutedInfo?: MutedInfo,

        /**
         * The tab's new favicon URL.
         */
        favIconUrl?: string,

        /**
         * The tab's new title.
         */
        title?: string,
      },

      /**
       * Gives the state of the tab that was updated.
       */
      tab: Tab,
    ) => void>;

    /**
     * Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response to the manually-moved tab. This event is not fired when a tab is moved between windows; for details, see {@link tabs.onDetached}.
     */
    export const onMoved: events.Event<(
      tabId: number,
      moveInfo: {
        windowId: number,

        fromIndex: number,

        toIndex: number,
      },
    ) => void>;

    /**
     * Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events so as to be notified when a URL is set.
     */
    export const onActivated: events.Event<(
      activeInfo: {
        /**
         * The ID of the tab that has become active.
         */
        tabId: number,

        /**
         * The ID of the window the active tab changed inside of.
         */
        windowId: number,
      },
    ) => void>;

    /**
     * Fired when the highlighted or selected tabs in a window changes.
     */
    export const onHighlighted: events.Event<(
      highlightInfo: {
        /**
         * The window whose tabs changed.
         */
        windowId: number,

        /**
         * All highlighted tabs in the window.
         */
        tabIds: number[],
      },
    ) => void>;

    /**
     * Fired when a tab is detached from a window; for example, because it was moved between windows.
     */
    export const onDetached: events.Event<(
      tabId: number,
      detachInfo: {
        oldWindowId: number,

        oldPosition: number,
      },
    ) => void>;

    /**
     * Fired when a tab is attached to a window; for example, because it was moved between windows.
     */
    export const onAttached: events.Event<(
      tabId: number,
      attachInfo: {
        newWindowId: number,

        newPosition: number,
      },
    ) => void>;

    /**
     * Fired when a tab is closed.
     */
    export const onRemoved: events.Event<(
      tabId: number,
      removeInfo: {
        /**
         * The window whose tab is closed.
         */
        windowId: number,

        /**
         * True when the tab was closed because its parent window was closed.
         */
        isWindowClosing: boolean,
      },
    ) => void>;

    /**
     * Fired when a tab is replaced with another tab due to prerendering or instant.
     */
    export const onReplaced: events.Event<(
      addedTabId: number,
      removedTabId: number,
    ) => void>;

    /**
     * Fired when a tab is zoomed.
     */
    export const onZoomChange: events.Event<(
      ZoomChangeInfo: {
        tabId: number,

        oldZoomFactor: number,

        newZoomFactor: number,

        zoomSettings: ZoomSettings,
      },
    ) => void>;
  }

  /**
   * Use the `chrome.topSites` API to access the top sites (i.e. most visited sites) that are displayed on the new tab page. These do not include shortcuts customized by the user.
   *
   * @chrome-permission topSites
   */
  export namespace topSites {

    /**
     * Gets a list of top sites.
     *
     * @param callback
     */
    export function get(
      callback: (
        data: MostVisitedURL[],
      ) => void,
    ): void;

    /**
     * An object encapsulating a most visited URL, such as the default shortcuts on the new tab page.
     */
    export interface MostVisitedURL {

      /**
       * The most visited URL.
       */
      url: string;

      /**
       * The title of the page
       */
      title: string;
    }
  }

  /**
   * Use the `chrome.tts` API to play synthesized text-to-speech (TTS). See also the related {@link ttsEngine} API, which allows an extension to implement a speech engine.
   *
   * @chrome-permission tts
   */
  export namespace tts {

    /**
     * Speaks text using a text-to-speech engine.
     *
     * @param utterance The text to speak, either plain text or a complete, well-formed SSML document. Speech engines that do not support SSML will strip away the tags and speak the text. The maximum length of the text is 32,768 characters.
     * @param options The speech options.
     * @param callback Called right away, before speech finishes. Check {@link runtime.lastError} to make sure there were no errors. Use options.onEvent to get more detailed feedback.
     */
    export function speak(
      utterance: string,
      options?: TtsOptions,
      callback?: () => void,
    ): void;

    /**
     * Stops any current speech and flushes the queue of any pending utterances. In addition, if speech was paused, it will now be un-paused for the next call to speak.
     */
    export function stop(): void;

    /**
     * Pauses speech synthesis, potentially in the middle of an utterance. A call to resume or stop will un-pause speech.
     */
    export function pause(): void;

    /**
     * If speech was paused, resumes speaking where it left off.
     */
    export function resume(): void;

    /**
     * Checks whether the engine is currently speaking. On Mac OS X, the result is true whenever the system speech engine is speaking, even if the speech wasn't initiated by Chrome.
     *
     * @param callback
     */
    export function isSpeaking(
      callback?: (
        /**
         * True if speaking, false otherwise.
         */
        speaking: boolean,
      ) => void,
    ): void;

    /**
     * Gets an array of all available voices.
     *
     * @param callback
     */
    export function getVoices(
      callback?: (
        /**
         * Array of {@link tts.TtsVoice} objects representing the available voices for speech synthesis.
         */
        voices: TtsVoice[],
      ) => void,
    ): void;

    /**
     * @since Chrome 54
     */
    export type EventType = "start" | "end" | "word" | "sentence" | "marker" | "interrupted" | "cancelled" | "error" | "pause" | "resume";

    /**
     * @since Chrome 54
     * @deprecated Gender is deprecated and is ignored.
     * @deprecated-since Chrome 70
     */
    export type VoiceGender = "male" | "female";

    /**
     * The speech options for the TTS engine.
     *
     * @since Chrome 77
     */
    export interface TtsOptions {

      /**
       * If true, enqueues this utterance if TTS is already in progress. If false (the default), interrupts any current speech and flushes the speech queue before speaking this new utterance.
       */
      enqueue?: boolean;

      /**
       * The name of the voice to use for synthesis. If empty, uses any available voice.
       */
      voiceName?: string;

      /**
       * The extension ID of the speech engine to use, if known.
       */
      extensionId?: string;

      /**
       * The language to be used for synthesis, in the form _language_\-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'.
       */
      lang?: string;

      /**
       * Gender of voice for synthesized speech.
       *
       * @deprecated Gender is deprecated and will be ignored.
       * @deprecated-since Chrome 77
       */
      gender?: VoiceGender;

      /**
       * Speaking rate relative to the default rate for this voice. 1.0 is the default rate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and 0.5 is half as fast. Values below 0.1 or above 10.0 are strictly disallowed, but many voices will constrain the minimum and maximum rates further—for example a particular voice may not actually speak faster than 3 times normal even if you specify a value larger than 3.0.
       */
      rate?: number;

      /**
       * Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being highest. 1.0 corresponds to a voice's default pitch.
       */
      pitch?: number;

      /**
       * Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being highest, with a default of 1.0.
       */
      volume?: number;

      /**
       * The TTS event types the voice must support.
       */
      requiredEventTypes?: string[];

      /**
       * The TTS event types that you are interested in listening to. If missing, all event types may be sent.
       */
      desiredEventTypes?: string[];

      /**
       * This function is called with events that occur in the process of speaking the utterance.
       *
       * @param event The update event from the text-to-speech engine indicating the status of this utterance.
       */
      onEvent(
        event: TtsEvent,
      ): void;
    }

    /**
     * An event from the TTS engine to communicate the status of an utterance.
     */
    export interface TtsEvent {

      /**
       * The type can be `start` as soon as speech has started, `word` when a word boundary is reached, `sentence` when a sentence boundary is reached, `marker` when an SSML mark element is reached, `end` when the end of the utterance is reached, `interrupted` when the utterance is stopped or interrupted before reaching the end, `cancelled` when it's removed from the queue before ever being synthesized, or `error` when any other error occurs. When pausing speech, a `pause` event is fired if a particular utterance is paused in the middle, and `resume` if an utterance resumes speech. Note that pause and resume events may not fire if speech is paused in-between utterances.
       */
      type: EventType;

      /**
       * The index of the current character in the utterance. For word events, the event fires at the end of one word and before the beginning of the next. The `charIndex` represents a point in the text at the beginning of the next word to be spoken.
       */
      charIndex?: number;

      /**
       * The error description, if the event type is `error`.
       */
      errorMessage?: string;

      /**
       * The length of the next part of the utterance. For example, in a `word` event, this is the length of the word which will be spoken next. It will be set to -1 if not set by the speech engine.
       *
       * @since Chrome 74
       */
      length?: number;
    }

    /**
     * A description of a voice available for speech synthesis.
     */
    export interface TtsVoice {

      /**
       * The name of the voice.
       */
      voiceName?: string;

      /**
       * The language that this voice supports, in the form _language_\-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'.
       */
      lang?: string;

      /**
       * This voice's gender.
       *
       * @deprecated Gender is deprecated and will be ignored.
       * @deprecated-since Chrome 70
       */
      gender?: VoiceGender;

      /**
       * If true, the synthesis engine is a remote network resource. It may be higher latency and may incur bandwidth costs.
       */
      remote?: boolean;

      /**
       * The ID of the extension providing this voice.
       */
      extensionId?: string;

      /**
       * All of the callback event types that this voice is capable of sending.
       */
      eventTypes?: EventType[];
    }
  }

  /**
   * Use the `chrome.ttsEngine` API to implement a text-to-speech(TTS) engine using an extension. If your extension registers using this API, it will receive events containing an utterance to be spoken and other parameters when any extension or Chrome App uses the {@link tts} API to generate speech. Your extension can then use any available web technology to synthesize and output the speech, and send events back to the calling function to report the status.
   *
   * @chrome-permission ttsEngine
   */
  export namespace ttsEngine {

    /**
     * Called by an engine to update its list of voices. This list overrides any voices declared in this extension's manifest.
     *
     * @since Chrome 66
     * @param voices Array of {@link tts.TtsVoice} objects representing the available voices for speech synthesis.
     */
    export function updateVoices(
      voices: tts.TtsVoice[],
    ): void;

    /**
     * @since Chrome 54
     * @deprecated Gender is deprecated and will be ignored.
     * @deprecated-since Chrome 70
     */
    export type VoiceGender = "male" | "female";

    /**
     * Options specified to the tts.speak() method.
     *
     * @since Chrome 92
     */
    export interface SpeakOptions {

      /**
       * The name of the voice to use for synthesis.
       */
      voiceName?: string;

      /**
       * The language to be used for synthesis, in the form _language_\-_region_. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'.
       */
      lang?: string;

      /**
       * Gender of voice for synthesized speech.
       *
       * @deprecated Gender is deprecated and will be ignored.
       * @deprecated-since Chrome 92
       */
      gender?: VoiceGender;

      /**
       * Speaking rate relative to the default rate for this voice. 1.0 is the default rate, normally around 180 to 220 words per minute. 2.0 is twice as fast, and 0.5 is half as fast. This value is guaranteed to be between 0.1 and 10.0, inclusive. When a voice does not support this full range of rates, don't return an error. Instead, clip the rate to the range the voice supports.
       */
      rate?: number;

      /**
       * Speaking pitch between 0 and 2 inclusive, with 0 being lowest and 2 being highest. 1.0 corresponds to this voice's default pitch.
       */
      pitch?: number;

      /**
       * Speaking volume between 0 and 1 inclusive, with 0 being lowest and 1 being highest, with a default of 1.0.
       */
      volume?: number;
    }

    /**
     * Contains the audio stream format expected to be produced by an engine.
     *
     * @since Chrome 92
     */
    export interface AudioStreamOptions {

      /**
       * The sample rate expected in an audio buffer.
       */
      sampleRate: number;

      /**
       * The number of samples within an audio buffer.
       */
      bufferSize: number;
    }

    /**
     * Parameters containing an audio buffer and associated data.
     *
     * @since Chrome 92
     */
    export interface AudioBuffer {

      /**
       * The audio buffer from the text-to-speech engine. It should have length exactly audioStreamOptions.bufferSize and encoded as mono, at audioStreamOptions.sampleRate, and as linear pcm, 32-bit signed float i.e. the Float32Array type in javascript.
       */
      audioBuffer: ArrayBuffer;

      /**
       * The character index associated with this audio buffer.
       */
      charIndex?: number;

      /**
       * True if this audio buffer is the last for the text being spoken.
       */
      isLastBuffer?: boolean;
    }

    /**
     * Called when the user makes a call to tts.speak() and one of the voices from this extension's manifest is the first to match the options object.
     */
    export const onSpeak: events.Event<(
      /**
       * The text to speak, specified as either plain text or an SSML document. If your engine does not support SSML, you should strip out all XML markup and synthesize only the underlying text content. The value of this parameter is guaranteed to be no more than 32,768 characters. If this engine does not support speaking that many characters at a time, the utterance should be split into smaller chunks and queued internally without returning an error.
       */
      utterance: string,

      /**
       * Options specified to the tts.speak() method.
       */
      options: SpeakOptions,

      /**
       * Call this function with events that occur in the process of speaking the utterance.
       *
       * @param event The event from the text-to-speech engine indicating the status of this utterance.
       */
      sendTtsEvent: (
        /**
         * The event from the text-to-speech engine indicating the status of this utterance.
         */
        event: tts.TtsEvent,
      ) => void,
    ) => void>;

    /**
     * Called when the user makes a call to tts.speak() and one of the voices from this extension's manifest is the first to match the options object. Differs from ttsEngine.onSpeak in that Chrome provides audio playback services and handles dispatching tts events.
     *
     * @since Chrome 92
     */
    export const onSpeakWithAudioStream: events.Event<(
      /**
       * The text to speak, specified as either plain text or an SSML document. If your engine does not support SSML, you should strip out all XML markup and synthesize only the underlying text content. The value of this parameter is guaranteed to be no more than 32,768 characters. If this engine does not support speaking that many characters at a time, the utterance should be split into smaller chunks and queued internally without returning an error.
       */
      utterance: string,

      /**
       * Options specified to the tts.speak() method.
       */
      options: SpeakOptions,

      /**
       * Contains the audio stream format expected to be produced by this engine.
       */
      audioStreamOptions: AudioStreamOptions,

      /**
       * Call this function with audio that occur in the process of speaking the utterance.
       *
       * @param audioBufferParams Parameters containing an audio buffer and associated data.
       */
      sendTtsAudio: (
        /**
         * Parameters containing an audio buffer and associated data.
         */
        audioBufferParams: AudioBuffer,
      ) => void,

      /**
       * Call this function to indicate an error with rendering this utterance.
       *
       * @chrome-unknown-version
       * @param errorMessage A string describing the error.
       */
      sendError: (
        /**
         * A string describing the error.
         */
        errorMessage?: string,
      ) => void,
    ) => void>;

    /**
     * Fired when a call is made to tts.stop and this extension may be in the middle of speaking. If an extension receives a call to onStop and speech is already stopped, it should do nothing (not raise an error). If speech is in the paused state, this should cancel the paused state.
     */
    export const onStop: events.Event<() => void>;

    /**
     * Optional: if an engine supports the pause event, it should pause the current utterance being spoken, if any, until it receives a resume event or stop event. Note that a stop event should also clear the paused state.
     */
    export const onPause: events.Event<() => void>;

    /**
     * Optional: if an engine supports the pause event, it should also support the resume event, to continue speaking the current utterance, if any. Note that a stop event should also clear the paused state.
     */
    export const onResume: events.Event<() => void>;
  }

  /**
   * The `chrome.types` API contains type declarations for Chrome.
   */
  export namespace types {

    /**
     * The scope of the ChromeSetting. One of
     *
     * *   regular: setting for the regular profile (which is inherited by the incognito profile if not overridden elsewhere),
     * *   regular\_only: setting for the regular profile only (not inherited by the incognito profile),
     * *   incognito\_persistent: setting for the incognito profile that survives browser restarts (overrides regular preferences),
     * *   incognito\_session\_only: setting for the incognito profile that can only be set during an incognito session and is deleted when the incognito session ends (overrides regular and incognito\_persistent preferences).
     */
    export type ChromeSettingScope = "regular" | "regular_only" | "incognito_persistent" | "incognito_session_only";

    /**
     * One of
     *
     * *   not\_controllable: cannot be controlled by any extension
     * *   controlled\_by\_other\_extensions: controlled by extensions with higher precedence
     * *   controllable\_by\_this\_extension: can be controlled by this extension
     * *   controlled\_by\_this\_extension: controlled by this extension
     */
    export type LevelOfControl = "not_controllable" | "controlled_by_other_extensions" | "controllable_by_this_extension" | "controlled_by_this_extension";

    /**
     * An interface that allows access to a Chrome browser setting. See {@link accessibilityFeatures} for an example.
     */
    export interface ChromeSetting<T> {

      /**
       * Gets the value of a setting.
       *
       * @param details Which setting to consider.
       * @param callback
       */
      get(
        details: {
          /**
           * Whether to return the value that applies to the incognito session (default false).
           */
          incognito?: boolean,
        },
        callback: (
          /**
           * Details of the currently effective value.
           */
          details: {
            /**
             * The value of the setting.
             */
            value: T,

            /**
             * The level of control of the setting.
             */
            levelOfControl: LevelOfControl,

            /**
             * Whether the effective value is specific to the incognito session.
             * This property will _only_ be present if the incognito property in the details parameter of `get()` was true.
             */
            incognitoSpecific?: boolean,
          },
        ) => void,
      ): void;

      /**
       * Sets the value of a setting.
       *
       * @param details Which setting to change.
       * @param callback Called at the completion of the set operation.
       */
      set(
        details: {
          /**
           * The value of the setting.
           * Note that every setting has a specific value type, which is described together with the setting. An extension should _not_ set a value of a different type.
           */
          value: T,

          /**
           * Where to set the setting (default: regular).
           */
          scope?: ChromeSettingScope,
        },
        callback?: () => void,
      ): void;

      /**
       * Clears the setting, restoring any default value.
       *
       * @param details Which setting to clear.
       * @param callback Called at the completion of the clear operation.
       */
      clear(
        details: {
          /**
           * Where to clear the setting (default: regular).
           */
          scope?: ChromeSettingScope,
        },
        callback?: () => void,
      ): void;

      /**
       * Fired after the setting changes.
       */
      onChange: events.Event<(
        details: {
          /**
           * The value of the setting after the change.
           */
          value: T,

          /**
           * The level of control of the setting.
           */
          levelOfControl: LevelOfControl,

          /**
           * Whether the value that has changed is specific to the incognito session.
           * This property will _only_ be present if the user has enabled the extension in incognito mode.
           */
          incognitoSpecific?: boolean,
        },
      ) => void>;
    }
  }

  /**
   * Use the `chrome.vpnProvider` API to implement a VPN client.
   *
   * @chrome-platform chromeos
   * @chrome-permission vpnProvider
   */
  export namespace vpnProvider {

    /**
     * Creates a new VPN configuration that persists across multiple login sessions of the user.
     *
     * @param name The name of the VPN configuration.
     * @param callback Called when the configuration is created or if there is an error.
     */
    export function createConfig(
      name: string,
      callback: (
        /**
         * A unique ID for the created configuration, or `undefined` on failure.
         */
        id: string,
      ) => void,
    ): void;

    /**
     * Destroys a VPN configuration created by the extension.
     *
     * @param id ID of the VPN configuration to destroy.
     * @param callback Called when the configuration is destroyed or if there is an error.
     */
    export function destroyConfig(
      id: string,
      callback?: () => void,
    ): void;

    /**
     * Sets the parameters for the VPN session. This should be called immediately after `"connected"` is received from the platform. This will succeed only when the VPN session is owned by the extension.
     *
     * @param parameters The parameters for the VPN session.
     * @param callback Called when the parameters are set or if there is an error.
     */
    export function setParameters(
      parameters: Parameters,
      callback: () => void,
    ): void;

    /**
     * Sends an IP packet through the tunnel created for the VPN session. This will succeed only when the VPN session is owned by the extension.
     *
     * @param data The IP packet to be sent to the platform.
     * @param callback Called when the packet is sent or if there is an error.
     */
    export function sendPacket(
      data: ArrayBuffer,
      callback?: () => void,
    ): void;

    /**
     * Notifies the VPN session state to the platform. This will succeed only when the VPN session is owned by the extension.
     *
     * @param state The VPN session state of the VPN client.
     * @param callback Called when the notification is complete or if there is an error.
     */
    export function notifyConnectionStateChanged(
      state: VpnConnectionState,
      callback?: () => void,
    ): void;

    export interface Parameters {

      /**
       * IP address for the VPN interface in CIDR notation. IPv4 is currently the only supported mode.
       */
      address: string;

      /**
       * Broadcast address for the VPN interface. (default: deduced from IP address and mask)
       */
      broadcastAddress?: string;

      /**
       * MTU setting for the VPN interface. (default: 1500 bytes)
       */
      mtu?: string;

      /**
       * Exclude network traffic to the list of IP blocks in CIDR notation from the tunnel. This can be used to bypass traffic to and from the VPN server. When many rules match a destination, the rule with the longest matching prefix wins. Entries that correspond to the same CIDR block are treated as duplicates. Such duplicates in the collated (exclusionList + inclusionList) list are eliminated and the exact duplicate entry that will be eliminated is undefined.
       */
      exclusionList: string[];

      /**
       * Include network traffic to the list of IP blocks in CIDR notation to the tunnel. This parameter can be used to set up a split tunnel. By default no traffic is directed to the tunnel. Adding the entry "0.0.0.0/0" to this list gets all the user traffic redirected to the tunnel. When many rules match a destination, the rule with the longest matching prefix wins. Entries that correspond to the same CIDR block are treated as duplicates. Such duplicates in the collated (exclusionList + inclusionList) list are eliminated and the exact duplicate entry that will be eliminated is undefined.
       */
      inclusionList: string[];

      /**
       * A list of search domains. (default: no search domain)
       */
      domainSearch?: string[];

      /**
       * A list of IPs for the DNS servers.
       */
      dnsServers: string[];

      /**
       * Whether or not the VPN extension implements auto-reconnection.
       *
       * If true, the `linkDown`, `linkUp`, `linkChanged`, `suspend`, and `resume` platform messages will be used to signal the respective events. If false, the system will forcibly disconnect the VPN if the network topology changes, and the user will need to reconnect manually. (default: false)
       *
       * This property is new in Chrome 51; it will generate an exception in earlier versions. try/catch can be used to conditionally enable the feature based on browser support.
       */
      reconnect?: string;
    }

    /**
     * The enum is used by the platform to notify the client of the VPN session status.
     */
    export type PlatformMessage = "connected" | "disconnected" | "error" | "linkDown" | "linkUp" | "linkChanged" | "suspend" | "resume";

    /**
     * The enum is used by the VPN client to inform the platform of its current state. This helps provide meaningful messages to the user.
     */
    export type VpnConnectionState = "connected" | "failure";

    /**
     * The enum is used by the platform to indicate the event that triggered `onUIEvent`.
     */
    export type UIEvent = "showAddDialog" | "showConfigureDialog";

    /**
     * Triggered when a message is received from the platform for a VPN configuration owned by the extension.
     */
    export const onPlatformMessage: events.Event<(
      /**
       * ID of the configuration the message is intended for.
       */
      id: string,

      /**
       * The message received from the platform. Note that new message types may be added in future Chrome versions to support new features.
       */
      message: PlatformMessage,

      /**
       * Error message when there is an error.
       */
      error: string,
    ) => void>;

    /**
     * Triggered when an IP packet is received via the tunnel for the VPN session owned by the extension.
     */
    export const onPacketReceived: events.Event<(
      /**
       * The IP packet received from the platform.
       */
      data: ArrayBuffer,
    ) => void>;

    /**
     * Triggered when a configuration created by the extension is removed by the platform.
     */
    export const onConfigRemoved: events.Event<(
      /**
       * ID of the removed configuration.
       */
      id: string,
    ) => void>;

    /**
     * Triggered when a configuration is created by the platform for the extension.
     */
    export const onConfigCreated: events.Event<(
      /**
       * ID of the configuration created.
       */
      id: string,

      /**
       * Name of the configuration created.
       */
      name: string,

      /**
       * Configuration data provided by the administrator.
       */
      data: {[name: string]: any},
    ) => void>;

    /**
     * Triggered when there is a UI event for the extension. UI events are signals from the platform that indicate to the app that a UI dialog needs to be shown to the user.
     */
    export const onUIEvent: events.Event<(
      /**
       * The UI event that is triggered.
       */
      event: UIEvent,

      /**
       * ID of the configuration for which the UI event was triggered.
       */
      id?: string,
    ) => void>;
  }

  /**
   * Use the `chrome.wallpaper` API to change the ChromeOS wallpaper.
   *
   * @chrome-platform chromeos
   * @chrome-permission wallpaper
   */
  export namespace wallpaper {

    /**
     * Sets wallpaper to the image at _url_ or _wallpaperData_ with the specified _layout_
     *
     * @param details
     * @param callback
     */
    export function setWallpaper(
      details: {
        /**
         * The jpeg or png encoded wallpaper image as an ArrayBuffer.
         */
        data?: ArrayBuffer,

        /**
         * The URL of the wallpaper to be set (can be relative).
         */
        url?: string,

        /**
         * The supported wallpaper layouts.
         */
        layout: WallpaperLayout,

        /**
         * The file name of the saved wallpaper.
         */
        filename: string,

        /**
         * True if a 128x60 thumbnail should be generated. Layout and ratio are not supported yet.
         */
        thumbnail?: boolean,
      },
      callback: (
        /**
         * The jpeg encoded wallpaper thumbnail. It is generated by resizing the wallpaper to 128x60.
         */
        thumbnail?: ArrayBuffer,
      ) => void,
    ): void;

    /**
     * The supported wallpaper layouts.
     */
    export type WallpaperLayout = "STRETCH" | "CENTER" | "CENTER_CROPPED";
  }

  /**
   * Stub namepsace for the "web\_accessible\_resources" manifest key.
   *
   * @since Chrome 90
   */
  export namespace webAccessibleResources {

    export interface WebAccessibleResource {

      /**
       * Relative paths within the extension package representing web accessible resources.
       */
      resources: string[];

      /**
       * List of [match patterns](https://developer.chrome.com/docs/extensions/mv3/match_patterns/) to which "resources" are accessible. These patterns should have an effective path of "\*". Each match will be checked against the initiating origin.
       */
      matches?: string[];

      /**
       * List of extension IDs the "resources" are accessible to.
       */
      extension_ids?: string[];

      /**
       * If true, the web accessible resources will only be accessible through a dynamic ID. This is an identifier that uniquely identifies the extension and is generated each session. The corresponding dynamic extension URL is available through {@link runtime.getURL}.
       */
      use_dynamic_url?: boolean;
    }
  }

  /**
   * Stub namepsace for the "web\_accessible\_resources" manifest key.
   *
   * @since Chrome 90
   */
  export namespace webAccessibleResourcesMv2 {
  }

  /**
   * Use the `chrome.webNavigation` API to receive notifications about the status of navigation requests in-flight.
   *
   * @chrome-permission webNavigation
   */
  export namespace webNavigation {

    /**
     * Retrieves information about the given frame. A frame refers to an <iframe> or a <frame> of a web page and is identified by a tab ID and a frame ID.
     *
     * @param details Information about the frame to retrieve information about.
     */
    export function getFrame(
      details: {
        /**
         * The ID of the tab in which the frame is.
         */
        tabId: number,

        /**
         * The ID of the process that runs the renderer for this tab.
         *
         * @deprecated Frames are now uniquely identified by their tab ID and frame ID; the process ID is no longer needed and therefore ignored.
         */
        processId?: number,

        /**
         * The ID of the frame in the given tab.
         */
        frameId: number,
      },
    ): Promise<{
      /**
       * Information about the requested frame, null if the specified frame ID and/or tab ID are invalid.
       */
      details?: {
        /**
         * True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired.
         */
        errorOccurred: boolean,

        /**
         * The URL currently associated with this frame, if the frame identified by the frameId existed at one point in the given tab. The fact that an URL is associated with a given frameId does not imply that the corresponding frame still exists.
         */
        url: string,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         */
        parentFrameId: number,
      },
    }>;

    /**
     * Retrieves information about the given frame. A frame refers to an <iframe> or a <frame> of a web page and is identified by a tab ID and a frame ID.
     *
     * @param details Information about the frame to retrieve information about.
     * @param callback
     */
    export function getFrame(
      details: {
        /**
         * The ID of the tab in which the frame is.
         */
        tabId: number,

        /**
         * The ID of the process that runs the renderer for this tab.
         *
         * @deprecated Frames are now uniquely identified by their tab ID and frame ID; the process ID is no longer needed and therefore ignored.
         */
        processId?: number,

        /**
         * The ID of the frame in the given tab.
         */
        frameId: number,
      },
      callback: (
        /**
         * Information about the requested frame, null if the specified frame ID and/or tab ID are invalid.
         */
        details?: {
          /**
           * True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired.
           */
          errorOccurred: boolean,

          /**
           * The URL currently associated with this frame, if the frame identified by the frameId existed at one point in the given tab. The fact that an URL is associated with a given frameId does not imply that the corresponding frame still exists.
           */
          url: string,

          /**
           * The ID of the parent frame, or `-1` if this is the main frame.
           */
          parentFrameId: number,
        },
      ) => void,
    ): void;

    /**
     * Retrieves information about all frames of a given tab.
     *
     * @param details Information about the tab to retrieve all frames from.
     */
    export function getAllFrames(
      details: {
        /**
         * The ID of the tab.
         */
        tabId: number,
      },
    ): Promise<{
      /**
       * A list of frames in the given tab, null if the specified tab ID is invalid.
       */
      details?: {
        /**
         * True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired.
         */
        errorOccurred: boolean,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * The ID of the frame. 0 indicates that this is the main frame; a positive value indicates the ID of a subframe.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         */
        parentFrameId: number,

        /**
         * The URL currently associated with this frame.
         */
        url: string,
      }[],
    }>;

    /**
     * Retrieves information about all frames of a given tab.
     *
     * @param details Information about the tab to retrieve all frames from.
     * @param callback
     */
    export function getAllFrames(
      details: {
        /**
         * The ID of the tab.
         */
        tabId: number,
      },
      callback: (
        /**
         * A list of frames in the given tab, null if the specified tab ID is invalid.
         */
        details?: {
          /**
           * True if the last navigation in this frame was interrupted by an error, i.e. the onErrorOccurred event fired.
           */
          errorOccurred: boolean,

          /**
           * The ID of the process that runs the renderer for this frame.
           */
          processId: number,

          /**
           * The ID of the frame. 0 indicates that this is the main frame; a positive value indicates the ID of a subframe.
           */
          frameId: number,

          /**
           * The ID of the parent frame, or `-1` if this is the main frame.
           */
          parentFrameId: number,

          /**
           * The URL currently associated with this frame.
           */
          url: string,
        }[],
      ) => void,
    ): void;

    /**
     * Cause of the navigation. The same transition types as defined in the history API are used. These are the same transition types as defined in the [history API](https://developer.chrome.com/docs/extensions/reference/history/#transition_types) except with `"start_page"` in place of `"auto_toplevel"` (for backwards compatibility).
     */
    export type TransitionType = "link" | "typed" | "auto_bookmark" | "auto_subframe" | "manual_subframe" | "generated" | "start_page" | "form_submit" | "reload" | "keyword" | "keyword_generated";

    export type TransitionQualifier = "client_redirect" | "server_redirect" | "forward_back" | "from_address_bar";

    /**
     * Fired when a navigation is about to occur.
     */
    export const onBeforeNavigate: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation is about to occur.
         */
        tabId: number,

        url: string,

        /**
         * The value of -1.
         *
         * @deprecated The processId is no longer set for this event, since the process which will render the resulting document is not known until onCommit.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique for a given tab and process.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         */
        parentFrameId: number,

        /**
         * The time when the browser was about to start the navigation, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when a navigation is committed. The document (and the resources it refers to, such as images and subframes) might still be downloading, but at least part of the document has been received from the server and the browser has decided to switch to the new document.
     */
    export const onCommitted: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * Cause of the navigation.
         */
        transitionType: TransitionType,

        /**
         * A list of transition qualifiers.
         */
        transitionQualifiers: TransitionQualifier[],

        /**
         * The time when the navigation was committed, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when the page's DOM is fully constructed, but the referenced resources may not finish loading.
     */
    export const onDOMContentLoaded: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * The time when the page's DOM was fully constructed, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when a document, including the resources it refers to, is completely loaded and initialized.
     */
    export const onCompleted: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * The time when the document finished loading, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation.
     */
    export const onErrorOccurred: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The value of -1.
         *
         * @deprecated The processId is no longer set for this event.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * The error description.
         */
        error: string,

        /**
         * The time when the error occurred, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when a new window, or a new tab in an existing window, is created to host a navigation.
     */
    export const onCreatedNavigationTarget: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation is triggered.
         */
        sourceTabId: number,

        /**
         * The ID of the process that runs the renderer for the source frame.
         */
        sourceProcessId: number,

        /**
         * The ID of the frame with sourceTabId in which the navigation is triggered. 0 indicates the main frame.
         */
        sourceFrameId: number,

        /**
         * The URL to be opened in the new window.
         */
        url: string,

        /**
         * The ID of the tab in which the url is opened
         */
        tabId: number,

        /**
         * The time when the browser was about to create a new view, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when the reference fragment of a frame was updated. All future events for that frame will use the updated URL.
     */
    export const onReferenceFragmentUpdated: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * Cause of the navigation.
         */
        transitionType: TransitionType,

        /**
         * A list of transition qualifiers.
         */
        transitionQualifiers: TransitionQualifier[],

        /**
         * The time when the navigation was committed, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab.
     */
    export const onTabReplaced: events.Event<(
      details: {
        /**
         * The ID of the tab that was replaced.
         */
        replacedTabId: number,

        /**
         * The ID of the tab that replaced the old tab.
         */
        tabId: number,

        /**
         * The time when the replacement happened, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;

    /**
     * Fired when the frame's history was updated to a new URL. All future events for that frame will use the updated URL.
     */
    export const onHistoryStateUpdated: events.Event<(
      details: {
        /**
         * The ID of the tab in which the navigation occurs.
         */
        tabId: number,

        url: string,

        /**
         * The ID of the process that runs the renderer for this frame.
         */
        processId: number,

        /**
         * 0 indicates the navigation happens in the tab content window; a positive value indicates navigation in a subframe. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * The ID of the parent frame, or `-1` if this is the main frame.
         *
         * @since Chrome 74
         */
        parentFrameId: number,

        /**
         * Cause of the navigation.
         */
        transitionType: TransitionType,

        /**
         * A list of transition qualifiers.
         */
        transitionQualifiers: TransitionQualifier[],

        /**
         * The time when the navigation was committed, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => void>;
  }

  /**
   * Use the `chrome.webRequest` API to observe and analyze traffic and to intercept, block, or modify requests in-flight.
   *
   * @chrome-permission webRequest
   */
  export namespace webRequest {

    /**
     * The maximum number of times that `handlerBehaviorChanged` can be called per 10 minute sustained interval. `handlerBehaviorChanged` is an expensive function call that shouldn't be called often.
     */
    export const MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES: 20;

    /**
     * Needs to be called when the behavior of the webRequest handlers has changed to prevent incorrect handling due to caching. This function call is expensive. Don't call it often.
     *
     * @param callback
     */
    export function handlerBehaviorChanged(
      callback?: () => void,
    ): void;

    export type ResourceType = "main_frame" | "sub_frame" | "stylesheet" | "script" | "image" | "font" | "object" | "xmlhttprequest" | "ping" | "csp_report" | "media" | "websocket" | "other";

    export type OnBeforeRequestOptions = "blocking" | "requestBody" | "extraHeaders";

    export type OnBeforeSendHeadersOptions = "requestHeaders" | "blocking" | "extraHeaders";

    export type OnSendHeadersOptions = "requestHeaders" | "extraHeaders";

    export type OnHeadersReceivedOptions = "blocking" | "responseHeaders" | "extraHeaders";

    export type OnAuthRequiredOptions = "responseHeaders" | "blocking" | "asyncBlocking" | "extraHeaders";

    export type OnResponseStartedOptions = "responseHeaders" | "extraHeaders";

    export type OnBeforeRedirectOptions = "responseHeaders" | "extraHeaders";

    export type OnCompletedOptions = "responseHeaders" | "extraHeaders";

    /**
     * @since Chrome 79
     */
    export type OnErrorOccurredOptions = "extraHeaders";

    /**
     * An object describing filters to apply to webRequest events.
     */
    export interface RequestFilter {

      /**
       * A list of URLs or URL patterns. Requests that cannot match any of the URLs will be filtered out.
       */
      urls: string[];

      /**
       * A list of request types. Requests that cannot match any of the types will be filtered out.
       */
      types?: ResourceType[];

      tabId?: number;

      windowId?: number;
    }

    /**
     * An array of HTTP headers. Each header is represented as a dictionary containing the keys `name` and either `value` or `binaryValue`.
     */
    export type HttpHeaders = {
      /**
       * Name of the HTTP header.
       */
      name: string,

      /**
       * Value of the HTTP header if it can be represented by UTF-8.
       */
      value?: string,

      /**
       * Value of the HTTP header if it cannot be represented by UTF-8, stored as individual byte values (0..255).
       */
      binaryValue?: number[],
    }[];

    /**
     * Returns value for event handlers that have the 'blocking' extraInfoSpec applied. Allows the event handler to modify network requests.
     */
    export interface BlockingResponse {

      /**
       * If true, the request is cancelled. This prevents the request from being sent. This can be used as a response to the onBeforeRequest, onBeforeSendHeaders, onHeadersReceived and onAuthRequired events.
       */
      cancel?: boolean;

      /**
       * Only used as a response to the onBeforeRequest and onHeadersReceived events. If set, the original request is prevented from being sent/completed and is instead redirected to the given URL. Redirections to non-HTTP schemes such as `data:` are allowed. Redirects initiated by a redirect action use the original request method for the redirect, with one exception: If the redirect is initiated at the onHeadersReceived stage, then the redirect will be issued using the GET method. Redirects from URLs with `ws://` and `wss://` schemes are **ignored**.
       */
      redirectUrl?: string;

      /**
       * Only used as a response to the onBeforeSendHeaders event. If set, the request is made with these request headers instead.
       */
      requestHeaders?: HttpHeaders;

      /**
       * Only used as a response to the onHeadersReceived event. If set, the server is assumed to have responded with these response headers instead. Only return `responseHeaders` if you really want to modify the headers in order to limit the number of conflicts (only one extension may modify `responseHeaders` for each request).
       */
      responseHeaders?: HttpHeaders;

      /**
       * Only used as a response to the onAuthRequired event. If set, the request is made using the supplied credentials.
       */
      authCredentials?: {
        username: string,

        password: string,
      };
    }

    /**
     * Contains data uploaded in a URL request.
     */
    export interface UploadData {

      /**
       * An ArrayBuffer with a copy of the data.
       */
      bytes?: any;

      /**
       * A string with the file's path and name.
       */
      file?: string;
    }

    /**
     * Contains data passed within form data. For urlencoded form it is stored as string if data is utf-8 string and as ArrayBuffer otherwise. For form-data it is ArrayBuffer. If form-data represents uploading file, it is string with filename, if the filename is provided.
     *
     * @since Chrome 66
     */
    export type FormDataItem = ArrayBuffer | string;

    /**
     * @since Chrome 70
     */
    export type IgnoredActionType = "redirect" | "request_headers" | "response_headers" | "auth_credentials";

    /**
     * Fired when a request is about to occur.
     */
    export const onBeforeRequest: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * Contains the HTTP request body data. Only provided if extraInfoSpec contains 'requestBody'.
         */
        requestBody?: {
          /**
           * Errors when obtaining request body data.
           */
          error?: string,

          /**
           * If the request method is POST and the body is a sequence of key-value pairs encoded in UTF8, encoded as either multipart/form-data, or application/x-www-form-urlencoded, this dictionary is present and for each key contains the list of all values for that key. If the data is of another media type, or if it is malformed, the dictionary is not present. An example value of this dictionary is {'key': \['value1', 'value2'\]}.
           */
          formData?: {[name: string]: FormDataItem[]},

          /**
           * If the request method is PUT or POST, and the body is not already parsed in formData, then the unparsed request body elements are contained in this array.
           */
          raw?: UploadData[],
        },

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,
      },
    ) => BlockingResponse>;

    /**
     * Fired before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any HTTP data is sent.
     */
    export const onBeforeSendHeaders: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The HTTP request headers that are going to be sent out with this request.
         */
        requestHeaders?: HttpHeaders,
      },
    ) => BlockingResponse>;

    /**
     * Fired just before a request is going to be sent to the server (modifications of previous onBeforeSendHeaders callbacks are visible by the time onSendHeaders is fired).
     */
    export const onSendHeaders: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The HTTP request headers that have been sent out with this request.
         */
        requestHeaders?: HttpHeaders,
      },
    ) => void>;

    /**
     * Fired when HTTP response headers of a request have been received.
     */
    export const onHeadersReceived: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line).
         */
        statusLine: string,

        /**
         * The HTTP response headers that have been received with this response.
         */
        responseHeaders?: HttpHeaders,

        /**
         * Standard HTTP status code returned by the server.
         */
        statusCode: number,
      },
    ) => BlockingResponse>;

    /**
     * Fired when an authentication failure is received. The listener has three options: it can provide authentication credentials, it can cancel the request and display the error page, or it can take no action on the challenge. If bad user credentials are provided, this may be called multiple times for the same request. Note, only one of `'blocking'` or `'asyncBlocking'` modes must be specified in the `extraInfoSpec` parameter.
     */
    export const onAuthRequired: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The authentication scheme, e.g. Basic or Digest.
         */
        scheme: string,

        /**
         * The authentication realm provided by the server, if there is one.
         */
        realm?: string,

        /**
         * The server requesting authentication.
         */
        challenger: {
          host: string,

          port: number,
        },

        /**
         * True for Proxy-Authenticate, false for WWW-Authenticate.
         */
        isProxy: boolean,

        /**
         * The HTTP response headers that were received along with this response.
         */
        responseHeaders?: HttpHeaders,

        /**
         * HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers.
         */
        statusLine: string,

        /**
         * Standard HTTP status code returned by the server.
         */
        statusCode: number,
      },
      /**
       * Only valid if `'asyncBlocking'` is specified as one of the `OnAuthRequiredOptions`.
       *
       * @since Chrome 58
       * @param response
       */
      asyncCallback?: (
        response: BlockingResponse,
      ) => void,
    ) => BlockingResponse>;

    /**
     * Fired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.
     */
    export const onResponseStarted: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address.
         */
        ip?: string,

        /**
         * Indicates if this response was fetched from disk cache.
         */
        fromCache: boolean,

        /**
         * Standard HTTP status code returned by the server.
         */
        statusCode: number,

        /**
         * The HTTP response headers that were received along with this response.
         */
        responseHeaders?: HttpHeaders,

        /**
         * HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers.
         */
        statusLine: string,
      },
    ) => void>;

    /**
     * Fired when a server-initiated redirect is about to occur.
     */
    export const onBeforeRedirect: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address.
         */
        ip?: string,

        /**
         * Indicates if this response was fetched from disk cache.
         */
        fromCache: boolean,

        /**
         * Standard HTTP status code returned by the server.
         */
        statusCode: number,

        /**
         * The new URL.
         */
        redirectUrl: string,

        /**
         * The HTTP response headers that were received along with this redirect.
         */
        responseHeaders?: HttpHeaders,

        /**
         * HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers.
         */
        statusLine: string,
      },
    ) => void>;

    /**
     * Fired when a request is completed.
     */
    export const onCompleted: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address.
         */
        ip?: string,

        /**
         * Indicates if this response was fetched from disk cache.
         */
        fromCache: boolean,

        /**
         * Standard HTTP status code returned by the server.
         */
        statusCode: number,

        /**
         * The HTTP response headers that were received along with this response.
         */
        responseHeaders?: HttpHeaders,

        /**
         * HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line) or an empty string if there are no headers.
         */
        statusLine: string,
      },
    ) => void>;

    /**
     * Fired when an error occurs.
     */
    export const onErrorOccurred: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        url: string,

        /**
         * Standard HTTP method.
         */
        method: string,

        /**
         * The value 0 indicates that the request happens in the main frame; a positive value indicates the ID of a subframe in which the request happens. If the document of a (sub-)frame is loaded (`type` is `main_frame` or `sub_frame`), `frameId` indicates the ID of this frame, not the ID of the outer frame. Frame IDs are unique within a tab.
         */
        frameId: number,

        /**
         * ID of frame that wraps the frame which sent the request. Set to -1 if no parent frame exists.
         */
        parentFrameId: number,

        /**
         * The ID of the tab in which the request takes place. Set to -1 if the request isn't related to a tab.
         */
        tabId: number,

        /**
         * How the requested resource will be used.
         */
        type: ResourceType,

        /**
         * The origin where the request was initiated. This does not change through redirects. If this is an opaque origin, the string 'null' will be used.
         *
         * @since Chrome 63
         */
        initiator?: string,

        /**
         * The time when this signal is triggered, in milliseconds since the epoch.
         */
        timeStamp: number,

        /**
         * The server IP address that the request was actually sent to. Note that it may be a literal IPv6 address.
         */
        ip?: string,

        /**
         * Indicates if this response was fetched from disk cache.
         */
        fromCache: boolean,

        /**
         * The error description. This string is _not_ guaranteed to remain backwards compatible between releases. You must not parse and act based upon its content.
         */
        error: string,
      },
    ) => void>;

    /**
     * Fired when an extension's proposed modification to a network request is ignored. This happens in case of conflicts with other extensions.
     *
     * @since Chrome 70
     */
    export const onActionIgnored: events.Event<(
      details: {
        /**
         * The ID of the request. Request IDs are unique within a browser session. As a result, they could be used to relate different events of the same request.
         */
        requestId: string,

        /**
         * The proposed action which was ignored.
         */
        action: IgnoredActionType,
      },
    ) => void>;
  }

  /**
   * Use the `chrome.windows` API to interact with browser windows. You can use this API to create, modify, and rearrange windows in the browser.
   */
  export namespace windows {

    /**
     * The windowId value that represents the absence of a Chrome browser window.
     */
    export const WINDOW_ID_NONE: -1;

    /**
     * The windowId value that represents the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     */
    export const WINDOW_ID_CURRENT: -2;

    /**
     * Gets details about a window.
     *
     * @param windowId
     * @param queryOptions
     */
    export function get(
      windowId: number,
      queryOptions?: QueryOptions,
    ): Promise<{
      window: Window,
    }>;

    /**
     * Gets details about a window.
     *
     * @param windowId
     * @param queryOptions
     * @param callback
     */
    export function get(
      windowId: number,
      queryOptions: QueryOptions,
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets details about a window.
     *
     * @param windowId
     * @param callback
     */
    export function get(
      windowId: number,
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     *
     * @param queryOptions
     */
    export function getCurrent(
      queryOptions?: QueryOptions,
    ): Promise<{
      window: Window,
    }>;

    /**
     * Gets the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     *
     * @param queryOptions
     * @param callback
     */
    export function getCurrent(
      queryOptions: QueryOptions,
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets the [current window](https://developer.chrome.com/docs/extensions/reference/windows/#current-window).
     *
     * @param callback
     */
    export function getCurrent(
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets the window that was most recently focused — typically the window 'on top'.
     *
     * @param queryOptions
     */
    export function getLastFocused(
      queryOptions?: QueryOptions,
    ): Promise<{
      window: Window,
    }>;

    /**
     * Gets the window that was most recently focused — typically the window 'on top'.
     *
     * @param queryOptions
     * @param callback
     */
    export function getLastFocused(
      queryOptions: QueryOptions,
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets the window that was most recently focused — typically the window 'on top'.
     *
     * @param callback
     */
    export function getLastFocused(
      callback: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Gets all windows.
     *
     * @param queryOptions
     */
    export function getAll(
      queryOptions?: QueryOptions,
    ): Promise<{
      windows: Window[],
    }>;

    /**
     * Gets all windows.
     *
     * @param queryOptions
     * @param callback
     */
    export function getAll(
      queryOptions: QueryOptions,
      callback: (
        windows: Window[],
      ) => void,
    ): void;

    /**
     * Gets all windows.
     *
     * @param callback
     */
    export function getAll(
      callback: (
        windows: Window[],
      ) => void,
    ): void;

    /**
     * Creates (opens) a new browser window with any optional sizing, position, or default URL provided.
     *
     * @param createData
     */
    export function create(
      createData?: {
        /**
         * A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme, e.g., 'http://www.google.com', not 'www.google.com'. Non-fully-qualified URLs are considered relative within the extension. Defaults to the New Tab Page.
         */
        url?: string | string[],

        /**
         * The ID of the tab to add to the new window.
         */
        tabId?: number,

        /**
         * The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
         */
        left?: number,

        /**
         * The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
         */
        top?: number,

        /**
         * The width in pixels of the new window, including the frame. If not specified, defaults to a natural width.
         */
        width?: number,

        /**
         * The height in pixels of the new window, including the frame. If not specified, defaults to a natural height.
         */
        height?: number,

        /**
         * If `true`, opens an active window. If `false`, opens an inactive window.
         */
        focused?: boolean,

        /**
         * Whether the new window should be an incognito window.
         */
        incognito?: boolean,

        /**
         * Specifies what type of browser window to create.
         */
        type?: CreateType,

        /**
         * The initial state of the window. The `minimized`, `maximized`, and `fullscreen` states cannot be combined with `left`, `top`, `width`, or `height`.
         */
        state?: WindowState,

        /**
         * If `true`, the newly-created window's 'window.opener' is set to the caller and is in the same [unit of related browsing contexts](https://www.w3.org/TR/html51/browsers.html#unit-of-related-browsing-contexts) as the caller.
         *
         * @since Chrome 64
         */
        setSelfAsOpener?: boolean,
      },
    ): Promise<{
      /**
       * Contains details about the created window.
       */
      window?: Window,
    }>;

    /**
     * Creates (opens) a new browser window with any optional sizing, position, or default URL provided.
     *
     * @param createData
     * @param callback
     */
    export function create(
      createData?: {
        /**
         * A URL or array of URLs to open as tabs in the window. Fully-qualified URLs must include a scheme, e.g., 'http://www.google.com', not 'www.google.com'. Non-fully-qualified URLs are considered relative within the extension. Defaults to the New Tab Page.
         */
        url?: string | string[],

        /**
         * The ID of the tab to add to the new window.
         */
        tabId?: number,

        /**
         * The number of pixels to position the new window from the left edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
         */
        left?: number,

        /**
         * The number of pixels to position the new window from the top edge of the screen. If not specified, the new window is offset naturally from the last focused window. This value is ignored for panels.
         */
        top?: number,

        /**
         * The width in pixels of the new window, including the frame. If not specified, defaults to a natural width.
         */
        width?: number,

        /**
         * The height in pixels of the new window, including the frame. If not specified, defaults to a natural height.
         */
        height?: number,

        /**
         * If `true`, opens an active window. If `false`, opens an inactive window.
         */
        focused?: boolean,

        /**
         * Whether the new window should be an incognito window.
         */
        incognito?: boolean,

        /**
         * Specifies what type of browser window to create.
         */
        type?: CreateType,

        /**
         * The initial state of the window. The `minimized`, `maximized`, and `fullscreen` states cannot be combined with `left`, `top`, `width`, or `height`.
         */
        state?: WindowState,

        /**
         * If `true`, the newly-created window's 'window.opener' is set to the caller and is in the same [unit of related browsing contexts](https://www.w3.org/TR/html51/browsers.html#unit-of-related-browsing-contexts) as the caller.
         *
         * @since Chrome 64
         */
        setSelfAsOpener?: boolean,
      },
      callback?: (
        /**
         * Contains details about the created window.
         */
        window?: Window,
      ) => void,
    ): void;

    /**
     * Updates the properties of a window. Specify only the properties that to be changed; unspecified properties are unchanged.
     *
     * @param windowId
     * @param updateInfo
     */
    export function update(
      windowId: number,
      updateInfo: {
        /**
         * The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels.
         */
        left?: number,

        /**
         * The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels.
         */
        top?: number,

        /**
         * The width to resize the window to in pixels. This value is ignored for panels.
         */
        width?: number,

        /**
         * The height to resize the window to in pixels. This value is ignored for panels.
         */
        height?: number,

        /**
         * If `true`, brings the window to the front; cannot be combined with the state 'minimized'. If `false`, brings the next window in the z-order to the front; cannot be combined with the state 'fullscreen' or 'maximized'.
         */
        focused?: boolean,

        /**
         * If `true`, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to `false` to cancel a previous `drawAttention` request.
         */
        drawAttention?: boolean,

        /**
         * The new state of the window. The 'minimized', 'maximized', and 'fullscreen' states cannot be combined with 'left', 'top', 'width', or 'height'.
         */
        state?: WindowState,
      },
    ): Promise<{
      window: Window,
    }>;

    /**
     * Updates the properties of a window. Specify only the properties that to be changed; unspecified properties are unchanged.
     *
     * @param windowId
     * @param updateInfo
     * @param callback
     */
    export function update(
      windowId: number,
      updateInfo: {
        /**
         * The offset from the left edge of the screen to move the window to in pixels. This value is ignored for panels.
         */
        left?: number,

        /**
         * The offset from the top edge of the screen to move the window to in pixels. This value is ignored for panels.
         */
        top?: number,

        /**
         * The width to resize the window to in pixels. This value is ignored for panels.
         */
        width?: number,

        /**
         * The height to resize the window to in pixels. This value is ignored for panels.
         */
        height?: number,

        /**
         * If `true`, brings the window to the front; cannot be combined with the state 'minimized'. If `false`, brings the next window in the z-order to the front; cannot be combined with the state 'fullscreen' or 'maximized'.
         */
        focused?: boolean,

        /**
         * If `true`, causes the window to be displayed in a manner that draws the user's attention to the window, without changing the focused window. The effect lasts until the user changes focus to the window. This option has no effect if the window already has focus. Set to `false` to cancel a previous `drawAttention` request.
         */
        drawAttention?: boolean,

        /**
         * The new state of the window. The 'minimized', 'maximized', and 'fullscreen' states cannot be combined with 'left', 'top', 'width', or 'height'.
         */
        state?: WindowState,
      },
      callback?: (
        window: Window,
      ) => void,
    ): void;

    /**
     * Removes (closes) a window and all the tabs inside it.
     *
     * @param windowId
     */
    export function remove(
      windowId: number,
    ): Promise<{}>;

    /**
     * Removes (closes) a window and all the tabs inside it.
     *
     * @param windowId
     * @param callback
     */
    export function remove(
      windowId: number,
      callback?: () => void,
    ): void;

    /**
     * The type of browser window this is. In some circumstances a window may not be assigned a `type` property; for example, when querying closed windows from the {@link sessions} API.
     */
    export type WindowType = "normal" | "popup" | "panel" | "app" | "devtools";

    /**
     * The state of this browser window. In some circumstances a window may not be assigned a `state` property; for example, when querying closed windows from the {@link sessions} API.
     */
    export type WindowState = "normal" | "minimized" | "maximized" | "fullscreen" | "locked-fullscreen";

    export interface Window {

      /**
       * The ID of the window. Window IDs are unique within a browser session. In some circumstances a window may not be assigned an `ID` property; for example, when querying windows using the {@link sessions} API, in which case a session ID may be present.
       */
      id?: number;

      /**
       * Whether the window is currently the focused window.
       */
      focused: boolean;

      /**
       * The offset of the window from the top edge of the screen in pixels. In some circumstances a window may not be assigned a `top` property; for example, when querying closed windows from the {@link sessions} API.
       */
      top?: number;

      /**
       * The offset of the window from the left edge of the screen in pixels. In some circumstances a window may not be assigned a `left` property; for example, when querying closed windows from the {@link sessions} API.
       */
      left?: number;

      /**
       * The width of the window, including the frame, in pixels. In some circumstances a window may not be assigned a `width` property; for example, when querying closed windows from the {@link sessions} API.
       */
      width?: number;

      /**
       * The height of the window, including the frame, in pixels. In some circumstances a window may not be assigned a `height` property; for example, when querying closed windows from the {@link sessions} API.
       */
      height?: number;

      /**
       * Array of {@link tabs.Tab} objects representing the current tabs in the window.
       */
      tabs?: tabs.Tab[];

      /**
       * Whether the window is incognito.
       */
      incognito: boolean;

      /**
       * The type of browser window this is.
       */
      type?: WindowType;

      /**
       * The state of this browser window.
       */
      state?: WindowState;

      /**
       * Whether the window is set to be always on top.
       */
      alwaysOnTop: boolean;

      /**
       * The session ID used to uniquely identify a window, obtained from the {@link sessions} API.
       */
      sessionId?: string;
    }

    /**
     * Specifies what type of browser window to create. 'panel' is deprecated and is available only to existing whitelisted extensions on Chrome OS.
     */
    export type CreateType = "normal" | "popup" | "panel";

    /**
     * @since Chrome 88
     */
    export interface QueryOptions {

      /**
       * If true, the {@link windows.Window} object has a tabs property that contains a list of the {@link tabs.Tab} objects. The `Tab` objects only contain the `url`, `pendingUrl`, `title`, and `favIconUrl` properties if the extension's manifest file includes the `"tabs"` permission.
       */
      populate?: boolean;

      /**
       * If set, the {@link windows.Window} returned is filtered based on its type. If unset, the default filter is set to `['normal', 'popup']`.
       */
      windowTypes?: WindowType[];
    }

    /**
     * Fired when a window is created.
     */
    export const onCreated: events.Event<(
      /**
       * Details of the created window.
       */
      window: Window,
    ) => void>;

    /**
     * Fired when a window is removed (closed).
     */
    export const onRemoved: events.Event<(
      /**
       * ID of the removed window.
       */
      windowId: number,
    ) => void>;

    /**
     * Fired when the currently focused window changes. Returns `chrome.windows.WINDOW_ID_NONE` if all Chrome windows have lost focus. **Note:** On some Linux window managers, `WINDOW_ID_NONE` is always sent immediately preceding a switch from one Chrome window to another.
     */
    export const onFocusChanged: events.Event<(
      /**
       * ID of the newly-focused window.
       */
      windowId: number,
    ) => void>;

    /**
     * Fired when a window has been resized; this event is only dispatched when the new bounds are committed, and not for in-progress changes.
     *
     * @since Chrome 86
     */
    export const onBoundsChanged: events.Event<(
      /**
       * Details of the window. The tabs will not be populated for the window.
       */
      window: Window,
    ) => void>;
  }
}